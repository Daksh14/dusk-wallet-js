// src/wasm.js
function alloc(wasm2, bytes) {
  const length = bytes.byteLength;
  try {
    const ptr = wasm2.allocate(length);
    const mem = new Uint8Array(wasm2.memory.buffer, ptr, length);
    mem.set(new Uint8Array(bytes));
    return ptr;
  } catch (error) {
    throw new Error("Error allocating memory in wasm: ", +error);
  }
}
function getAndFree(wasm2, result) {
  try {
    const mem = new Uint8Array(wasm2.memory.buffer, result.ptr, result.length);
    wasm2.free_mem(result.ptr, result.length);
    return mem;
  } catch (e) {
    throw new Error("Error while freeing memory: " + e);
  }
}
function decompose(result) {
  const ptr = result >> 32n;
  const len = (result << 32n & (1n << 64n) - 1n) >> 48n;
  const success = (result << 63n & (1n << 64n) - 1n) >> 63n == 0n;
  return {
    ptr: Number(ptr.toString()),
    length: Number(len.toString()),
    status: success
  };
}
var toBytes = (string) => {
  const utf8Encode = new TextEncoder();
  const bytes = utf8Encode.encode(string);
  return bytes;
};
function jsonFromBytes(bytes) {
  const string = new TextDecoder().decode(bytes);
  try {
    const jsonParsed = JSON.parse(string);
    return jsonParsed;
  } catch (e) {
    throw new Error("Error while parsing json output from function:", e);
  }
}
function call(wasm2, args, function_call) {
  const argBytes = toBytes(args);
  const ptr = alloc(wasm2, argBytes);
  const call2 = function_call(ptr, argBytes.byteLength);
  const callResult = decompose(call2);
  if (!callResult.status) {
    console.error("Function call " + function_call + " failed!");
  }
  const bytes = getAndFree(wasm2, callResult);
  return bytes;
}

// src/keys.js
function getPsks(wasm2, seed) {
  const json = JSON.stringify({
    seed: Array.from(seed)
  });
  return jsonFromBytes(call(wasm2, json, wasm2.public_spend_keys)).keys;
}
function getPublicKeyRkyvSerialized(wasm2, seed, index) {
  const json = JSON.stringify({
    seed: Array.from(seed),
    index
  });
  return call(wasm2, json, wasm2.get_public_key_rkyv_serialized);
}

// src/crypto.js
function checkIfOwned(wasm2, seed, note) {
  const json = JSON.stringify({
    seed: Array.from(seed),
    note: Array.from(note)
  });
  return jsonFromBytes(call(wasm2, json, wasm2.check_note_ownership));
}
function unspentSpentNotes(wasm2, notes, nullifiersOfNote, existingNullifiers, psks) {
  const args = JSON.stringify({
    notes,
    nullifiers_of_notes: nullifiersOfNote,
    existing_nullifiers: Array.from(existingNullifiers),
    psks
  });
  return jsonFromBytes(call(wasm2, args, wasm2.unspent_spent_notes));
}
function duskToLux(wasm2, dusk) {
  const args = JSON.stringify({
    dusk
  });
  return jsonFromBytes(call(wasm2, args, wasm2.dusk_to_lux)).lux;
}
function luxToDusk(wasm2, lux) {
  const args = JSON.stringify({
    lux
  });
  return jsonFromBytes(call(wasm2, args, wasm2.lux_to_dusk)).dusk;
}

// deno-cache:https://unpkg.com/dexie@3.2.4/dist/dexie.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
var keys = Object.keys;
var isArray = Array.isArray;
if (typeof Promise !== "undefined" && !_global.Promise) {
  _global.Promise = Promise;
}
function extend(obj, extension) {
  if (typeof extension !== "object")
    return obj;
  keys(extension).forEach(function(key) {
    obj[key] = extension[key];
  });
  return obj;
}
var getProto = Object.getPrototypeOf;
var _hasOwn = {}.hasOwnProperty;
function hasOwn(obj, prop) {
  return _hasOwn.call(obj, prop);
}
function props(proto, extension) {
  if (typeof extension === "function")
    extension = extension(getProto(proto));
  (typeof Reflect === "undefined" ? keys : Reflect.ownKeys)(extension).forEach(function(key) {
    setProp(proto, key, extension[key]);
  });
}
var defineProperty = Object.defineProperty;
function setProp(obj, prop, functionOrGetSet, options) {
  defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === "function" ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));
}
function derive(Child) {
  return {
    from: function(Parent) {
      Child.prototype = Object.create(Parent.prototype);
      setProp(Child.prototype, "constructor", Child);
      return {
        extend: props.bind(null, Child.prototype)
      };
    }
  };
}
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
function getPropertyDescriptor(obj, prop) {
  var pd = getOwnPropertyDescriptor(obj, prop);
  var proto;
  return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
}
var _slice = [].slice;
function slice(args, start, end) {
  return _slice.call(args, start, end);
}
function override(origFunc, overridedFactory) {
  return overridedFactory(origFunc);
}
function assert(b) {
  if (!b)
    throw new Error("Assertion Failed");
}
function asap$1(fn) {
  if (_global.setImmediate)
    setImmediate(fn);
  else
    setTimeout(fn, 0);
}
function arrayToObject(array, extractor) {
  return array.reduce(function(result, item, i) {
    var nameAndValue = extractor(item, i);
    if (nameAndValue)
      result[nameAndValue[0]] = nameAndValue[1];
    return result;
  }, {});
}
function tryCatch(fn, onerror, args) {
  try {
    fn.apply(null, args);
  } catch (ex) {
    onerror && onerror(ex);
  }
}
function getByKeyPath(obj, keyPath) {
  if (hasOwn(obj, keyPath))
    return obj[keyPath];
  if (!keyPath)
    return obj;
  if (typeof keyPath !== "string") {
    var rv = [];
    for (var i = 0, l = keyPath.length; i < l; ++i) {
      var val = getByKeyPath(obj, keyPath[i]);
      rv.push(val);
    }
    return rv;
  }
  var period = keyPath.indexOf(".");
  if (period !== -1) {
    var innerObj = obj[keyPath.substr(0, period)];
    return innerObj === void 0 ? void 0 : getByKeyPath(innerObj, keyPath.substr(period + 1));
  }
  return void 0;
}
function setByKeyPath(obj, keyPath, value) {
  if (!obj || keyPath === void 0)
    return;
  if ("isFrozen" in Object && Object.isFrozen(obj))
    return;
  if (typeof keyPath !== "string" && "length" in keyPath) {
    assert(typeof value !== "string" && "length" in value);
    for (var i = 0, l = keyPath.length; i < l; ++i) {
      setByKeyPath(obj, keyPath[i], value[i]);
    }
  } else {
    var period = keyPath.indexOf(".");
    if (period !== -1) {
      var currentKeyPath = keyPath.substr(0, period);
      var remainingKeyPath = keyPath.substr(period + 1);
      if (remainingKeyPath === "")
        if (value === void 0) {
          if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))
            obj.splice(currentKeyPath, 1);
          else
            delete obj[currentKeyPath];
        } else
          obj[currentKeyPath] = value;
      else {
        var innerObj = obj[currentKeyPath];
        if (!innerObj || !hasOwn(obj, currentKeyPath))
          innerObj = obj[currentKeyPath] = {};
        setByKeyPath(innerObj, remainingKeyPath, value);
      }
    } else {
      if (value === void 0) {
        if (isArray(obj) && !isNaN(parseInt(keyPath)))
          obj.splice(keyPath, 1);
        else
          delete obj[keyPath];
      } else
        obj[keyPath] = value;
    }
  }
}
function delByKeyPath(obj, keyPath) {
  if (typeof keyPath === "string")
    setByKeyPath(obj, keyPath, void 0);
  else if ("length" in keyPath)
    [].map.call(keyPath, function(kp) {
      setByKeyPath(obj, kp, void 0);
    });
}
function shallowClone(obj) {
  var rv = {};
  for (var m in obj) {
    if (hasOwn(obj, m))
      rv[m] = obj[m];
  }
  return rv;
}
var concat = [].concat;
function flatten(a) {
  return concat.apply([], a);
}
var intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(flatten([8, 16, 32, 64].map(function(num) {
  return ["Int", "Uint", "Float"].map(function(t) {
    return t + num + "Array";
  });
}))).filter(function(t) {
  return _global[t];
});
var intrinsicTypes = intrinsicTypeNames.map(function(t) {
  return _global[t];
});
arrayToObject(intrinsicTypeNames, function(x) {
  return [x, true];
});
var circularRefs = null;
function deepClone(any) {
  circularRefs = typeof WeakMap !== "undefined" && /* @__PURE__ */ new WeakMap();
  var rv = innerDeepClone(any);
  circularRefs = null;
  return rv;
}
function innerDeepClone(any) {
  if (!any || typeof any !== "object")
    return any;
  var rv = circularRefs && circularRefs.get(any);
  if (rv)
    return rv;
  if (isArray(any)) {
    rv = [];
    circularRefs && circularRefs.set(any, rv);
    for (var i = 0, l = any.length; i < l; ++i) {
      rv.push(innerDeepClone(any[i]));
    }
  } else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
    rv = any;
  } else {
    var proto = getProto(any);
    rv = proto === Object.prototype ? {} : Object.create(proto);
    circularRefs && circularRefs.set(any, rv);
    for (var prop in any) {
      if (hasOwn(any, prop)) {
        rv[prop] = innerDeepClone(any[prop]);
      }
    }
  }
  return rv;
}
var toString = {}.toString;
function toStringTag(o) {
  return toString.call(o).slice(8, -1);
}
var iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
var getIteratorOf = typeof iteratorSymbol === "symbol" ? function(x) {
  var i;
  return x != null && (i = x[iteratorSymbol]) && i.apply(x);
} : function() {
  return null;
};
var NO_CHAR_ARRAY = {};
function getArrayOf(arrayLike) {
  var i, a, x, it;
  if (arguments.length === 1) {
    if (isArray(arrayLike))
      return arrayLike.slice();
    if (this === NO_CHAR_ARRAY && typeof arrayLike === "string")
      return [arrayLike];
    if (it = getIteratorOf(arrayLike)) {
      a = [];
      while (x = it.next(), !x.done)
        a.push(x.value);
      return a;
    }
    if (arrayLike == null)
      return [arrayLike];
    i = arrayLike.length;
    if (typeof i === "number") {
      a = new Array(i);
      while (i--)
        a[i] = arrayLike[i];
      return a;
    }
    return [arrayLike];
  }
  i = arguments.length;
  a = new Array(i);
  while (i--)
    a[i] = arguments[i];
  return a;
}
var isAsyncFunction = typeof Symbol !== "undefined" ? function(fn) {
  return fn[Symbol.toStringTag] === "AsyncFunction";
} : function() {
  return false;
};
var debug = typeof location !== "undefined" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
function setDebug(value, filter) {
  debug = value;
  libraryFilter = filter;
}
var libraryFilter = function() {
  return true;
};
var NEEDS_THROW_FOR_STACK = !new Error("").stack;
function getErrorWithStack() {
  if (NEEDS_THROW_FOR_STACK)
    try {
      getErrorWithStack.arguments;
      throw new Error();
    } catch (e) {
      return e;
    }
  return new Error();
}
function prettyStack(exception, numIgnoredFrames) {
  var stack = exception.stack;
  if (!stack)
    return "";
  numIgnoredFrames = numIgnoredFrames || 0;
  if (stack.indexOf(exception.name) === 0)
    numIgnoredFrames += (exception.name + exception.message).split("\n").length;
  return stack.split("\n").slice(numIgnoredFrames).filter(libraryFilter).map(function(frame) {
    return "\n" + frame;
  }).join("");
}
var dexieErrorNames = [
  "Modify",
  "Bulk",
  "OpenFailed",
  "VersionChange",
  "Schema",
  "Upgrade",
  "InvalidTable",
  "MissingAPI",
  "NoSuchDatabase",
  "InvalidArgument",
  "SubTransaction",
  "Unsupported",
  "Internal",
  "DatabaseClosed",
  "PrematureCommit",
  "ForeignAwait"
];
var idbDomErrorNames = [
  "Unknown",
  "Constraint",
  "Data",
  "TransactionInactive",
  "ReadOnly",
  "Version",
  "NotFound",
  "InvalidState",
  "InvalidAccess",
  "Abort",
  "Timeout",
  "QuotaExceeded",
  "Syntax",
  "DataClone"
];
var errorList = dexieErrorNames.concat(idbDomErrorNames);
var defaultTexts = {
  VersionChanged: "Database version changed by other database connection",
  DatabaseClosed: "Database has been closed",
  Abort: "Transaction aborted",
  TransactionInactive: "Transaction has already completed or failed",
  MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
};
function DexieError(name, msg) {
  this._e = getErrorWithStack();
  this.name = name;
  this.message = msg;
}
derive(DexieError).from(Error).extend({
  stack: {
    get: function() {
      return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
    }
  },
  toString: function() {
    return this.name + ": " + this.message;
  }
});
function getMultiErrorMessage(msg, failures) {
  return msg + ". Errors: " + Object.keys(failures).map(function(key) {
    return failures[key].toString();
  }).filter(function(v, i, s) {
    return s.indexOf(v) === i;
  }).join("\n");
}
function ModifyError(msg, failures, successCount, failedKeys) {
  this._e = getErrorWithStack();
  this.failures = failures;
  this.failedKeys = failedKeys;
  this.successCount = successCount;
  this.message = getMultiErrorMessage(msg, failures);
}
derive(ModifyError).from(DexieError);
function BulkError(msg, failures) {
  this._e = getErrorWithStack();
  this.name = "BulkError";
  this.failures = Object.keys(failures).map(function(pos) {
    return failures[pos];
  });
  this.failuresByPos = failures;
  this.message = getMultiErrorMessage(msg, failures);
}
derive(BulkError).from(DexieError);
var errnames = errorList.reduce(function(obj, name) {
  return obj[name] = name + "Error", obj;
}, {});
var BaseException = DexieError;
var exceptions = errorList.reduce(function(obj, name) {
  var fullName = name + "Error";
  function DexieError2(msgOrInner, inner) {
    this._e = getErrorWithStack();
    this.name = fullName;
    if (!msgOrInner) {
      this.message = defaultTexts[name] || fullName;
      this.inner = null;
    } else if (typeof msgOrInner === "string") {
      this.message = "" + msgOrInner + (!inner ? "" : "\n " + inner);
      this.inner = inner || null;
    } else if (typeof msgOrInner === "object") {
      this.message = msgOrInner.name + " " + msgOrInner.message;
      this.inner = msgOrInner;
    }
  }
  derive(DexieError2).from(BaseException);
  obj[name] = DexieError2;
  return obj;
}, {});
exceptions.Syntax = SyntaxError;
exceptions.Type = TypeError;
exceptions.Range = RangeError;
var exceptionMap = idbDomErrorNames.reduce(function(obj, name) {
  obj[name + "Error"] = exceptions[name];
  return obj;
}, {});
function mapError(domError, message) {
  if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
    return domError;
  var rv = new exceptionMap[domError.name](message || domError.message, domError);
  if ("stack" in domError) {
    setProp(rv, "stack", { get: function() {
      return this.inner.stack;
    } });
  }
  return rv;
}
var fullNameExceptions = errorList.reduce(function(obj, name) {
  if (["Syntax", "Type", "Range"].indexOf(name) === -1)
    obj[name + "Error"] = exceptions[name];
  return obj;
}, {});
fullNameExceptions.ModifyError = ModifyError;
fullNameExceptions.DexieError = DexieError;
fullNameExceptions.BulkError = BulkError;
function nop() {
}
function mirror(val) {
  return val;
}
function pureFunctionChain(f1, f2) {
  if (f1 == null || f1 === mirror)
    return f2;
  return function(val) {
    return f2(f1(val));
  };
}
function callBoth(on1, on2) {
  return function() {
    on1.apply(this, arguments);
    on2.apply(this, arguments);
  };
}
function hookCreatingChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    var res = f1.apply(this, arguments);
    if (res !== void 0)
      arguments[0] = res;
    var onsuccess = this.onsuccess, onerror = this.onerror;
    this.onsuccess = null;
    this.onerror = null;
    var res2 = f2.apply(this, arguments);
    if (onsuccess)
      this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
    if (onerror)
      this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    return res2 !== void 0 ? res2 : res;
  };
}
function hookDeletingChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    f1.apply(this, arguments);
    var onsuccess = this.onsuccess, onerror = this.onerror;
    this.onsuccess = this.onerror = null;
    f2.apply(this, arguments);
    if (onsuccess)
      this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
    if (onerror)
      this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
  };
}
function hookUpdatingChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function(modifications) {
    var res = f1.apply(this, arguments);
    extend(modifications, res);
    var onsuccess = this.onsuccess, onerror = this.onerror;
    this.onsuccess = null;
    this.onerror = null;
    var res2 = f2.apply(this, arguments);
    if (onsuccess)
      this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
    if (onerror)
      this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    return res === void 0 ? res2 === void 0 ? void 0 : res2 : extend(res, res2);
  };
}
function reverseStoppableEventChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    if (f2.apply(this, arguments) === false)
      return false;
    return f1.apply(this, arguments);
  };
}
function promisableChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    var res = f1.apply(this, arguments);
    if (res && typeof res.then === "function") {
      var thiz = this, i = arguments.length, args = new Array(i);
      while (i--)
        args[i] = arguments[i];
      return res.then(function() {
        return f2.apply(thiz, args);
      });
    }
    return f2.apply(this, arguments);
  };
}
var INTERNAL = {};
var LONG_STACKS_CLIP_LIMIT = 100;
var MAX_LONG_STACKS = 20;
var ZONE_ECHO_LIMIT = 100;
var _a$1 = typeof Promise === "undefined" ? [] : function() {
  var globalP = Promise.resolve();
  if (typeof crypto === "undefined" || !crypto.subtle)
    return [globalP, getProto(globalP), globalP];
  var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
  return [
    nativeP,
    getProto(nativeP),
    globalP
  ];
}();
var resolvedNativePromise = _a$1[0];
var nativePromiseProto = _a$1[1];
var resolvedGlobalPromise = _a$1[2];
var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
var patchGlobalPromise = !!resolvedGlobalPromise;
var stack_being_generated = false;
var schedulePhysicalTick = resolvedGlobalPromise ? function() {
  resolvedGlobalPromise.then(physicalTick);
} : _global.setImmediate ? setImmediate.bind(null, physicalTick) : _global.MutationObserver ? function() {
  var hiddenDiv = document.createElement("div");
  new MutationObserver(function() {
    physicalTick();
    hiddenDiv = null;
  }).observe(hiddenDiv, { attributes: true });
  hiddenDiv.setAttribute("i", "1");
} : function() {
  setTimeout(physicalTick, 0);
};
var asap = function(callback, args) {
  microtickQueue.push([callback, args]);
  if (needsNewPhysicalTick) {
    schedulePhysicalTick();
    needsNewPhysicalTick = false;
  }
};
var isOutsideMicroTick = true;
var needsNewPhysicalTick = true;
var unhandledErrors = [];
var rejectingErrors = [];
var currentFulfiller = null;
var rejectionMapper = mirror;
var globalPSD = {
  id: "global",
  global: true,
  ref: 0,
  unhandleds: [],
  onunhandled: globalError,
  pgp: false,
  env: {},
  finalize: function() {
    this.unhandleds.forEach(function(uh) {
      try {
        globalError(uh[0], uh[1]);
      } catch (e) {
      }
    });
  }
};
var PSD = globalPSD;
var microtickQueue = [];
var numScheduledCalls = 0;
var tickFinalizers = [];
function DexiePromise(fn) {
  if (typeof this !== "object")
    throw new TypeError("Promises must be constructed via new");
  this._listeners = [];
  this.onuncatched = nop;
  this._lib = false;
  var psd = this._PSD = PSD;
  if (debug) {
    this._stackHolder = getErrorWithStack();
    this._prev = null;
    this._numPrev = 0;
  }
  if (typeof fn !== "function") {
    if (fn !== INTERNAL)
      throw new TypeError("Not a function");
    this._state = arguments[1];
    this._value = arguments[2];
    if (this._state === false)
      handleRejection(this, this._value);
    return;
  }
  this._state = null;
  this._value = null;
  ++psd.ref;
  executePromiseTask(this, fn);
}
var thenProp = {
  get: function() {
    var psd = PSD, microTaskId = totalEchoes;
    function then(onFulfilled, onRejected) {
      var _this = this;
      var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
      var cleanup = possibleAwait && !decrementExpectedAwaits();
      var rv = new DexiePromise(function(resolve, reject) {
        propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
      });
      debug && linkToPreviousPromise(rv, this);
      return rv;
    }
    then.prototype = INTERNAL;
    return then;
  },
  set: function(value) {
    setProp(this, "then", value && value.prototype === INTERNAL ? thenProp : {
      get: function() {
        return value;
      },
      set: thenProp.set
    });
  }
};
props(DexiePromise.prototype, {
  then: thenProp,
  _then: function(onFulfilled, onRejected) {
    propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
  },
  catch: function(onRejected) {
    if (arguments.length === 1)
      return this.then(null, onRejected);
    var type2 = arguments[0], handler = arguments[1];
    return typeof type2 === "function" ? this.then(null, function(err) {
      return err instanceof type2 ? handler(err) : PromiseReject(err);
    }) : this.then(null, function(err) {
      return err && err.name === type2 ? handler(err) : PromiseReject(err);
    });
  },
  finally: function(onFinally) {
    return this.then(function(value) {
      onFinally();
      return value;
    }, function(err) {
      onFinally();
      return PromiseReject(err);
    });
  },
  stack: {
    get: function() {
      if (this._stack)
        return this._stack;
      try {
        stack_being_generated = true;
        var stacks = getStack(this, [], MAX_LONG_STACKS);
        var stack = stacks.join("\nFrom previous: ");
        if (this._state !== null)
          this._stack = stack;
        return stack;
      } finally {
        stack_being_generated = false;
      }
    }
  },
  timeout: function(ms, msg) {
    var _this = this;
    return ms < Infinity ? new DexiePromise(function(resolve, reject) {
      var handle = setTimeout(function() {
        return reject(new exceptions.Timeout(msg));
      }, ms);
      _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
    }) : this;
  }
});
if (typeof Symbol !== "undefined" && Symbol.toStringTag)
  setProp(DexiePromise.prototype, Symbol.toStringTag, "Dexie.Promise");
globalPSD.env = snapShot();
function Listener(onFulfilled, onRejected, resolve, reject, zone) {
  this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
  this.onRejected = typeof onRejected === "function" ? onRejected : null;
  this.resolve = resolve;
  this.reject = reject;
  this.psd = zone;
}
props(DexiePromise, {
  all: function() {
    var values2 = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
    return new DexiePromise(function(resolve, reject) {
      if (values2.length === 0)
        resolve([]);
      var remaining = values2.length;
      values2.forEach(function(a, i) {
        return DexiePromise.resolve(a).then(function(x) {
          values2[i] = x;
          if (!--remaining)
            resolve(values2);
        }, reject);
      });
    });
  },
  resolve: function(value) {
    if (value instanceof DexiePromise)
      return value;
    if (value && typeof value.then === "function")
      return new DexiePromise(function(resolve, reject) {
        value.then(resolve, reject);
      });
    var rv = new DexiePromise(INTERNAL, true, value);
    linkToPreviousPromise(rv, currentFulfiller);
    return rv;
  },
  reject: PromiseReject,
  race: function() {
    var values2 = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
    return new DexiePromise(function(resolve, reject) {
      values2.map(function(value) {
        return DexiePromise.resolve(value).then(resolve, reject);
      });
    });
  },
  PSD: {
    get: function() {
      return PSD;
    },
    set: function(value) {
      return PSD = value;
    }
  },
  totalEchoes: { get: function() {
    return totalEchoes;
  } },
  newPSD: newScope,
  usePSD,
  scheduler: {
    get: function() {
      return asap;
    },
    set: function(value) {
      asap = value;
    }
  },
  rejectionMapper: {
    get: function() {
      return rejectionMapper;
    },
    set: function(value) {
      rejectionMapper = value;
    }
  },
  follow: function(fn, zoneProps) {
    return new DexiePromise(function(resolve, reject) {
      return newScope(function(resolve2, reject2) {
        var psd = PSD;
        psd.unhandleds = [];
        psd.onunhandled = reject2;
        psd.finalize = callBoth(function() {
          var _this = this;
          run_at_end_of_this_or_next_physical_tick(function() {
            _this.unhandleds.length === 0 ? resolve2() : reject2(_this.unhandleds[0]);
          });
        }, psd.finalize);
        fn();
      }, zoneProps, resolve, reject);
    });
  }
});
if (NativePromise) {
  if (NativePromise.allSettled)
    setProp(DexiePromise, "allSettled", function() {
      var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
      return new DexiePromise(function(resolve) {
        if (possiblePromises.length === 0)
          resolve([]);
        var remaining = possiblePromises.length;
        var results = new Array(remaining);
        possiblePromises.forEach(function(p, i) {
          return DexiePromise.resolve(p).then(function(value) {
            return results[i] = { status: "fulfilled", value };
          }, function(reason) {
            return results[i] = { status: "rejected", reason };
          }).then(function() {
            return --remaining || resolve(results);
          });
        });
      });
    });
  if (NativePromise.any && typeof AggregateError !== "undefined")
    setProp(DexiePromise, "any", function() {
      var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
      return new DexiePromise(function(resolve, reject) {
        if (possiblePromises.length === 0)
          reject(new AggregateError([]));
        var remaining = possiblePromises.length;
        var failures = new Array(remaining);
        possiblePromises.forEach(function(p, i) {
          return DexiePromise.resolve(p).then(function(value) {
            return resolve(value);
          }, function(failure) {
            failures[i] = failure;
            if (!--remaining)
              reject(new AggregateError(failures));
          });
        });
      });
    });
}
function executePromiseTask(promise, fn) {
  try {
    fn(function(value) {
      if (promise._state !== null)
        return;
      if (value === promise)
        throw new TypeError("A promise cannot be resolved with itself.");
      var shouldExecuteTick = promise._lib && beginMicroTickScope();
      if (value && typeof value.then === "function") {
        executePromiseTask(promise, function(resolve, reject) {
          value instanceof DexiePromise ? value._then(resolve, reject) : value.then(resolve, reject);
        });
      } else {
        promise._state = true;
        promise._value = value;
        propagateAllListeners(promise);
      }
      if (shouldExecuteTick)
        endMicroTickScope();
    }, handleRejection.bind(null, promise));
  } catch (ex) {
    handleRejection(promise, ex);
  }
}
function handleRejection(promise, reason) {
  rejectingErrors.push(reason);
  if (promise._state !== null)
    return;
  var shouldExecuteTick = promise._lib && beginMicroTickScope();
  reason = rejectionMapper(reason);
  promise._state = false;
  promise._value = reason;
  debug && reason !== null && typeof reason === "object" && !reason._promise && tryCatch(function() {
    var origProp = getPropertyDescriptor(reason, "stack");
    reason._promise = promise;
    setProp(reason, "stack", {
      get: function() {
        return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
      }
    });
  });
  addPossiblyUnhandledError(promise);
  propagateAllListeners(promise);
  if (shouldExecuteTick)
    endMicroTickScope();
}
function propagateAllListeners(promise) {
  var listeners = promise._listeners;
  promise._listeners = [];
  for (var i = 0, len = listeners.length; i < len; ++i) {
    propagateToListener(promise, listeners[i]);
  }
  var psd = promise._PSD;
  --psd.ref || psd.finalize();
  if (numScheduledCalls === 0) {
    ++numScheduledCalls;
    asap(function() {
      if (--numScheduledCalls === 0)
        finalizePhysicalTick();
    }, []);
  }
}
function propagateToListener(promise, listener) {
  if (promise._state === null) {
    promise._listeners.push(listener);
    return;
  }
  var cb = promise._state ? listener.onFulfilled : listener.onRejected;
  if (cb === null) {
    return (promise._state ? listener.resolve : listener.reject)(promise._value);
  }
  ++listener.psd.ref;
  ++numScheduledCalls;
  asap(callListener, [cb, promise, listener]);
}
function callListener(cb, promise, listener) {
  try {
    currentFulfiller = promise;
    var ret, value = promise._value;
    if (promise._state) {
      ret = cb(value);
    } else {
      if (rejectingErrors.length)
        rejectingErrors = [];
      ret = cb(value);
      if (rejectingErrors.indexOf(value) === -1)
        markErrorAsHandled(promise);
    }
    listener.resolve(ret);
  } catch (e) {
    listener.reject(e);
  } finally {
    currentFulfiller = null;
    if (--numScheduledCalls === 0)
      finalizePhysicalTick();
    --listener.psd.ref || listener.psd.finalize();
  }
}
function getStack(promise, stacks, limit) {
  if (stacks.length === limit)
    return stacks;
  var stack = "";
  if (promise._state === false) {
    var failure = promise._value, errorName, message;
    if (failure != null) {
      errorName = failure.name || "Error";
      message = failure.message || failure;
      stack = prettyStack(failure, 0);
    } else {
      errorName = failure;
      message = "";
    }
    stacks.push(errorName + (message ? ": " + message : "") + stack);
  }
  if (debug) {
    stack = prettyStack(promise._stackHolder, 2);
    if (stack && stacks.indexOf(stack) === -1)
      stacks.push(stack);
    if (promise._prev)
      getStack(promise._prev, stacks, limit);
  }
  return stacks;
}
function linkToPreviousPromise(promise, prev) {
  var numPrev = prev ? prev._numPrev + 1 : 0;
  if (numPrev < LONG_STACKS_CLIP_LIMIT) {
    promise._prev = prev;
    promise._numPrev = numPrev;
  }
}
function physicalTick() {
  beginMicroTickScope() && endMicroTickScope();
}
function beginMicroTickScope() {
  var wasRootExec = isOutsideMicroTick;
  isOutsideMicroTick = false;
  needsNewPhysicalTick = false;
  return wasRootExec;
}
function endMicroTickScope() {
  var callbacks, i, l;
  do {
    while (microtickQueue.length > 0) {
      callbacks = microtickQueue;
      microtickQueue = [];
      l = callbacks.length;
      for (i = 0; i < l; ++i) {
        var item = callbacks[i];
        item[0].apply(null, item[1]);
      }
    }
  } while (microtickQueue.length > 0);
  isOutsideMicroTick = true;
  needsNewPhysicalTick = true;
}
function finalizePhysicalTick() {
  var unhandledErrs = unhandledErrors;
  unhandledErrors = [];
  unhandledErrs.forEach(function(p) {
    p._PSD.onunhandled.call(null, p._value, p);
  });
  var finalizers = tickFinalizers.slice(0);
  var i = finalizers.length;
  while (i)
    finalizers[--i]();
}
function run_at_end_of_this_or_next_physical_tick(fn) {
  function finalizer() {
    fn();
    tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
  }
  tickFinalizers.push(finalizer);
  ++numScheduledCalls;
  asap(function() {
    if (--numScheduledCalls === 0)
      finalizePhysicalTick();
  }, []);
}
function addPossiblyUnhandledError(promise) {
  if (!unhandledErrors.some(function(p) {
    return p._value === promise._value;
  }))
    unhandledErrors.push(promise);
}
function markErrorAsHandled(promise) {
  var i = unhandledErrors.length;
  while (i)
    if (unhandledErrors[--i]._value === promise._value) {
      unhandledErrors.splice(i, 1);
      return;
    }
}
function PromiseReject(reason) {
  return new DexiePromise(INTERNAL, false, reason);
}
function wrap(fn, errorCatcher) {
  var psd = PSD;
  return function() {
    var wasRootExec = beginMicroTickScope(), outerScope = PSD;
    try {
      switchToZone(psd, true);
      return fn.apply(this, arguments);
    } catch (e) {
      errorCatcher && errorCatcher(e);
    } finally {
      switchToZone(outerScope, false);
      if (wasRootExec)
        endMicroTickScope();
    }
  };
}
var task = { awaits: 0, echoes: 0, id: 0 };
var taskCounter = 0;
var zoneStack = [];
var zoneEchoes = 0;
var totalEchoes = 0;
var zone_id_counter = 0;
function newScope(fn, props2, a1, a2) {
  var parent = PSD, psd = Object.create(parent);
  psd.parent = parent;
  psd.ref = 0;
  psd.global = false;
  psd.id = ++zone_id_counter;
  var globalEnv = globalPSD.env;
  psd.env = patchGlobalPromise ? {
    Promise: DexiePromise,
    PromiseProp: { value: DexiePromise, configurable: true, writable: true },
    all: DexiePromise.all,
    race: DexiePromise.race,
    allSettled: DexiePromise.allSettled,
    any: DexiePromise.any,
    resolve: DexiePromise.resolve,
    reject: DexiePromise.reject,
    nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
    gthen: getPatchedPromiseThen(globalEnv.gthen, psd)
  } : {};
  if (props2)
    extend(psd, props2);
  ++parent.ref;
  psd.finalize = function() {
    --this.parent.ref || this.parent.finalize();
  };
  var rv = usePSD(psd, fn, a1, a2);
  if (psd.ref === 0)
    psd.finalize();
  return rv;
}
function incrementExpectedAwaits() {
  if (!task.id)
    task.id = ++taskCounter;
  ++task.awaits;
  task.echoes += ZONE_ECHO_LIMIT;
  return task.id;
}
function decrementExpectedAwaits() {
  if (!task.awaits)
    return false;
  if (--task.awaits === 0)
    task.id = 0;
  task.echoes = task.awaits * ZONE_ECHO_LIMIT;
  return true;
}
if (("" + nativePromiseThen).indexOf("[native code]") === -1) {
  incrementExpectedAwaits = decrementExpectedAwaits = nop;
}
function onPossibleParallellAsync(possiblePromise) {
  if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
    incrementExpectedAwaits();
    return possiblePromise.then(function(x) {
      decrementExpectedAwaits();
      return x;
    }, function(e) {
      decrementExpectedAwaits();
      return rejection(e);
    });
  }
  return possiblePromise;
}
function zoneEnterEcho(targetZone) {
  ++totalEchoes;
  if (!task.echoes || --task.echoes === 0) {
    task.echoes = task.id = 0;
  }
  zoneStack.push(PSD);
  switchToZone(targetZone, true);
}
function zoneLeaveEcho() {
  var zone = zoneStack[zoneStack.length - 1];
  zoneStack.pop();
  switchToZone(zone, false);
}
function switchToZone(targetZone, bEnteringZone) {
  var currentZone = PSD;
  if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
    enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
  }
  if (targetZone === PSD)
    return;
  PSD = targetZone;
  if (currentZone === globalPSD)
    globalPSD.env = snapShot();
  if (patchGlobalPromise) {
    var GlobalPromise_1 = globalPSD.env.Promise;
    var targetEnv = targetZone.env;
    nativePromiseProto.then = targetEnv.nthen;
    GlobalPromise_1.prototype.then = targetEnv.gthen;
    if (currentZone.global || targetZone.global) {
      Object.defineProperty(_global, "Promise", targetEnv.PromiseProp);
      GlobalPromise_1.all = targetEnv.all;
      GlobalPromise_1.race = targetEnv.race;
      GlobalPromise_1.resolve = targetEnv.resolve;
      GlobalPromise_1.reject = targetEnv.reject;
      if (targetEnv.allSettled)
        GlobalPromise_1.allSettled = targetEnv.allSettled;
      if (targetEnv.any)
        GlobalPromise_1.any = targetEnv.any;
    }
  }
}
function snapShot() {
  var GlobalPromise = _global.Promise;
  return patchGlobalPromise ? {
    Promise: GlobalPromise,
    PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
    all: GlobalPromise.all,
    race: GlobalPromise.race,
    allSettled: GlobalPromise.allSettled,
    any: GlobalPromise.any,
    resolve: GlobalPromise.resolve,
    reject: GlobalPromise.reject,
    nthen: nativePromiseProto.then,
    gthen: GlobalPromise.prototype.then
  } : {};
}
function usePSD(psd, fn, a1, a2, a3) {
  var outerScope = PSD;
  try {
    switchToZone(psd, true);
    return fn(a1, a2, a3);
  } finally {
    switchToZone(outerScope, false);
  }
}
function enqueueNativeMicroTask(job) {
  nativePromiseThen.call(resolvedNativePromise, job);
}
function nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
  return typeof fn !== "function" ? fn : function() {
    var outerZone = PSD;
    if (possibleAwait)
      incrementExpectedAwaits();
    switchToZone(zone, true);
    try {
      return fn.apply(this, arguments);
    } finally {
      switchToZone(outerZone, false);
      if (cleanup)
        enqueueNativeMicroTask(decrementExpectedAwaits);
    }
  };
}
function getPatchedPromiseThen(origThen, zone) {
  return function(onResolved, onRejected) {
    return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone), nativeAwaitCompatibleWrap(onRejected, zone));
  };
}
var UNHANDLEDREJECTION = "unhandledrejection";
function globalError(err, promise) {
  var rv;
  try {
    rv = promise.onuncatched(err);
  } catch (e) {
  }
  if (rv !== false)
    try {
      var event, eventData = { promise, reason: err };
      if (_global.document && document.createEvent) {
        event = document.createEvent("Event");
        event.initEvent(UNHANDLEDREJECTION, true, true);
        extend(event, eventData);
      } else if (_global.CustomEvent) {
        event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
        extend(event, eventData);
      }
      if (event && _global.dispatchEvent) {
        dispatchEvent(event);
        if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
          try {
            _global.onunhandledrejection(event);
          } catch (_) {
          }
      }
      if (debug && event && !event.defaultPrevented) {
        console.warn("Unhandled rejection: " + (err.stack || err));
      }
    } catch (e) {
    }
}
var rejection = DexiePromise.reject;
function tempTransaction(db, mode, storeNames, fn) {
  if (!db.idbdb || !db._state.openComplete && (!PSD.letThrough && !db._vip)) {
    if (db._state.openComplete) {
      return rejection(new exceptions.DatabaseClosed(db._state.dbOpenError));
    }
    if (!db._state.isBeingOpened) {
      if (!db._options.autoOpen)
        return rejection(new exceptions.DatabaseClosed());
      db.open().catch(nop);
    }
    return db._state.dbReadyPromise.then(function() {
      return tempTransaction(db, mode, storeNames, fn);
    });
  } else {
    var trans = db._createTransaction(mode, storeNames, db._dbSchema);
    try {
      trans.create();
      db._state.PR1398_maxLoop = 3;
    } catch (ex) {
      if (ex.name === errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
        console.warn("Dexie: Need to reopen db");
        db._close();
        return db.open().then(function() {
          return tempTransaction(db, mode, storeNames, fn);
        });
      }
      return rejection(ex);
    }
    return trans._promise(mode, function(resolve, reject) {
      return newScope(function() {
        PSD.trans = trans;
        return fn(resolve, reject, trans);
      });
    }).then(function(result) {
      return trans._completion.then(function() {
        return result;
      });
    });
  }
}
var DEXIE_VERSION = "3.2.4";
var maxString = String.fromCharCode(65535);
var minKey = -Infinity;
var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
var STRING_EXPECTED = "String expected.";
var connections = [];
var isIEOrEdge = typeof navigator !== "undefined" && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
var hasIEDeleteObjectStoreBug = isIEOrEdge;
var hangsOnDeleteLargeKeyRange = isIEOrEdge;
var dexieStackFrameFilter = function(frame) {
  return !/(dexie\.js|dexie\.min\.js)/.test(frame);
};
var DBNAMES_DB = "__dbnames";
var READONLY = "readonly";
var READWRITE = "readwrite";
function combine(filter1, filter2) {
  return filter1 ? filter2 ? function() {
    return filter1.apply(this, arguments) && filter2.apply(this, arguments);
  } : filter1 : filter2;
}
var AnyRange = {
  type: 3,
  lower: -Infinity,
  lowerOpen: false,
  upper: [[]],
  upperOpen: false
};
function workaroundForUndefinedPrimKey(keyPath) {
  return typeof keyPath === "string" && !/\./.test(keyPath) ? function(obj) {
    if (obj[keyPath] === void 0 && keyPath in obj) {
      obj = deepClone(obj);
      delete obj[keyPath];
    }
    return obj;
  } : function(obj) {
    return obj;
  };
}
var Table = function() {
  function Table2() {
  }
  Table2.prototype._trans = function(mode, fn, writeLocked) {
    var trans = this._tx || PSD.trans;
    var tableName = this.name;
    function checkTableInTransaction(resolve, reject, trans2) {
      if (!trans2.schema[tableName])
        throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
      return fn(trans2.idbtrans, trans2);
    }
    var wasRootExec = beginMicroTickScope();
    try {
      return trans && trans.db === this.db ? trans === PSD.trans ? trans._promise(mode, checkTableInTransaction, writeLocked) : newScope(function() {
        return trans._promise(mode, checkTableInTransaction, writeLocked);
      }, { trans, transless: PSD.transless || PSD }) : tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
    } finally {
      if (wasRootExec)
        endMicroTickScope();
    }
  };
  Table2.prototype.get = function(keyOrCrit, cb) {
    var _this = this;
    if (keyOrCrit && keyOrCrit.constructor === Object)
      return this.where(keyOrCrit).first(cb);
    return this._trans("readonly", function(trans) {
      return _this.core.get({ trans, key: keyOrCrit }).then(function(res) {
        return _this.hook.reading.fire(res);
      });
    }).then(cb);
  };
  Table2.prototype.where = function(indexOrCrit) {
    if (typeof indexOrCrit === "string")
      return new this.db.WhereClause(this, indexOrCrit);
    if (isArray(indexOrCrit))
      return new this.db.WhereClause(this, "[" + indexOrCrit.join("+") + "]");
    var keyPaths = keys(indexOrCrit);
    if (keyPaths.length === 1)
      return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
    var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function(ix) {
      return ix.compound && keyPaths.every(function(keyPath) {
        return ix.keyPath.indexOf(keyPath) >= 0;
      }) && ix.keyPath.every(function(keyPath) {
        return keyPaths.indexOf(keyPath) >= 0;
      });
    })[0];
    if (compoundIndex && this.db._maxKey !== maxString)
      return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map(function(kp) {
        return indexOrCrit[kp];
      }));
    if (!compoundIndex && debug)
      console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " + ("compound index [" + keyPaths.join("+") + "]"));
    var idxByName = this.schema.idxByName;
    var idb = this.db._deps.indexedDB;
    function equals(a, b) {
      try {
        return idb.cmp(a, b) === 0;
      } catch (e) {
        return false;
      }
    }
    var _a2 = keyPaths.reduce(function(_a3, keyPath) {
      var prevIndex = _a3[0], prevFilterFn = _a3[1];
      var index = idxByName[keyPath];
      var value = indexOrCrit[keyPath];
      return [
        prevIndex || index,
        prevIndex || !index ? combine(prevFilterFn, index && index.multi ? function(x) {
          var prop = getByKeyPath(x, keyPath);
          return isArray(prop) && prop.some(function(item) {
            return equals(value, item);
          });
        } : function(x) {
          return equals(value, getByKeyPath(x, keyPath));
        }) : prevFilterFn
      ];
    }, [null, null]), idx = _a2[0], filterFunction = _a2[1];
    return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(filterFunction) : compoundIndex ? this.filter(filterFunction) : this.where(keyPaths).equals("");
  };
  Table2.prototype.filter = function(filterFunction) {
    return this.toCollection().and(filterFunction);
  };
  Table2.prototype.count = function(thenShortcut) {
    return this.toCollection().count(thenShortcut);
  };
  Table2.prototype.offset = function(offset) {
    return this.toCollection().offset(offset);
  };
  Table2.prototype.limit = function(numRows) {
    return this.toCollection().limit(numRows);
  };
  Table2.prototype.each = function(callback) {
    return this.toCollection().each(callback);
  };
  Table2.prototype.toArray = function(thenShortcut) {
    return this.toCollection().toArray(thenShortcut);
  };
  Table2.prototype.toCollection = function() {
    return new this.db.Collection(new this.db.WhereClause(this));
  };
  Table2.prototype.orderBy = function(index) {
    return new this.db.Collection(new this.db.WhereClause(this, isArray(index) ? "[" + index.join("+") + "]" : index));
  };
  Table2.prototype.reverse = function() {
    return this.toCollection().reverse();
  };
  Table2.prototype.mapToClass = function(constructor) {
    this.schema.mappedClass = constructor;
    var readHook = function(obj) {
      if (!obj)
        return obj;
      var res = Object.create(constructor.prototype);
      for (var m in obj)
        if (hasOwn(obj, m))
          try {
            res[m] = obj[m];
          } catch (_) {
          }
      return res;
    };
    if (this.schema.readHook) {
      this.hook.reading.unsubscribe(this.schema.readHook);
    }
    this.schema.readHook = readHook;
    this.hook("reading", readHook);
    return constructor;
  };
  Table2.prototype.defineClass = function() {
    function Class(content) {
      extend(this, content);
    }
    return this.mapToClass(Class);
  };
  Table2.prototype.add = function(obj, key) {
    var _this = this;
    var _a2 = this.schema.primKey, auto = _a2.auto, keyPath = _a2.keyPath;
    var objToAdd = obj;
    if (keyPath && auto) {
      objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
    }
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({ trans, type: "add", keys: key != null ? [key] : null, values: [objToAdd] });
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult;
    }).then(function(lastResult) {
      if (keyPath) {
        try {
          setByKeyPath(obj, keyPath, lastResult);
        } catch (_) {
        }
      }
      return lastResult;
    });
  };
  Table2.prototype.update = function(keyOrObject, modifications) {
    if (typeof keyOrObject === "object" && !isArray(keyOrObject)) {
      var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
      if (key === void 0)
        return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
      try {
        if (typeof modifications !== "function") {
          keys(modifications).forEach(function(keyPath) {
            setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
          });
        } else {
          modifications(keyOrObject, { value: keyOrObject, primKey: key });
        }
      } catch (_a2) {
      }
      return this.where(":id").equals(key).modify(modifications);
    } else {
      return this.where(":id").equals(keyOrObject).modify(modifications);
    }
  };
  Table2.prototype.put = function(obj, key) {
    var _this = this;
    var _a2 = this.schema.primKey, auto = _a2.auto, keyPath = _a2.keyPath;
    var objToAdd = obj;
    if (keyPath && auto) {
      objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
    }
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({ trans, type: "put", values: [objToAdd], keys: key != null ? [key] : null });
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult;
    }).then(function(lastResult) {
      if (keyPath) {
        try {
          setByKeyPath(obj, keyPath, lastResult);
        } catch (_) {
        }
      }
      return lastResult;
    });
  };
  Table2.prototype.delete = function(key) {
    var _this = this;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({ trans, type: "delete", keys: [key] });
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0;
    });
  };
  Table2.prototype.clear = function() {
    var _this = this;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({ trans, type: "deleteRange", range: AnyRange });
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0;
    });
  };
  Table2.prototype.bulkGet = function(keys3) {
    var _this = this;
    return this._trans("readonly", function(trans) {
      return _this.core.getMany({
        keys: keys3,
        trans
      }).then(function(result) {
        return result.map(function(res) {
          return _this.hook.reading.fire(res);
        });
      });
    });
  };
  Table2.prototype.bulkAdd = function(objects, keysOrOptions, options) {
    var _this = this;
    var keys3 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
    options = options || (keys3 ? void 0 : keysOrOptions);
    var wantResults = options ? options.allKeys : void 0;
    return this._trans("readwrite", function(trans) {
      var _a2 = _this.schema.primKey, auto = _a2.auto, keyPath = _a2.keyPath;
      if (keyPath && keys3)
        throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
      if (keys3 && keys3.length !== objects.length)
        throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
      var numObjects = objects.length;
      var objectsToAdd = keyPath && auto ? objects.map(workaroundForUndefinedPrimKey(keyPath)) : objects;
      return _this.core.mutate({ trans, type: "add", keys: keys3, values: objectsToAdd, wantResults }).then(function(_a3) {
        var numFailures = _a3.numFailures, results = _a3.results, lastResult = _a3.lastResult, failures = _a3.failures;
        var result = wantResults ? results : lastResult;
        if (numFailures === 0)
          return result;
        throw new BulkError(_this.name + ".bulkAdd(): " + numFailures + " of " + numObjects + " operations failed", failures);
      });
    });
  };
  Table2.prototype.bulkPut = function(objects, keysOrOptions, options) {
    var _this = this;
    var keys3 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
    options = options || (keys3 ? void 0 : keysOrOptions);
    var wantResults = options ? options.allKeys : void 0;
    return this._trans("readwrite", function(trans) {
      var _a2 = _this.schema.primKey, auto = _a2.auto, keyPath = _a2.keyPath;
      if (keyPath && keys3)
        throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
      if (keys3 && keys3.length !== objects.length)
        throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
      var numObjects = objects.length;
      var objectsToPut = keyPath && auto ? objects.map(workaroundForUndefinedPrimKey(keyPath)) : objects;
      return _this.core.mutate({ trans, type: "put", keys: keys3, values: objectsToPut, wantResults }).then(function(_a3) {
        var numFailures = _a3.numFailures, results = _a3.results, lastResult = _a3.lastResult, failures = _a3.failures;
        var result = wantResults ? results : lastResult;
        if (numFailures === 0)
          return result;
        throw new BulkError(_this.name + ".bulkPut(): " + numFailures + " of " + numObjects + " operations failed", failures);
      });
    });
  };
  Table2.prototype.bulkDelete = function(keys3) {
    var _this = this;
    var numKeys = keys3.length;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({ trans, type: "delete", keys: keys3 });
    }).then(function(_a2) {
      var numFailures = _a2.numFailures, lastResult = _a2.lastResult, failures = _a2.failures;
      if (numFailures === 0)
        return lastResult;
      throw new BulkError(_this.name + ".bulkDelete(): " + numFailures + " of " + numKeys + " operations failed", failures);
    });
  };
  return Table2;
}();
function Events(ctx) {
  var evs = {};
  var rv = function(eventName, subscriber) {
    if (subscriber) {
      var i2 = arguments.length, args = new Array(i2 - 1);
      while (--i2)
        args[i2 - 1] = arguments[i2];
      evs[eventName].subscribe.apply(null, args);
      return ctx;
    } else if (typeof eventName === "string") {
      return evs[eventName];
    }
  };
  rv.addEventType = add;
  for (var i = 1, l = arguments.length; i < l; ++i) {
    add(arguments[i]);
  }
  return rv;
  function add(eventName, chainFunction, defaultFunction) {
    if (typeof eventName === "object")
      return addConfiguredEvents(eventName);
    if (!chainFunction)
      chainFunction = reverseStoppableEventChain;
    if (!defaultFunction)
      defaultFunction = nop;
    var context = {
      subscribers: [],
      fire: defaultFunction,
      subscribe: function(cb) {
        if (context.subscribers.indexOf(cb) === -1) {
          context.subscribers.push(cb);
          context.fire = chainFunction(context.fire, cb);
        }
      },
      unsubscribe: function(cb) {
        context.subscribers = context.subscribers.filter(function(fn) {
          return fn !== cb;
        });
        context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
      }
    };
    evs[eventName] = rv[eventName] = context;
    return context;
  }
  function addConfiguredEvents(cfg) {
    keys(cfg).forEach(function(eventName) {
      var args = cfg[eventName];
      if (isArray(args)) {
        add(eventName, cfg[eventName][0], cfg[eventName][1]);
      } else if (args === "asap") {
        var context = add(eventName, mirror, function fire() {
          var i2 = arguments.length, args2 = new Array(i2);
          while (i2--)
            args2[i2] = arguments[i2];
          context.subscribers.forEach(function(fn) {
            asap$1(function fireEvent() {
              fn.apply(null, args2);
            });
          });
        });
      } else
        throw new exceptions.InvalidArgument("Invalid event config");
    });
  }
}
function makeClassConstructor(prototype, constructor) {
  derive(constructor).from({ prototype });
  return constructor;
}
function createTableConstructor(db) {
  return makeClassConstructor(Table.prototype, function Table2(name, tableSchema, trans) {
    this.db = db;
    this._tx = trans;
    this.name = name;
    this.schema = tableSchema;
    this.hook = db._allTables[name] ? db._allTables[name].hook : Events(null, {
      "creating": [hookCreatingChain, nop],
      "reading": [pureFunctionChain, mirror],
      "updating": [hookUpdatingChain, nop],
      "deleting": [hookDeletingChain, nop]
    });
  });
}
function isPlainKeyRange(ctx, ignoreLimitFilter) {
  return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
}
function addFilter(ctx, fn) {
  ctx.filter = combine(ctx.filter, fn);
}
function addReplayFilter(ctx, factory, isLimitFilter) {
  var curr = ctx.replayFilter;
  ctx.replayFilter = curr ? function() {
    return combine(curr(), factory());
  } : factory;
  ctx.justLimit = isLimitFilter && !curr;
}
function addMatchFilter(ctx, fn) {
  ctx.isMatch = combine(ctx.isMatch, fn);
}
function getIndexOrStore(ctx, coreSchema) {
  if (ctx.isPrimKey)
    return coreSchema.primaryKey;
  var index = coreSchema.getIndexByKeyPath(ctx.index);
  if (!index)
    throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
  return index;
}
function openCursor(ctx, coreTable, trans) {
  var index = getIndexOrStore(ctx, coreTable.schema);
  return coreTable.openCursor({
    trans,
    values: !ctx.keysOnly,
    reverse: ctx.dir === "prev",
    unique: !!ctx.unique,
    query: {
      index,
      range: ctx.range
    }
  });
}
function iter(ctx, fn, coreTrans, coreTable) {
  var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
  if (!ctx.or) {
    return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
  } else {
    var set_1 = {};
    var union = function(item, cursor, advance) {
      if (!filter || filter(cursor, advance, function(result) {
        return cursor.stop(result);
      }, function(err) {
        return cursor.fail(err);
      })) {
        var primaryKey = cursor.primaryKey;
        var key = "" + primaryKey;
        if (key === "[object ArrayBuffer]")
          key = "" + new Uint8Array(primaryKey);
        if (!hasOwn(set_1, key)) {
          set_1[key] = true;
          fn(item, cursor, advance);
        }
      }
    };
    return Promise.all([
      ctx.or._iterate(union, coreTrans),
      iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
    ]);
  }
}
function iterate(cursorPromise, filter, fn, valueMapper) {
  var mappedFn = valueMapper ? function(x, c, a) {
    return fn(valueMapper(x), c, a);
  } : fn;
  var wrappedFn = wrap(mappedFn);
  return cursorPromise.then(function(cursor) {
    if (cursor) {
      return cursor.start(function() {
        var c = function() {
          return cursor.continue();
        };
        if (!filter || filter(cursor, function(advancer) {
          return c = advancer;
        }, function(val) {
          cursor.stop(val);
          c = nop;
        }, function(e) {
          cursor.fail(e);
          c = nop;
        }))
          wrappedFn(cursor.value, cursor, function(advancer) {
            return c = advancer;
          });
        c();
      });
    }
  });
}
function cmp(a, b) {
  try {
    var ta = type(a);
    var tb = type(b);
    if (ta !== tb) {
      if (ta === "Array")
        return 1;
      if (tb === "Array")
        return -1;
      if (ta === "binary")
        return 1;
      if (tb === "binary")
        return -1;
      if (ta === "string")
        return 1;
      if (tb === "string")
        return -1;
      if (ta === "Date")
        return 1;
      if (tb !== "Date")
        return NaN;
      return -1;
    }
    switch (ta) {
      case "number":
      case "Date":
      case "string":
        return a > b ? 1 : a < b ? -1 : 0;
      case "binary": {
        return compareUint8Arrays(getUint8Array(a), getUint8Array(b));
      }
      case "Array":
        return compareArrays(a, b);
    }
  } catch (_a2) {
  }
  return NaN;
}
function compareArrays(a, b) {
  var al = a.length;
  var bl = b.length;
  var l = al < bl ? al : bl;
  for (var i = 0; i < l; ++i) {
    var res = cmp(a[i], b[i]);
    if (res !== 0)
      return res;
  }
  return al === bl ? 0 : al < bl ? -1 : 1;
}
function compareUint8Arrays(a, b) {
  var al = a.length;
  var bl = b.length;
  var l = al < bl ? al : bl;
  for (var i = 0; i < l; ++i) {
    if (a[i] !== b[i])
      return a[i] < b[i] ? -1 : 1;
  }
  return al === bl ? 0 : al < bl ? -1 : 1;
}
function type(x) {
  var t = typeof x;
  if (t !== "object")
    return t;
  if (ArrayBuffer.isView(x))
    return "binary";
  var tsTag = toStringTag(x);
  return tsTag === "ArrayBuffer" ? "binary" : tsTag;
}
function getUint8Array(a) {
  if (a instanceof Uint8Array)
    return a;
  if (ArrayBuffer.isView(a))
    return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
  return new Uint8Array(a);
}
var Collection = function() {
  function Collection2() {
  }
  Collection2.prototype._read = function(fn, cb) {
    var ctx = this._ctx;
    return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readonly", fn).then(cb);
  };
  Collection2.prototype._write = function(fn) {
    var ctx = this._ctx;
    return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readwrite", fn, "locked");
  };
  Collection2.prototype._addAlgorithm = function(fn) {
    var ctx = this._ctx;
    ctx.algorithm = combine(ctx.algorithm, fn);
  };
  Collection2.prototype._iterate = function(fn, coreTrans) {
    return iter(this._ctx, fn, coreTrans, this._ctx.table.core);
  };
  Collection2.prototype.clone = function(props2) {
    var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
    if (props2)
      extend(ctx, props2);
    rv._ctx = ctx;
    return rv;
  };
  Collection2.prototype.raw = function() {
    this._ctx.valueMapper = null;
    return this;
  };
  Collection2.prototype.each = function(fn) {
    var ctx = this._ctx;
    return this._read(function(trans) {
      return iter(ctx, fn, trans, ctx.table.core);
    });
  };
  Collection2.prototype.count = function(cb) {
    var _this = this;
    return this._read(function(trans) {
      var ctx = _this._ctx;
      var coreTable = ctx.table.core;
      if (isPlainKeyRange(ctx, true)) {
        return coreTable.count({
          trans,
          query: {
            index: getIndexOrStore(ctx, coreTable.schema),
            range: ctx.range
          }
        }).then(function(count2) {
          return Math.min(count2, ctx.limit);
        });
      } else {
        var count = 0;
        return iter(ctx, function() {
          ++count;
          return false;
        }, trans, coreTable).then(function() {
          return count;
        });
      }
    }).then(cb);
  };
  Collection2.prototype.sortBy = function(keyPath, cb) {
    var parts = keyPath.split(".").reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
    function getval(obj, i) {
      if (i)
        return getval(obj[parts[i]], i - 1);
      return obj[lastPart];
    }
    var order = this._ctx.dir === "next" ? 1 : -1;
    function sorter(a, b) {
      var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
      return aVal < bVal ? -order : aVal > bVal ? order : 0;
    }
    return this.toArray(function(a) {
      return a.sort(sorter);
    }).then(cb);
  };
  Collection2.prototype.toArray = function(cb) {
    var _this = this;
    return this._read(function(trans) {
      var ctx = _this._ctx;
      if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
        var valueMapper_1 = ctx.valueMapper;
        var index = getIndexOrStore(ctx, ctx.table.core.schema);
        return ctx.table.core.query({
          trans,
          limit: ctx.limit,
          values: true,
          query: {
            index,
            range: ctx.range
          }
        }).then(function(_a2) {
          var result = _a2.result;
          return valueMapper_1 ? result.map(valueMapper_1) : result;
        });
      } else {
        var a_1 = [];
        return iter(ctx, function(item) {
          return a_1.push(item);
        }, trans, ctx.table.core).then(function() {
          return a_1;
        });
      }
    }, cb);
  };
  Collection2.prototype.offset = function(offset) {
    var ctx = this._ctx;
    if (offset <= 0)
      return this;
    ctx.offset += offset;
    if (isPlainKeyRange(ctx)) {
      addReplayFilter(ctx, function() {
        var offsetLeft = offset;
        return function(cursor, advance) {
          if (offsetLeft === 0)
            return true;
          if (offsetLeft === 1) {
            --offsetLeft;
            return false;
          }
          advance(function() {
            cursor.advance(offsetLeft);
            offsetLeft = 0;
          });
          return false;
        };
      });
    } else {
      addReplayFilter(ctx, function() {
        var offsetLeft = offset;
        return function() {
          return --offsetLeft < 0;
        };
      });
    }
    return this;
  };
  Collection2.prototype.limit = function(numRows) {
    this._ctx.limit = Math.min(this._ctx.limit, numRows);
    addReplayFilter(this._ctx, function() {
      var rowsLeft = numRows;
      return function(cursor, advance, resolve) {
        if (--rowsLeft <= 0)
          advance(resolve);
        return rowsLeft >= 0;
      };
    }, true);
    return this;
  };
  Collection2.prototype.until = function(filterFunction, bIncludeStopEntry) {
    addFilter(this._ctx, function(cursor, advance, resolve) {
      if (filterFunction(cursor.value)) {
        advance(resolve);
        return bIncludeStopEntry;
      } else {
        return true;
      }
    });
    return this;
  };
  Collection2.prototype.first = function(cb) {
    return this.limit(1).toArray(function(a) {
      return a[0];
    }).then(cb);
  };
  Collection2.prototype.last = function(cb) {
    return this.reverse().first(cb);
  };
  Collection2.prototype.filter = function(filterFunction) {
    addFilter(this._ctx, function(cursor) {
      return filterFunction(cursor.value);
    });
    addMatchFilter(this._ctx, filterFunction);
    return this;
  };
  Collection2.prototype.and = function(filter) {
    return this.filter(filter);
  };
  Collection2.prototype.or = function(indexName) {
    return new this.db.WhereClause(this._ctx.table, indexName, this);
  };
  Collection2.prototype.reverse = function() {
    this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
    if (this._ondirectionchange)
      this._ondirectionchange(this._ctx.dir);
    return this;
  };
  Collection2.prototype.desc = function() {
    return this.reverse();
  };
  Collection2.prototype.eachKey = function(cb) {
    var ctx = this._ctx;
    ctx.keysOnly = !ctx.isMatch;
    return this.each(function(val, cursor) {
      cb(cursor.key, cursor);
    });
  };
  Collection2.prototype.eachUniqueKey = function(cb) {
    this._ctx.unique = "unique";
    return this.eachKey(cb);
  };
  Collection2.prototype.eachPrimaryKey = function(cb) {
    var ctx = this._ctx;
    ctx.keysOnly = !ctx.isMatch;
    return this.each(function(val, cursor) {
      cb(cursor.primaryKey, cursor);
    });
  };
  Collection2.prototype.keys = function(cb) {
    var ctx = this._ctx;
    ctx.keysOnly = !ctx.isMatch;
    var a = [];
    return this.each(function(item, cursor) {
      a.push(cursor.key);
    }).then(function() {
      return a;
    }).then(cb);
  };
  Collection2.prototype.primaryKeys = function(cb) {
    var ctx = this._ctx;
    if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
      return this._read(function(trans) {
        var index = getIndexOrStore(ctx, ctx.table.core.schema);
        return ctx.table.core.query({
          trans,
          values: false,
          limit: ctx.limit,
          query: {
            index,
            range: ctx.range
          }
        });
      }).then(function(_a2) {
        var result = _a2.result;
        return result;
      }).then(cb);
    }
    ctx.keysOnly = !ctx.isMatch;
    var a = [];
    return this.each(function(item, cursor) {
      a.push(cursor.primaryKey);
    }).then(function() {
      return a;
    }).then(cb);
  };
  Collection2.prototype.uniqueKeys = function(cb) {
    this._ctx.unique = "unique";
    return this.keys(cb);
  };
  Collection2.prototype.firstKey = function(cb) {
    return this.limit(1).keys(function(a) {
      return a[0];
    }).then(cb);
  };
  Collection2.prototype.lastKey = function(cb) {
    return this.reverse().firstKey(cb);
  };
  Collection2.prototype.distinct = function() {
    var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
    if (!idx || !idx.multi)
      return this;
    var set = {};
    addFilter(this._ctx, function(cursor) {
      var strKey = cursor.primaryKey.toString();
      var found = hasOwn(set, strKey);
      set[strKey] = true;
      return !found;
    });
    return this;
  };
  Collection2.prototype.modify = function(changes) {
    var _this = this;
    var ctx = this._ctx;
    return this._write(function(trans) {
      var modifyer;
      if (typeof changes === "function") {
        modifyer = changes;
      } else {
        var keyPaths = keys(changes);
        var numKeys = keyPaths.length;
        modifyer = function(item) {
          var anythingModified = false;
          for (var i = 0; i < numKeys; ++i) {
            var keyPath = keyPaths[i], val = changes[keyPath];
            if (getByKeyPath(item, keyPath) !== val) {
              setByKeyPath(item, keyPath, val);
              anythingModified = true;
            }
          }
          return anythingModified;
        };
      }
      var coreTable = ctx.table.core;
      var _a2 = coreTable.schema.primaryKey, outbound = _a2.outbound, extractKey = _a2.extractKey;
      var limit = _this.db._options.modifyChunkSize || 200;
      var totalFailures = [];
      var successCount = 0;
      var failedKeys = [];
      var applyMutateResult = function(expectedCount, res) {
        var failures = res.failures, numFailures = res.numFailures;
        successCount += expectedCount - numFailures;
        for (var _i = 0, _a3 = keys(failures); _i < _a3.length; _i++) {
          var pos = _a3[_i];
          totalFailures.push(failures[pos]);
        }
      };
      return _this.clone().primaryKeys().then(function(keys3) {
        var nextChunk = function(offset) {
          var count = Math.min(limit, keys3.length - offset);
          return coreTable.getMany({
            trans,
            keys: keys3.slice(offset, offset + count),
            cache: "immutable"
          }).then(function(values2) {
            var addValues = [];
            var putValues = [];
            var putKeys = outbound ? [] : null;
            var deleteKeys = [];
            for (var i = 0; i < count; ++i) {
              var origValue = values2[i];
              var ctx_1 = {
                value: deepClone(origValue),
                primKey: keys3[offset + i]
              };
              if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                if (ctx_1.value == null) {
                  deleteKeys.push(keys3[offset + i]);
                } else if (!outbound && cmp(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                  deleteKeys.push(keys3[offset + i]);
                  addValues.push(ctx_1.value);
                } else {
                  putValues.push(ctx_1.value);
                  if (outbound)
                    putKeys.push(keys3[offset + i]);
                }
              }
            }
            var criteria = isPlainKeyRange(ctx) && ctx.limit === Infinity && (typeof changes !== "function" || changes === deleteCallback) && {
              index: ctx.index,
              range: ctx.range
            };
            return Promise.resolve(addValues.length > 0 && coreTable.mutate({ trans, type: "add", values: addValues }).then(function(res) {
              for (var pos in res.failures) {
                deleteKeys.splice(parseInt(pos), 1);
              }
              applyMutateResult(addValues.length, res);
            })).then(function() {
              return (putValues.length > 0 || criteria && typeof changes === "object") && coreTable.mutate({
                trans,
                type: "put",
                keys: putKeys,
                values: putValues,
                criteria,
                changeSpec: typeof changes !== "function" && changes
              }).then(function(res) {
                return applyMutateResult(putValues.length, res);
              });
            }).then(function() {
              return (deleteKeys.length > 0 || criteria && changes === deleteCallback) && coreTable.mutate({
                trans,
                type: "delete",
                keys: deleteKeys,
                criteria
              }).then(function(res) {
                return applyMutateResult(deleteKeys.length, res);
              });
            }).then(function() {
              return keys3.length > offset + count && nextChunk(offset + limit);
            });
          });
        };
        return nextChunk(0).then(function() {
          if (totalFailures.length > 0)
            throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
          return keys3.length;
        });
      });
    });
  };
  Collection2.prototype.delete = function() {
    var ctx = this._ctx, range = ctx.range;
    if (isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || range.type === 3)) {
      return this._write(function(trans) {
        var primaryKey = ctx.table.core.schema.primaryKey;
        var coreRange = range;
        return ctx.table.core.count({ trans, query: { index: primaryKey, range: coreRange } }).then(function(count) {
          return ctx.table.core.mutate({ trans, type: "deleteRange", range: coreRange }).then(function(_a2) {
            var failures = _a2.failures;
            _a2.lastResult;
            _a2.results;
            var numFailures = _a2.numFailures;
            if (numFailures)
              throw new ModifyError("Could not delete some values", Object.keys(failures).map(function(pos) {
                return failures[pos];
              }), count - numFailures);
            return count - numFailures;
          });
        });
      });
    }
    return this.modify(deleteCallback);
  };
  return Collection2;
}();
var deleteCallback = function(value, ctx) {
  return ctx.value = null;
};
function createCollectionConstructor(db) {
  return makeClassConstructor(Collection.prototype, function Collection2(whereClause, keyRangeGenerator) {
    this.db = db;
    var keyRange = AnyRange, error = null;
    if (keyRangeGenerator)
      try {
        keyRange = keyRangeGenerator();
      } catch (ex) {
        error = ex;
      }
    var whereCtx = whereClause._ctx;
    var table = whereCtx.table;
    var readingHook = table.hook.reading.fire;
    this._ctx = {
      table,
      index: whereCtx.index,
      isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
      range: keyRange,
      keysOnly: false,
      dir: "next",
      unique: "",
      algorithm: null,
      filter: null,
      replayFilter: null,
      justLimit: true,
      isMatch: null,
      offset: 0,
      limit: Infinity,
      error,
      or: whereCtx.or,
      valueMapper: readingHook !== mirror ? readingHook : null
    };
  });
}
function simpleCompare(a, b) {
  return a < b ? -1 : a === b ? 0 : 1;
}
function simpleCompareReverse(a, b) {
  return a > b ? -1 : a === b ? 0 : 1;
}
function fail(collectionOrWhereClause, err, T) {
  var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause.Collection(collectionOrWhereClause) : collectionOrWhereClause;
  collection._ctx.error = T ? new T(err) : new TypeError(err);
  return collection;
}
function emptyCollection(whereClause) {
  return new whereClause.Collection(whereClause, function() {
    return rangeEqual("");
  }).limit(0);
}
function upperFactory(dir) {
  return dir === "next" ? function(s) {
    return s.toUpperCase();
  } : function(s) {
    return s.toLowerCase();
  };
}
function lowerFactory(dir) {
  return dir === "next" ? function(s) {
    return s.toLowerCase();
  } : function(s) {
    return s.toUpperCase();
  };
}
function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp2, dir) {
  var length = Math.min(key.length, lowerNeedle.length);
  var llp = -1;
  for (var i = 0; i < length; ++i) {
    var lwrKeyChar = lowerKey[i];
    if (lwrKeyChar !== lowerNeedle[i]) {
      if (cmp2(key[i], upperNeedle[i]) < 0)
        return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
      if (cmp2(key[i], lowerNeedle[i]) < 0)
        return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
      if (llp >= 0)
        return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
      return null;
    }
    if (cmp2(key[i], lwrKeyChar) < 0)
      llp = i;
  }
  if (length < lowerNeedle.length && dir === "next")
    return key + upperNeedle.substr(key.length);
  if (length < key.length && dir === "prev")
    return key.substr(0, upperNeedle.length);
  return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
}
function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
  var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
  if (!needles.every(function(s) {
    return typeof s === "string";
  })) {
    return fail(whereClause, STRING_EXPECTED);
  }
  function initDirection(dir) {
    upper = upperFactory(dir);
    lower = lowerFactory(dir);
    compare = dir === "next" ? simpleCompare : simpleCompareReverse;
    var needleBounds = needles.map(function(needle) {
      return { lower: lower(needle), upper: upper(needle) };
    }).sort(function(a, b) {
      return compare(a.lower, b.lower);
    });
    upperNeedles = needleBounds.map(function(nb) {
      return nb.upper;
    });
    lowerNeedles = needleBounds.map(function(nb) {
      return nb.lower;
    });
    direction = dir;
    nextKeySuffix = dir === "next" ? "" : suffix;
  }
  initDirection("next");
  var c = new whereClause.Collection(whereClause, function() {
    return createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
  });
  c._ondirectionchange = function(direction2) {
    initDirection(direction2);
  };
  var firstPossibleNeedle = 0;
  c._addAlgorithm(function(cursor, advance, resolve) {
    var key = cursor.key;
    if (typeof key !== "string")
      return false;
    var lowerKey = lower(key);
    if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
      return true;
    } else {
      var lowestPossibleCasing = null;
      for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
        var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
        if (casing === null && lowestPossibleCasing === null)
          firstPossibleNeedle = i + 1;
        else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
          lowestPossibleCasing = casing;
        }
      }
      if (lowestPossibleCasing !== null) {
        advance(function() {
          cursor.continue(lowestPossibleCasing + nextKeySuffix);
        });
      } else {
        advance(resolve);
      }
      return false;
    }
  });
  return c;
}
function createRange(lower, upper, lowerOpen, upperOpen) {
  return {
    type: 2,
    lower,
    upper,
    lowerOpen,
    upperOpen
  };
}
function rangeEqual(value) {
  return {
    type: 1,
    lower: value,
    upper: value
  };
}
var WhereClause = function() {
  function WhereClause2() {
  }
  Object.defineProperty(WhereClause2.prototype, "Collection", {
    get: function() {
      return this._ctx.table.db.Collection;
    },
    enumerable: false,
    configurable: true
  });
  WhereClause2.prototype.between = function(lower, upper, includeLower, includeUpper) {
    includeLower = includeLower !== false;
    includeUpper = includeUpper === true;
    try {
      if (this._cmp(lower, upper) > 0 || this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper))
        return emptyCollection(this);
      return new this.Collection(this, function() {
        return createRange(lower, upper, !includeLower, !includeUpper);
      });
    } catch (e) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
  };
  WhereClause2.prototype.equals = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return rangeEqual(value);
    });
  };
  WhereClause2.prototype.above = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(value, void 0, true);
    });
  };
  WhereClause2.prototype.aboveOrEqual = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(value, void 0, false);
    });
  };
  WhereClause2.prototype.below = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(void 0, value, false, true);
    });
  };
  WhereClause2.prototype.belowOrEqual = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(void 0, value);
    });
  };
  WhereClause2.prototype.startsWith = function(str) {
    if (typeof str !== "string")
      return fail(this, STRING_EXPECTED);
    return this.between(str, str + maxString, true, true);
  };
  WhereClause2.prototype.startsWithIgnoreCase = function(str) {
    if (str === "")
      return this.startsWith(str);
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return x.indexOf(a[0]) === 0;
    }, [str], maxString);
  };
  WhereClause2.prototype.equalsIgnoreCase = function(str) {
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return x === a[0];
    }, [str], "");
  };
  WhereClause2.prototype.anyOfIgnoreCase = function() {
    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (set.length === 0)
      return emptyCollection(this);
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return a.indexOf(x) !== -1;
    }, set, "");
  };
  WhereClause2.prototype.startsWithAnyOfIgnoreCase = function() {
    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (set.length === 0)
      return emptyCollection(this);
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return a.some(function(n) {
        return x.indexOf(n) === 0;
      });
    }, set, maxString);
  };
  WhereClause2.prototype.anyOf = function() {
    var _this = this;
    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    var compare = this._cmp;
    try {
      set.sort(compare);
    } catch (e) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
    if (set.length === 0)
      return emptyCollection(this);
    var c = new this.Collection(this, function() {
      return createRange(set[0], set[set.length - 1]);
    });
    c._ondirectionchange = function(direction) {
      compare = direction === "next" ? _this._ascending : _this._descending;
      set.sort(compare);
    };
    var i = 0;
    c._addAlgorithm(function(cursor, advance, resolve) {
      var key = cursor.key;
      while (compare(key, set[i]) > 0) {
        ++i;
        if (i === set.length) {
          advance(resolve);
          return false;
        }
      }
      if (compare(key, set[i]) === 0) {
        return true;
      } else {
        advance(function() {
          cursor.continue(set[i]);
        });
        return false;
      }
    });
    return c;
  };
  WhereClause2.prototype.notEqual = function(value) {
    return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });
  };
  WhereClause2.prototype.noneOf = function() {
    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (set.length === 0)
      return new this.Collection(this);
    try {
      set.sort(this._ascending);
    } catch (e) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
    var ranges = set.reduce(function(res, val) {
      return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]];
    }, null);
    ranges.push([set[set.length - 1], this.db._maxKey]);
    return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
  };
  WhereClause2.prototype.inAnyRange = function(ranges, options) {
    var _this = this;
    var cmp2 = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
    if (ranges.length === 0)
      return emptyCollection(this);
    if (!ranges.every(function(range) {
      return range[0] !== void 0 && range[1] !== void 0 && ascending(range[0], range[1]) <= 0;
    })) {
      return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
    }
    var includeLowers = !options || options.includeLowers !== false;
    var includeUppers = options && options.includeUppers === true;
    function addRange2(ranges2, newRange) {
      var i = 0, l = ranges2.length;
      for (; i < l; ++i) {
        var range = ranges2[i];
        if (cmp2(newRange[0], range[1]) < 0 && cmp2(newRange[1], range[0]) > 0) {
          range[0] = min(range[0], newRange[0]);
          range[1] = max(range[1], newRange[1]);
          break;
        }
      }
      if (i === l)
        ranges2.push(newRange);
      return ranges2;
    }
    var sortDirection = ascending;
    function rangeSorter(a, b) {
      return sortDirection(a[0], b[0]);
    }
    var set;
    try {
      set = ranges.reduce(addRange2, []);
      set.sort(rangeSorter);
    } catch (ex) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
    var rangePos = 0;
    var keyIsBeyondCurrentEntry = includeUppers ? function(key) {
      return ascending(key, set[rangePos][1]) > 0;
    } : function(key) {
      return ascending(key, set[rangePos][1]) >= 0;
    };
    var keyIsBeforeCurrentEntry = includeLowers ? function(key) {
      return descending(key, set[rangePos][0]) > 0;
    } : function(key) {
      return descending(key, set[rangePos][0]) >= 0;
    };
    function keyWithinCurrentRange(key) {
      return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
    }
    var checkKey = keyIsBeyondCurrentEntry;
    var c = new this.Collection(this, function() {
      return createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
    });
    c._ondirectionchange = function(direction) {
      if (direction === "next") {
        checkKey = keyIsBeyondCurrentEntry;
        sortDirection = ascending;
      } else {
        checkKey = keyIsBeforeCurrentEntry;
        sortDirection = descending;
      }
      set.sort(rangeSorter);
    };
    c._addAlgorithm(function(cursor, advance, resolve) {
      var key = cursor.key;
      while (checkKey(key)) {
        ++rangePos;
        if (rangePos === set.length) {
          advance(resolve);
          return false;
        }
      }
      if (keyWithinCurrentRange(key)) {
        return true;
      } else if (_this._cmp(key, set[rangePos][1]) === 0 || _this._cmp(key, set[rangePos][0]) === 0) {
        return false;
      } else {
        advance(function() {
          if (sortDirection === ascending)
            cursor.continue(set[rangePos][0]);
          else
            cursor.continue(set[rangePos][1]);
        });
        return false;
      }
    });
    return c;
  };
  WhereClause2.prototype.startsWithAnyOf = function() {
    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (!set.every(function(s) {
      return typeof s === "string";
    })) {
      return fail(this, "startsWithAnyOf() only works with strings");
    }
    if (set.length === 0)
      return emptyCollection(this);
    return this.inAnyRange(set.map(function(str) {
      return [str, str + maxString];
    }));
  };
  return WhereClause2;
}();
function createWhereClauseConstructor(db) {
  return makeClassConstructor(WhereClause.prototype, function WhereClause2(table, index, orCollection) {
    this.db = db;
    this._ctx = {
      table,
      index: index === ":id" ? null : index,
      or: orCollection
    };
    var indexedDB3 = db._deps.indexedDB;
    if (!indexedDB3)
      throw new exceptions.MissingAPI();
    this._cmp = this._ascending = indexedDB3.cmp.bind(indexedDB3);
    this._descending = function(a, b) {
      return indexedDB3.cmp(b, a);
    };
    this._max = function(a, b) {
      return indexedDB3.cmp(a, b) > 0 ? a : b;
    };
    this._min = function(a, b) {
      return indexedDB3.cmp(a, b) < 0 ? a : b;
    };
    this._IDBKeyRange = db._deps.IDBKeyRange;
  });
}
function eventRejectHandler(reject) {
  return wrap(function(event) {
    preventDefault(event);
    reject(event.target.error);
    return false;
  });
}
function preventDefault(event) {
  if (event.stopPropagation)
    event.stopPropagation();
  if (event.preventDefault)
    event.preventDefault();
}
var DEXIE_STORAGE_MUTATED_EVENT_NAME = "storagemutated";
var STORAGE_MUTATED_DOM_EVENT_NAME = "x-storagemutated-1";
var globalEvents = Events(null, DEXIE_STORAGE_MUTATED_EVENT_NAME);
var Transaction = function() {
  function Transaction2() {
  }
  Transaction2.prototype._lock = function() {
    assert(!PSD.global);
    ++this._reculock;
    if (this._reculock === 1 && !PSD.global)
      PSD.lockOwnerFor = this;
    return this;
  };
  Transaction2.prototype._unlock = function() {
    assert(!PSD.global);
    if (--this._reculock === 0) {
      if (!PSD.global)
        PSD.lockOwnerFor = null;
      while (this._blockedFuncs.length > 0 && !this._locked()) {
        var fnAndPSD = this._blockedFuncs.shift();
        try {
          usePSD(fnAndPSD[1], fnAndPSD[0]);
        } catch (e) {
        }
      }
    }
    return this;
  };
  Transaction2.prototype._locked = function() {
    return this._reculock && PSD.lockOwnerFor !== this;
  };
  Transaction2.prototype.create = function(idbtrans) {
    var _this = this;
    if (!this.mode)
      return this;
    var idbdb = this.db.idbdb;
    var dbOpenError = this.db._state.dbOpenError;
    assert(!this.idbtrans);
    if (!idbtrans && !idbdb) {
      switch (dbOpenError && dbOpenError.name) {
        case "DatabaseClosedError":
          throw new exceptions.DatabaseClosed(dbOpenError);
        case "MissingAPIError":
          throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
        default:
          throw new exceptions.OpenFailed(dbOpenError);
      }
    }
    if (!this.active)
      throw new exceptions.TransactionInactive();
    assert(this._completion._state === null);
    idbtrans = this.idbtrans = idbtrans || (this.db.core ? this.db.core.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }) : idbdb.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }));
    idbtrans.onerror = wrap(function(ev) {
      preventDefault(ev);
      _this._reject(idbtrans.error);
    });
    idbtrans.onabort = wrap(function(ev) {
      preventDefault(ev);
      _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
      _this.active = false;
      _this.on("abort").fire(ev);
    });
    idbtrans.oncomplete = wrap(function() {
      _this.active = false;
      _this._resolve();
      if ("mutatedParts" in idbtrans) {
        globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
      }
    });
    return this;
  };
  Transaction2.prototype._promise = function(mode, fn, bWriteLock) {
    var _this = this;
    if (mode === "readwrite" && this.mode !== "readwrite")
      return rejection(new exceptions.ReadOnly("Transaction is readonly"));
    if (!this.active)
      return rejection(new exceptions.TransactionInactive());
    if (this._locked()) {
      return new DexiePromise(function(resolve, reject) {
        _this._blockedFuncs.push([function() {
          _this._promise(mode, fn, bWriteLock).then(resolve, reject);
        }, PSD]);
      });
    } else if (bWriteLock) {
      return newScope(function() {
        var p2 = new DexiePromise(function(resolve, reject) {
          _this._lock();
          var rv = fn(resolve, reject, _this);
          if (rv && rv.then)
            rv.then(resolve, reject);
        });
        p2.finally(function() {
          return _this._unlock();
        });
        p2._lib = true;
        return p2;
      });
    } else {
      var p = new DexiePromise(function(resolve, reject) {
        var rv = fn(resolve, reject, _this);
        if (rv && rv.then)
          rv.then(resolve, reject);
      });
      p._lib = true;
      return p;
    }
  };
  Transaction2.prototype._root = function() {
    return this.parent ? this.parent._root() : this;
  };
  Transaction2.prototype.waitFor = function(promiseLike) {
    var root = this._root();
    var promise = DexiePromise.resolve(promiseLike);
    if (root._waitingFor) {
      root._waitingFor = root._waitingFor.then(function() {
        return promise;
      });
    } else {
      root._waitingFor = promise;
      root._waitingQueue = [];
      var store = root.idbtrans.objectStore(root.storeNames[0]);
      (function spin() {
        ++root._spinCount;
        while (root._waitingQueue.length)
          root._waitingQueue.shift()();
        if (root._waitingFor)
          store.get(-Infinity).onsuccess = spin;
      })();
    }
    var currentWaitPromise = root._waitingFor;
    return new DexiePromise(function(resolve, reject) {
      promise.then(function(res) {
        return root._waitingQueue.push(wrap(resolve.bind(null, res)));
      }, function(err) {
        return root._waitingQueue.push(wrap(reject.bind(null, err)));
      }).finally(function() {
        if (root._waitingFor === currentWaitPromise) {
          root._waitingFor = null;
        }
      });
    });
  };
  Transaction2.prototype.abort = function() {
    if (this.active) {
      this.active = false;
      if (this.idbtrans)
        this.idbtrans.abort();
      this._reject(new exceptions.Abort());
    }
  };
  Transaction2.prototype.table = function(tableName) {
    var memoizedTables = this._memoizedTables || (this._memoizedTables = {});
    if (hasOwn(memoizedTables, tableName))
      return memoizedTables[tableName];
    var tableSchema = this.schema[tableName];
    if (!tableSchema) {
      throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
    }
    var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
    transactionBoundTable.core = this.db.core.table(tableName);
    memoizedTables[tableName] = transactionBoundTable;
    return transactionBoundTable;
  };
  return Transaction2;
}();
function createTransactionConstructor(db) {
  return makeClassConstructor(Transaction.prototype, function Transaction2(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
    var _this = this;
    this.db = db;
    this.mode = mode;
    this.storeNames = storeNames;
    this.schema = dbschema;
    this.chromeTransactionDurability = chromeTransactionDurability;
    this.idbtrans = null;
    this.on = Events(this, "complete", "error", "abort");
    this.parent = parent || null;
    this.active = true;
    this._reculock = 0;
    this._blockedFuncs = [];
    this._resolve = null;
    this._reject = null;
    this._waitingFor = null;
    this._waitingQueue = null;
    this._spinCount = 0;
    this._completion = new DexiePromise(function(resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
    this._completion.then(function() {
      _this.active = false;
      _this.on.complete.fire();
    }, function(e) {
      var wasActive = _this.active;
      _this.active = false;
      _this.on.error.fire(e);
      _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
      return rejection(e);
    });
  });
}
function createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {
  return {
    name,
    keyPath,
    unique,
    multi,
    auto,
    compound,
    src: (unique && !isPrimKey ? "&" : "") + (multi ? "*" : "") + (auto ? "++" : "") + nameFromKeyPath(keyPath)
  };
}
function nameFromKeyPath(keyPath) {
  return typeof keyPath === "string" ? keyPath : keyPath ? "[" + [].join.call(keyPath, "+") + "]" : "";
}
function createTableSchema(name, primKey, indexes) {
  return {
    name,
    primKey,
    indexes,
    mappedClass: null,
    idxByName: arrayToObject(indexes, function(index) {
      return [index.name, index];
    })
  };
}
function safariMultiStoreFix(storeNames) {
  return storeNames.length === 1 ? storeNames[0] : storeNames;
}
var getMaxKey = function(IdbKeyRange) {
  try {
    IdbKeyRange.only([[]]);
    getMaxKey = function() {
      return [[]];
    };
    return [[]];
  } catch (e) {
    getMaxKey = function() {
      return maxString;
    };
    return maxString;
  }
};
function getKeyExtractor(keyPath) {
  if (keyPath == null) {
    return function() {
      return void 0;
    };
  } else if (typeof keyPath === "string") {
    return getSinglePathKeyExtractor(keyPath);
  } else {
    return function(obj) {
      return getByKeyPath(obj, keyPath);
    };
  }
}
function getSinglePathKeyExtractor(keyPath) {
  var split = keyPath.split(".");
  if (split.length === 1) {
    return function(obj) {
      return obj[keyPath];
    };
  } else {
    return function(obj) {
      return getByKeyPath(obj, keyPath);
    };
  }
}
function arrayify(arrayLike) {
  return [].slice.call(arrayLike);
}
var _id_counter = 0;
function getKeyPathAlias(keyPath) {
  return keyPath == null ? ":id" : typeof keyPath === "string" ? keyPath : "[" + keyPath.join("+") + "]";
}
function createDBCore(db, IdbKeyRange, tmpTrans) {
  function extractSchema(db2, trans) {
    var tables2 = arrayify(db2.objectStoreNames);
    return {
      schema: {
        name: db2.name,
        tables: tables2.map(function(table) {
          return trans.objectStore(table);
        }).map(function(store) {
          var keyPath = store.keyPath, autoIncrement = store.autoIncrement;
          var compound = isArray(keyPath);
          var outbound = keyPath == null;
          var indexByKeyPath = {};
          var result = {
            name: store.name,
            primaryKey: {
              name: null,
              isPrimaryKey: true,
              outbound,
              compound,
              keyPath,
              autoIncrement,
              unique: true,
              extractKey: getKeyExtractor(keyPath)
            },
            indexes: arrayify(store.indexNames).map(function(indexName) {
              return store.index(indexName);
            }).map(function(index) {
              var name = index.name, unique = index.unique, multiEntry = index.multiEntry, keyPath2 = index.keyPath;
              var compound2 = isArray(keyPath2);
              var result2 = {
                name,
                compound: compound2,
                keyPath: keyPath2,
                unique,
                multiEntry,
                extractKey: getKeyExtractor(keyPath2)
              };
              indexByKeyPath[getKeyPathAlias(keyPath2)] = result2;
              return result2;
            }),
            getIndexByKeyPath: function(keyPath2) {
              return indexByKeyPath[getKeyPathAlias(keyPath2)];
            }
          };
          indexByKeyPath[":id"] = result.primaryKey;
          if (keyPath != null) {
            indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
          }
          return result;
        })
      },
      hasGetAll: tables2.length > 0 && "getAll" in trans.objectStore(tables2[0]) && !(typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
    };
  }
  function makeIDBKeyRange(range) {
    if (range.type === 3)
      return null;
    if (range.type === 4)
      throw new Error("Cannot convert never type to IDBKeyRange");
    var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
    var idbRange = lower === void 0 ? upper === void 0 ? null : IdbKeyRange.upperBound(upper, !!upperOpen) : upper === void 0 ? IdbKeyRange.lowerBound(lower, !!lowerOpen) : IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
    return idbRange;
  }
  function createDbCoreTable(tableSchema) {
    var tableName = tableSchema.name;
    function mutate(_a3) {
      var trans = _a3.trans, type2 = _a3.type, keys3 = _a3.keys, values2 = _a3.values, range = _a3.range;
      return new Promise(function(resolve, reject) {
        resolve = wrap(resolve);
        var store = trans.objectStore(tableName);
        var outbound = store.keyPath == null;
        var isAddOrPut = type2 === "put" || type2 === "add";
        if (!isAddOrPut && type2 !== "delete" && type2 !== "deleteRange")
          throw new Error("Invalid operation type: " + type2);
        var length = (keys3 || values2 || { length: 1 }).length;
        if (keys3 && values2 && keys3.length !== values2.length) {
          throw new Error("Given keys array must have same length as given values array.");
        }
        if (length === 0)
          return resolve({ numFailures: 0, failures: {}, results: [], lastResult: void 0 });
        var req;
        var reqs = [];
        var failures = [];
        var numFailures = 0;
        var errorHandler = function(event) {
          ++numFailures;
          preventDefault(event);
        };
        if (type2 === "deleteRange") {
          if (range.type === 4)
            return resolve({ numFailures, failures, results: [], lastResult: void 0 });
          if (range.type === 3)
            reqs.push(req = store.clear());
          else
            reqs.push(req = store.delete(makeIDBKeyRange(range)));
        } else {
          var _a4 = isAddOrPut ? outbound ? [values2, keys3] : [values2, null] : [keys3, null], args1 = _a4[0], args2 = _a4[1];
          if (isAddOrPut) {
            for (var i = 0; i < length; ++i) {
              reqs.push(req = args2 && args2[i] !== void 0 ? store[type2](args1[i], args2[i]) : store[type2](args1[i]));
              req.onerror = errorHandler;
            }
          } else {
            for (var i = 0; i < length; ++i) {
              reqs.push(req = store[type2](args1[i]));
              req.onerror = errorHandler;
            }
          }
        }
        var done = function(event) {
          var lastResult = event.target.result;
          reqs.forEach(function(req2, i2) {
            return req2.error != null && (failures[i2] = req2.error);
          });
          resolve({
            numFailures,
            failures,
            results: type2 === "delete" ? keys3 : reqs.map(function(req2) {
              return req2.result;
            }),
            lastResult
          });
        };
        req.onerror = function(event) {
          errorHandler(event);
          done(event);
        };
        req.onsuccess = done;
      });
    }
    function openCursor2(_a3) {
      var trans = _a3.trans, values2 = _a3.values, query2 = _a3.query, reverse = _a3.reverse, unique = _a3.unique;
      return new Promise(function(resolve, reject) {
        resolve = wrap(resolve);
        var index = query2.index, range = query2.range;
        var store = trans.objectStore(tableName);
        var source = index.isPrimaryKey ? store : store.index(index.name);
        var direction = reverse ? unique ? "prevunique" : "prev" : unique ? "nextunique" : "next";
        var req = values2 || !("openKeyCursor" in source) ? source.openCursor(makeIDBKeyRange(range), direction) : source.openKeyCursor(makeIDBKeyRange(range), direction);
        req.onerror = eventRejectHandler(reject);
        req.onsuccess = wrap(function(ev) {
          var cursor = req.result;
          if (!cursor) {
            resolve(null);
            return;
          }
          cursor.___id = ++_id_counter;
          cursor.done = false;
          var _cursorContinue = cursor.continue.bind(cursor);
          var _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
          if (_cursorContinuePrimaryKey)
            _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
          var _cursorAdvance = cursor.advance.bind(cursor);
          var doThrowCursorIsNotStarted = function() {
            throw new Error("Cursor not started");
          };
          var doThrowCursorIsStopped = function() {
            throw new Error("Cursor not stopped");
          };
          cursor.trans = trans;
          cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
          cursor.fail = wrap(reject);
          cursor.next = function() {
            var _this = this;
            var gotOne = 1;
            return this.start(function() {
              return gotOne-- ? _this.continue() : _this.stop();
            }).then(function() {
              return _this;
            });
          };
          cursor.start = function(callback) {
            var iterationPromise = new Promise(function(resolveIteration, rejectIteration) {
              resolveIteration = wrap(resolveIteration);
              req.onerror = eventRejectHandler(rejectIteration);
              cursor.fail = rejectIteration;
              cursor.stop = function(value) {
                cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                resolveIteration(value);
              };
            });
            var guardedCallback = function() {
              if (req.result) {
                try {
                  callback();
                } catch (err) {
                  cursor.fail(err);
                }
              } else {
                cursor.done = true;
                cursor.start = function() {
                  throw new Error("Cursor behind last entry");
                };
                cursor.stop();
              }
            };
            req.onsuccess = wrap(function(ev2) {
              req.onsuccess = guardedCallback;
              guardedCallback();
            });
            cursor.continue = _cursorContinue;
            cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
            cursor.advance = _cursorAdvance;
            guardedCallback();
            return iterationPromise;
          };
          resolve(cursor);
        }, reject);
      });
    }
    function query(hasGetAll2) {
      return function(request2) {
        return new Promise(function(resolve, reject) {
          resolve = wrap(resolve);
          var trans = request2.trans, values2 = request2.values, limit = request2.limit, query2 = request2.query;
          var nonInfinitLimit = limit === Infinity ? void 0 : limit;
          var index = query2.index, range = query2.range;
          var store = trans.objectStore(tableName);
          var source = index.isPrimaryKey ? store : store.index(index.name);
          var idbKeyRange = makeIDBKeyRange(range);
          if (limit === 0)
            return resolve({ result: [] });
          if (hasGetAll2) {
            var req = values2 ? source.getAll(idbKeyRange, nonInfinitLimit) : source.getAllKeys(idbKeyRange, nonInfinitLimit);
            req.onsuccess = function(event) {
              return resolve({ result: event.target.result });
            };
            req.onerror = eventRejectHandler(reject);
          } else {
            var count_1 = 0;
            var req_1 = values2 || !("openKeyCursor" in source) ? source.openCursor(idbKeyRange) : source.openKeyCursor(idbKeyRange);
            var result_1 = [];
            req_1.onsuccess = function(event) {
              var cursor = req_1.result;
              if (!cursor)
                return resolve({ result: result_1 });
              result_1.push(values2 ? cursor.value : cursor.primaryKey);
              if (++count_1 === limit)
                return resolve({ result: result_1 });
              cursor.continue();
            };
            req_1.onerror = eventRejectHandler(reject);
          }
        });
      };
    }
    return {
      name: tableName,
      schema: tableSchema,
      mutate,
      getMany: function(_a3) {
        var trans = _a3.trans, keys3 = _a3.keys;
        return new Promise(function(resolve, reject) {
          resolve = wrap(resolve);
          var store = trans.objectStore(tableName);
          var length = keys3.length;
          var result = new Array(length);
          var keyCount = 0;
          var callbackCount = 0;
          var req;
          var successHandler = function(event) {
            var req2 = event.target;
            if ((result[req2._pos] = req2.result) != null)
              ;
            if (++callbackCount === keyCount)
              resolve(result);
          };
          var errorHandler = eventRejectHandler(reject);
          for (var i = 0; i < length; ++i) {
            var key = keys3[i];
            if (key != null) {
              req = store.get(keys3[i]);
              req._pos = i;
              req.onsuccess = successHandler;
              req.onerror = errorHandler;
              ++keyCount;
            }
          }
          if (keyCount === 0)
            resolve(result);
        });
      },
      get: function(_a3) {
        var trans = _a3.trans, key = _a3.key;
        return new Promise(function(resolve, reject) {
          resolve = wrap(resolve);
          var store = trans.objectStore(tableName);
          var req = store.get(key);
          req.onsuccess = function(event) {
            return resolve(event.target.result);
          };
          req.onerror = eventRejectHandler(reject);
        });
      },
      query: query(hasGetAll),
      openCursor: openCursor2,
      count: function(_a3) {
        var query2 = _a3.query, trans = _a3.trans;
        var index = query2.index, range = query2.range;
        return new Promise(function(resolve, reject) {
          var store = trans.objectStore(tableName);
          var source = index.isPrimaryKey ? store : store.index(index.name);
          var idbKeyRange = makeIDBKeyRange(range);
          var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
          req.onsuccess = wrap(function(ev) {
            return resolve(ev.target.result);
          });
          req.onerror = eventRejectHandler(reject);
        });
      }
    };
  }
  var _a2 = extractSchema(db, tmpTrans), schema = _a2.schema, hasGetAll = _a2.hasGetAll;
  var tables = schema.tables.map(function(tableSchema) {
    return createDbCoreTable(tableSchema);
  });
  var tableMap = {};
  tables.forEach(function(table) {
    return tableMap[table.name] = table;
  });
  return {
    stack: "dbcore",
    transaction: db.transaction.bind(db),
    table: function(name) {
      var result = tableMap[name];
      if (!result)
        throw new Error("Table '" + name + "' not found");
      return tableMap[name];
    },
    MIN_KEY: -Infinity,
    MAX_KEY: getMaxKey(IdbKeyRange),
    schema
  };
}
function createMiddlewareStack(stackImpl, middlewares) {
  return middlewares.reduce(function(down, _a2) {
    var create = _a2.create;
    return __assign(__assign({}, down), create(down));
  }, stackImpl);
}
function createMiddlewareStacks(middlewares, idbdb, _a2, tmpTrans) {
  var IDBKeyRange2 = _a2.IDBKeyRange;
  _a2.indexedDB;
  var dbcore = createMiddlewareStack(createDBCore(idbdb, IDBKeyRange2, tmpTrans), middlewares.dbcore);
  return {
    dbcore
  };
}
function generateMiddlewareStacks(_a2, tmpTrans) {
  var db = _a2._novip;
  var idbdb = tmpTrans.db;
  var stacks = createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);
  db.core = stacks.dbcore;
  db.tables.forEach(function(table) {
    var tableName = table.name;
    if (db.core.schema.tables.some(function(tbl) {
      return tbl.name === tableName;
    })) {
      table.core = db.core.table(tableName);
      if (db[tableName] instanceof db.Table) {
        db[tableName].core = table.core;
      }
    }
  });
}
function setApiOnPlace(_a2, objs, tableNames, dbschema) {
  var db = _a2._novip;
  tableNames.forEach(function(tableName) {
    var schema = dbschema[tableName];
    objs.forEach(function(obj) {
      var propDesc = getPropertyDescriptor(obj, tableName);
      if (!propDesc || "value" in propDesc && propDesc.value === void 0) {
        if (obj === db.Transaction.prototype || obj instanceof db.Transaction) {
          setProp(obj, tableName, {
            get: function() {
              return this.table(tableName);
            },
            set: function(value) {
              defineProperty(this, tableName, { value, writable: true, configurable: true, enumerable: true });
            }
          });
        } else {
          obj[tableName] = new db.Table(tableName, schema);
        }
      }
    });
  });
}
function removeTablesApi(_a2, objs) {
  var db = _a2._novip;
  objs.forEach(function(obj) {
    for (var key in obj) {
      if (obj[key] instanceof db.Table)
        delete obj[key];
    }
  });
}
function lowerVersionFirst(a, b) {
  return a._cfg.version - b._cfg.version;
}
function runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {
  var globalSchema = db._dbSchema;
  var trans = db._createTransaction("readwrite", db._storeNames, globalSchema);
  trans.create(idbUpgradeTrans);
  trans._completion.catch(reject);
  var rejectTransaction = trans._reject.bind(trans);
  var transless = PSD.transless || PSD;
  newScope(function() {
    PSD.trans = trans;
    PSD.transless = transless;
    if (oldVersion === 0) {
      keys(globalSchema).forEach(function(tableName) {
        createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
      });
      generateMiddlewareStacks(db, idbUpgradeTrans);
      DexiePromise.follow(function() {
        return db.on.populate.fire(trans);
      }).catch(rejectTransaction);
    } else
      updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
  });
}
function updateTablesAndIndexes(_a2, oldVersion, trans, idbUpgradeTrans) {
  var db = _a2._novip;
  var queue = [];
  var versions = db._versions;
  var globalSchema = db._dbSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
  var anyContentUpgraderHasRun = false;
  var versToRun = versions.filter(function(v) {
    return v._cfg.version >= oldVersion;
  });
  versToRun.forEach(function(version) {
    queue.push(function() {
      var oldSchema = globalSchema;
      var newSchema = version._cfg.dbschema;
      adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);
      adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);
      globalSchema = db._dbSchema = newSchema;
      var diff2 = getSchemaDiff(oldSchema, newSchema);
      diff2.add.forEach(function(tuple) {
        createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
      });
      diff2.change.forEach(function(change) {
        if (change.recreate) {
          throw new exceptions.Upgrade("Not yet support for changing primary key");
        } else {
          var store_1 = idbUpgradeTrans.objectStore(change.name);
          change.add.forEach(function(idx) {
            return addIndex(store_1, idx);
          });
          change.change.forEach(function(idx) {
            store_1.deleteIndex(idx.name);
            addIndex(store_1, idx);
          });
          change.del.forEach(function(idxName) {
            return store_1.deleteIndex(idxName);
          });
        }
      });
      var contentUpgrade = version._cfg.contentUpgrade;
      if (contentUpgrade && version._cfg.version > oldVersion) {
        generateMiddlewareStacks(db, idbUpgradeTrans);
        trans._memoizedTables = {};
        anyContentUpgraderHasRun = true;
        var upgradeSchema_1 = shallowClone(newSchema);
        diff2.del.forEach(function(table) {
          upgradeSchema_1[table] = oldSchema[table];
        });
        removeTablesApi(db, [db.Transaction.prototype]);
        setApiOnPlace(db, [db.Transaction.prototype], keys(upgradeSchema_1), upgradeSchema_1);
        trans.schema = upgradeSchema_1;
        var contentUpgradeIsAsync_1 = isAsyncFunction(contentUpgrade);
        if (contentUpgradeIsAsync_1) {
          incrementExpectedAwaits();
        }
        var returnValue_1;
        var promiseFollowed = DexiePromise.follow(function() {
          returnValue_1 = contentUpgrade(trans);
          if (returnValue_1) {
            if (contentUpgradeIsAsync_1) {
              var decrementor = decrementExpectedAwaits.bind(null, null);
              returnValue_1.then(decrementor, decrementor);
            }
          }
        });
        return returnValue_1 && typeof returnValue_1.then === "function" ? DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function() {
          return returnValue_1;
        });
      }
    });
    queue.push(function(idbtrans) {
      if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
        var newSchema = version._cfg.dbschema;
        deleteRemovedTables(newSchema, idbtrans);
      }
      removeTablesApi(db, [db.Transaction.prototype]);
      setApiOnPlace(db, [db.Transaction.prototype], db._storeNames, db._dbSchema);
      trans.schema = db._dbSchema;
    });
  });
  function runQueue() {
    return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : DexiePromise.resolve();
  }
  return runQueue().then(function() {
    createMissingTables(globalSchema, idbUpgradeTrans);
  });
}
function getSchemaDiff(oldSchema, newSchema) {
  var diff2 = {
    del: [],
    add: [],
    change: []
  };
  var table;
  for (table in oldSchema) {
    if (!newSchema[table])
      diff2.del.push(table);
  }
  for (table in newSchema) {
    var oldDef = oldSchema[table], newDef = newSchema[table];
    if (!oldDef) {
      diff2.add.push([table, newDef]);
    } else {
      var change = {
        name: table,
        def: newDef,
        recreate: false,
        del: [],
        add: [],
        change: []
      };
      if ("" + (oldDef.primKey.keyPath || "") !== "" + (newDef.primKey.keyPath || "") || oldDef.primKey.auto !== newDef.primKey.auto && !isIEOrEdge) {
        change.recreate = true;
        diff2.change.push(change);
      } else {
        var oldIndexes = oldDef.idxByName;
        var newIndexes = newDef.idxByName;
        var idxName = void 0;
        for (idxName in oldIndexes) {
          if (!newIndexes[idxName])
            change.del.push(idxName);
        }
        for (idxName in newIndexes) {
          var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
          if (!oldIdx)
            change.add.push(newIdx);
          else if (oldIdx.src !== newIdx.src)
            change.change.push(newIdx);
        }
        if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
          diff2.change.push(change);
        }
      }
    }
  }
  return diff2;
}
function createTable(idbtrans, tableName, primKey, indexes) {
  var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
  indexes.forEach(function(idx) {
    return addIndex(store, idx);
  });
  return store;
}
function createMissingTables(newSchema, idbtrans) {
  keys(newSchema).forEach(function(tableName) {
    if (!idbtrans.db.objectStoreNames.contains(tableName)) {
      createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
    }
  });
}
function deleteRemovedTables(newSchema, idbtrans) {
  [].slice.call(idbtrans.db.objectStoreNames).forEach(function(storeName) {
    return newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName);
  });
}
function addIndex(store, idx) {
  store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
}
function buildGlobalSchema(db, idbdb, tmpTrans) {
  var globalSchema = {};
  var dbStoreNames = slice(idbdb.objectStoreNames, 0);
  dbStoreNames.forEach(function(storeName) {
    var store = tmpTrans.objectStore(storeName);
    var keyPath = store.keyPath;
    var primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
    var indexes = [];
    for (var j = 0; j < store.indexNames.length; ++j) {
      var idbindex = store.index(store.indexNames[j]);
      keyPath = idbindex.keyPath;
      var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
      indexes.push(index);
    }
    globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
  });
  return globalSchema;
}
function readGlobalSchema(_a2, idbdb, tmpTrans) {
  var db = _a2._novip;
  db.verno = idbdb.version / 10;
  var globalSchema = db._dbSchema = buildGlobalSchema(db, idbdb, tmpTrans);
  db._storeNames = slice(idbdb.objectStoreNames, 0);
  setApiOnPlace(db, [db._allTables], keys(globalSchema), globalSchema);
}
function verifyInstalledSchema(db, tmpTrans) {
  var installedSchema = buildGlobalSchema(db, db.idbdb, tmpTrans);
  var diff2 = getSchemaDiff(installedSchema, db._dbSchema);
  return !(diff2.add.length || diff2.change.some(function(ch) {
    return ch.add.length || ch.change.length;
  }));
}
function adjustToExistingIndexNames(_a2, schema, idbtrans) {
  var db = _a2._novip;
  var storeNames = idbtrans.db.objectStoreNames;
  for (var i = 0; i < storeNames.length; ++i) {
    var storeName = storeNames[i];
    var store = idbtrans.objectStore(storeName);
    db._hasGetAll = "getAll" in store;
    for (var j = 0; j < store.indexNames.length; ++j) {
      var indexName = store.indexNames[j];
      var keyPath = store.index(indexName).keyPath;
      var dexieName = typeof keyPath === "string" ? keyPath : "[" + slice(keyPath).join("+") + "]";
      if (schema[storeName]) {
        var indexSpec = schema[storeName].idxByName[dexieName];
        if (indexSpec) {
          indexSpec.name = indexName;
          delete schema[storeName].idxByName[dexieName];
          schema[storeName].idxByName[indexName] = indexSpec;
        }
      }
    }
  }
  if (typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
    db._hasGetAll = false;
  }
}
function parseIndexSyntax(primKeyAndIndexes) {
  return primKeyAndIndexes.split(",").map(function(index, indexNum) {
    index = index.trim();
    var name = index.replace(/([&*]|\+\+)/g, "");
    var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split("+") : name;
    return createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), indexNum === 0);
  });
}
var Version = function() {
  function Version2() {
  }
  Version2.prototype._parseStoresSpec = function(stores, outSchema) {
    keys(stores).forEach(function(tableName) {
      if (stores[tableName] !== null) {
        var indexes = parseIndexSyntax(stores[tableName]);
        var primKey = indexes.shift();
        if (primKey.multi)
          throw new exceptions.Schema("Primary key cannot be multi-valued");
        indexes.forEach(function(idx) {
          if (idx.auto)
            throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
          if (!idx.keyPath)
            throw new exceptions.Schema("Index must have a name and cannot be an empty string");
        });
        outSchema[tableName] = createTableSchema(tableName, primKey, indexes);
      }
    });
  };
  Version2.prototype.stores = function(stores) {
    var db = this.db;
    this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
    var versions = db._versions;
    var storesSpec = {};
    var dbschema = {};
    versions.forEach(function(version) {
      extend(storesSpec, version._cfg.storesSource);
      dbschema = version._cfg.dbschema = {};
      version._parseStoresSpec(storesSpec, dbschema);
    });
    db._dbSchema = dbschema;
    removeTablesApi(db, [db._allTables, db, db.Transaction.prototype]);
    setApiOnPlace(db, [db._allTables, db, db.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
    db._storeNames = keys(dbschema);
    return this;
  };
  Version2.prototype.upgrade = function(upgradeFunction) {
    this._cfg.contentUpgrade = promisableChain(this._cfg.contentUpgrade || nop, upgradeFunction);
    return this;
  };
  return Version2;
}();
function createVersionConstructor(db) {
  return makeClassConstructor(Version.prototype, function Version2(versionNumber) {
    this.db = db;
    this._cfg = {
      version: versionNumber,
      storesSource: null,
      dbschema: {},
      tables: {},
      contentUpgrade: null
    };
  });
}
function getDbNamesTable(indexedDB3, IDBKeyRange2) {
  var dbNamesDB = indexedDB3["_dbNamesDB"];
  if (!dbNamesDB) {
    dbNamesDB = indexedDB3["_dbNamesDB"] = new Dexie$1(DBNAMES_DB, {
      addons: [],
      indexedDB: indexedDB3,
      IDBKeyRange: IDBKeyRange2
    });
    dbNamesDB.version(1).stores({ dbnames: "name" });
  }
  return dbNamesDB.table("dbnames");
}
function hasDatabasesNative(indexedDB3) {
  return indexedDB3 && typeof indexedDB3.databases === "function";
}
function getDatabaseNames(_a2) {
  var indexedDB3 = _a2.indexedDB, IDBKeyRange2 = _a2.IDBKeyRange;
  return hasDatabasesNative(indexedDB3) ? Promise.resolve(indexedDB3.databases()).then(function(infos) {
    return infos.map(function(info) {
      return info.name;
    }).filter(function(name) {
      return name !== DBNAMES_DB;
    });
  }) : getDbNamesTable(indexedDB3, IDBKeyRange2).toCollection().primaryKeys();
}
function _onDatabaseCreated(_a2, name) {
  var indexedDB3 = _a2.indexedDB, IDBKeyRange2 = _a2.IDBKeyRange;
  !hasDatabasesNative(indexedDB3) && name !== DBNAMES_DB && getDbNamesTable(indexedDB3, IDBKeyRange2).put({ name }).catch(nop);
}
function _onDatabaseDeleted(_a2, name) {
  var indexedDB3 = _a2.indexedDB, IDBKeyRange2 = _a2.IDBKeyRange;
  !hasDatabasesNative(indexedDB3) && name !== DBNAMES_DB && getDbNamesTable(indexedDB3, IDBKeyRange2).delete(name).catch(nop);
}
function vip(fn) {
  return newScope(function() {
    PSD.letThrough = true;
    return fn();
  });
}
function idbReady() {
  var isSafari = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
  if (!isSafari || !indexedDB.databases)
    return Promise.resolve();
  var intervalId;
  return new Promise(function(resolve) {
    var tryIdb = function() {
      return indexedDB.databases().finally(resolve);
    };
    intervalId = setInterval(tryIdb, 100);
    tryIdb();
  }).finally(function() {
    return clearInterval(intervalId);
  });
}
function dexieOpen(db) {
  var state = db._state;
  var indexedDB3 = db._deps.indexedDB;
  if (state.isBeingOpened || db.idbdb)
    return state.dbReadyPromise.then(function() {
      return state.dbOpenError ? rejection(state.dbOpenError) : db;
    });
  debug && (state.openCanceller._stackHolder = getErrorWithStack());
  state.isBeingOpened = true;
  state.dbOpenError = null;
  state.openComplete = false;
  var openCanceller = state.openCanceller;
  function throwIfCancelled() {
    if (state.openCanceller !== openCanceller)
      throw new exceptions.DatabaseClosed("db.open() was cancelled");
  }
  var resolveDbReady = state.dbReadyResolve, upgradeTransaction = null, wasCreated = false;
  return DexiePromise.race([openCanceller, (typeof navigator === "undefined" ? DexiePromise.resolve() : idbReady()).then(function() {
    return new DexiePromise(function(resolve, reject) {
      throwIfCancelled();
      if (!indexedDB3)
        throw new exceptions.MissingAPI();
      var dbName = db.name;
      var req = state.autoSchema ? indexedDB3.open(dbName) : indexedDB3.open(dbName, Math.round(db.verno * 10));
      if (!req)
        throw new exceptions.MissingAPI();
      req.onerror = eventRejectHandler(reject);
      req.onblocked = wrap(db._fireOnBlocked);
      req.onupgradeneeded = wrap(function(e) {
        upgradeTransaction = req.transaction;
        if (state.autoSchema && !db._options.allowEmptyDB) {
          req.onerror = preventDefault;
          upgradeTransaction.abort();
          req.result.close();
          var delreq = indexedDB3.deleteDatabase(dbName);
          delreq.onsuccess = delreq.onerror = wrap(function() {
            reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
          });
        } else {
          upgradeTransaction.onerror = eventRejectHandler(reject);
          var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
          wasCreated = oldVer < 1;
          db._novip.idbdb = req.result;
          runUpgraders(db, oldVer / 10, upgradeTransaction, reject);
        }
      }, reject);
      req.onsuccess = wrap(function() {
        upgradeTransaction = null;
        var idbdb = db._novip.idbdb = req.result;
        var objectStoreNames = slice(idbdb.objectStoreNames);
        if (objectStoreNames.length > 0)
          try {
            var tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), "readonly");
            if (state.autoSchema)
              readGlobalSchema(db, idbdb, tmpTrans);
            else {
              adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);
              if (!verifyInstalledSchema(db, tmpTrans)) {
                console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.");
              }
            }
            generateMiddlewareStacks(db, tmpTrans);
          } catch (e) {
          }
        connections.push(db);
        idbdb.onversionchange = wrap(function(ev) {
          state.vcFired = true;
          db.on("versionchange").fire(ev);
        });
        idbdb.onclose = wrap(function(ev) {
          db.on("close").fire(ev);
        });
        if (wasCreated)
          _onDatabaseCreated(db._deps, dbName);
        resolve();
      }, reject);
    });
  })]).then(function() {
    throwIfCancelled();
    state.onReadyBeingFired = [];
    return DexiePromise.resolve(vip(function() {
      return db.on.ready.fire(db.vip);
    })).then(function fireRemainders() {
      if (state.onReadyBeingFired.length > 0) {
        var remainders_1 = state.onReadyBeingFired.reduce(promisableChain, nop);
        state.onReadyBeingFired = [];
        return DexiePromise.resolve(vip(function() {
          return remainders_1(db.vip);
        })).then(fireRemainders);
      }
    });
  }).finally(function() {
    state.onReadyBeingFired = null;
    state.isBeingOpened = false;
  }).then(function() {
    return db;
  }).catch(function(err) {
    state.dbOpenError = err;
    try {
      upgradeTransaction && upgradeTransaction.abort();
    } catch (_a2) {
    }
    if (openCanceller === state.openCanceller) {
      db._close();
    }
    return rejection(err);
  }).finally(function() {
    state.openComplete = true;
    resolveDbReady();
  });
}
function awaitIterator(iterator) {
  var callNext = function(result) {
    return iterator.next(result);
  }, doThrow = function(error) {
    return iterator.throw(error);
  }, onSuccess = step(callNext), onError = step(doThrow);
  function step(getNext) {
    return function(val) {
      var next = getNext(val), value = next.value;
      return next.done ? value : !value || typeof value.then !== "function" ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
    };
  }
  return step(callNext)();
}
function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
  var i = arguments.length;
  if (i < 2)
    throw new exceptions.InvalidArgument("Too few arguments");
  var args = new Array(i - 1);
  while (--i)
    args[i - 1] = arguments[i];
  scopeFunc = args.pop();
  var tables = flatten(args);
  return [mode, tables, scopeFunc];
}
function enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {
  return DexiePromise.resolve().then(function() {
    var transless = PSD.transless || PSD;
    var trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);
    var zoneProps = {
      trans,
      transless
    };
    if (parentTransaction) {
      trans.idbtrans = parentTransaction.idbtrans;
    } else {
      try {
        trans.create();
        db._state.PR1398_maxLoop = 3;
      } catch (ex) {
        if (ex.name === errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
          console.warn("Dexie: Need to reopen db");
          db._close();
          return db.open().then(function() {
            return enterTransactionScope(db, mode, storeNames, null, scopeFunc);
          });
        }
        return rejection(ex);
      }
    }
    var scopeFuncIsAsync = isAsyncFunction(scopeFunc);
    if (scopeFuncIsAsync) {
      incrementExpectedAwaits();
    }
    var returnValue;
    var promiseFollowed = DexiePromise.follow(function() {
      returnValue = scopeFunc.call(trans, trans);
      if (returnValue) {
        if (scopeFuncIsAsync) {
          var decrementor = decrementExpectedAwaits.bind(null, null);
          returnValue.then(decrementor, decrementor);
        } else if (typeof returnValue.next === "function" && typeof returnValue.throw === "function") {
          returnValue = awaitIterator(returnValue);
        }
      }
    }, zoneProps);
    return (returnValue && typeof returnValue.then === "function" ? DexiePromise.resolve(returnValue).then(function(x) {
      return trans.active ? x : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
    }) : promiseFollowed.then(function() {
      return returnValue;
    })).then(function(x) {
      if (parentTransaction)
        trans._resolve();
      return trans._completion.then(function() {
        return x;
      });
    }).catch(function(e) {
      trans._reject(e);
      return rejection(e);
    });
  });
}
function pad(a, value, count) {
  var result = isArray(a) ? a.slice() : [a];
  for (var i = 0; i < count; ++i)
    result.push(value);
  return result;
}
function createVirtualIndexMiddleware(down) {
  return __assign(__assign({}, down), { table: function(tableName) {
    var table = down.table(tableName);
    var schema = table.schema;
    var indexLookup = {};
    var allVirtualIndexes = [];
    function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
      var keyPathAlias = getKeyPathAlias(keyPath);
      var indexList = indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || [];
      var keyLength = keyPath == null ? 0 : typeof keyPath === "string" ? 1 : keyPath.length;
      var isVirtual = keyTail > 0;
      var virtualIndex = __assign(__assign({}, lowLevelIndex), { isVirtual, keyTail, keyLength, extractKey: getKeyExtractor(keyPath), unique: !isVirtual && lowLevelIndex.unique });
      indexList.push(virtualIndex);
      if (!virtualIndex.isPrimaryKey) {
        allVirtualIndexes.push(virtualIndex);
      }
      if (keyLength > 1) {
        var virtualKeyPath = keyLength === 2 ? keyPath[0] : keyPath.slice(0, keyLength - 1);
        addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
      }
      indexList.sort(function(a, b) {
        return a.keyTail - b.keyTail;
      });
      return virtualIndex;
    }
    var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
    indexLookup[":id"] = [primaryKey];
    for (var _i = 0, _a2 = schema.indexes; _i < _a2.length; _i++) {
      var index = _a2[_i];
      addVirtualIndexes(index.keyPath, 0, index);
    }
    function findBestIndex(keyPath) {
      var result2 = indexLookup[getKeyPathAlias(keyPath)];
      return result2 && result2[0];
    }
    function translateRange(range, keyTail) {
      return {
        type: range.type === 1 ? 2 : range.type,
        lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
        lowerOpen: true,
        upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
        upperOpen: true
      };
    }
    function translateRequest(req) {
      var index2 = req.query.index;
      return index2.isVirtual ? __assign(__assign({}, req), { query: {
        index: index2,
        range: translateRange(req.query.range, index2.keyTail)
      } }) : req;
    }
    var result = __assign(__assign({}, table), { schema: __assign(__assign({}, schema), { primaryKey, indexes: allVirtualIndexes, getIndexByKeyPath: findBestIndex }), count: function(req) {
      return table.count(translateRequest(req));
    }, query: function(req) {
      return table.query(translateRequest(req));
    }, openCursor: function(req) {
      var _a3 = req.query.index, keyTail = _a3.keyTail, isVirtual = _a3.isVirtual, keyLength = _a3.keyLength;
      if (!isVirtual)
        return table.openCursor(req);
      function createVirtualCursor(cursor) {
        function _continue(key) {
          key != null ? cursor.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) : req.unique ? cursor.continue(cursor.key.slice(0, keyLength).concat(req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) : cursor.continue();
        }
        var virtualCursor = Object.create(cursor, {
          continue: { value: _continue },
          continuePrimaryKey: {
            value: function(key, primaryKey2) {
              cursor.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey2);
            }
          },
          primaryKey: {
            get: function() {
              return cursor.primaryKey;
            }
          },
          key: {
            get: function() {
              var key = cursor.key;
              return keyLength === 1 ? key[0] : key.slice(0, keyLength);
            }
          },
          value: {
            get: function() {
              return cursor.value;
            }
          }
        });
        return virtualCursor;
      }
      return table.openCursor(translateRequest(req)).then(function(cursor) {
        return cursor && createVirtualCursor(cursor);
      });
    } });
    return result;
  } });
}
var virtualIndexMiddleware = {
  stack: "dbcore",
  name: "VirtualIndexMiddleware",
  level: 1,
  create: createVirtualIndexMiddleware
};
function getObjectDiff(a, b, rv, prfx) {
  rv = rv || {};
  prfx = prfx || "";
  keys(a).forEach(function(prop) {
    if (!hasOwn(b, prop)) {
      rv[prfx + prop] = void 0;
    } else {
      var ap = a[prop], bp = b[prop];
      if (typeof ap === "object" && typeof bp === "object" && ap && bp) {
        var apTypeName = toStringTag(ap);
        var bpTypeName = toStringTag(bp);
        if (apTypeName !== bpTypeName) {
          rv[prfx + prop] = b[prop];
        } else if (apTypeName === "Object") {
          getObjectDiff(ap, bp, rv, prfx + prop + ".");
        } else if (ap !== bp) {
          rv[prfx + prop] = b[prop];
        }
      } else if (ap !== bp)
        rv[prfx + prop] = b[prop];
    }
  });
  keys(b).forEach(function(prop) {
    if (!hasOwn(a, prop)) {
      rv[prfx + prop] = b[prop];
    }
  });
  return rv;
}
function getEffectiveKeys(primaryKey, req) {
  if (req.type === "delete")
    return req.keys;
  return req.keys || req.values.map(primaryKey.extractKey);
}
var hooksMiddleware = {
  stack: "dbcore",
  name: "HooksMiddleware",
  level: 2,
  create: function(downCore) {
    return __assign(__assign({}, downCore), { table: function(tableName) {
      var downTable = downCore.table(tableName);
      var primaryKey = downTable.schema.primaryKey;
      var tableMiddleware = __assign(__assign({}, downTable), { mutate: function(req) {
        var dxTrans = PSD.trans;
        var _a2 = dxTrans.table(tableName).hook, deleting = _a2.deleting, creating = _a2.creating, updating = _a2.updating;
        switch (req.type) {
          case "add":
            if (creating.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return addPutOrDelete(req);
            }, true);
          case "put":
            if (creating.fire === nop && updating.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return addPutOrDelete(req);
            }, true);
          case "delete":
            if (deleting.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return addPutOrDelete(req);
            }, true);
          case "deleteRange":
            if (deleting.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return deleteRange(req);
            }, true);
        }
        return downTable.mutate(req);
        function addPutOrDelete(req2) {
          var dxTrans2 = PSD.trans;
          var keys3 = req2.keys || getEffectiveKeys(primaryKey, req2);
          if (!keys3)
            throw new Error("Keys missing");
          req2 = req2.type === "add" || req2.type === "put" ? __assign(__assign({}, req2), { keys: keys3 }) : __assign({}, req2);
          if (req2.type !== "delete")
            req2.values = __spreadArray([], req2.values, true);
          if (req2.keys)
            req2.keys = __spreadArray([], req2.keys, true);
          return getExistingValues(downTable, req2, keys3).then(function(existingValues) {
            var contexts = keys3.map(function(key, i) {
              var existingValue = existingValues[i];
              var ctx = { onerror: null, onsuccess: null };
              if (req2.type === "delete") {
                deleting.fire.call(ctx, key, existingValue, dxTrans2);
              } else if (req2.type === "add" || existingValue === void 0) {
                var generatedPrimaryKey = creating.fire.call(ctx, key, req2.values[i], dxTrans2);
                if (key == null && generatedPrimaryKey != null) {
                  key = generatedPrimaryKey;
                  req2.keys[i] = key;
                  if (!primaryKey.outbound) {
                    setByKeyPath(req2.values[i], primaryKey.keyPath, key);
                  }
                }
              } else {
                var objectDiff = getObjectDiff(existingValue, req2.values[i]);
                var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans2);
                if (additionalChanges_1) {
                  var requestedValue_1 = req2.values[i];
                  Object.keys(additionalChanges_1).forEach(function(keyPath) {
                    if (hasOwn(requestedValue_1, keyPath)) {
                      requestedValue_1[keyPath] = additionalChanges_1[keyPath];
                    } else {
                      setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                    }
                  });
                }
              }
              return ctx;
            });
            return downTable.mutate(req2).then(function(_a3) {
              var failures = _a3.failures, results = _a3.results, numFailures = _a3.numFailures, lastResult = _a3.lastResult;
              for (var i = 0; i < keys3.length; ++i) {
                var primKey = results ? results[i] : keys3[i];
                var ctx = contexts[i];
                if (primKey == null) {
                  ctx.onerror && ctx.onerror(failures[i]);
                } else {
                  ctx.onsuccess && ctx.onsuccess(
                    req2.type === "put" && existingValues[i] ? req2.values[i] : primKey
                  );
                }
              }
              return { failures, results, numFailures, lastResult };
            }).catch(function(error) {
              contexts.forEach(function(ctx) {
                return ctx.onerror && ctx.onerror(error);
              });
              return Promise.reject(error);
            });
          });
        }
        function deleteRange(req2) {
          return deleteNextChunk(req2.trans, req2.range, 1e4);
        }
        function deleteNextChunk(trans, range, limit) {
          return downTable.query({ trans, values: false, query: { index: primaryKey, range }, limit }).then(function(_a3) {
            var result = _a3.result;
            return addPutOrDelete({ type: "delete", keys: result, trans }).then(function(res) {
              if (res.numFailures > 0)
                return Promise.reject(res.failures[0]);
              if (result.length < limit) {
                return { failures: [], numFailures: 0, lastResult: void 0 };
              } else {
                return deleteNextChunk(trans, __assign(__assign({}, range), { lower: result[result.length - 1], lowerOpen: true }), limit);
              }
            });
          });
        }
      } });
      return tableMiddleware;
    } });
  }
};
function getExistingValues(table, req, effectiveKeys) {
  return req.type === "add" ? Promise.resolve([]) : table.getMany({ trans: req.trans, keys: effectiveKeys, cache: "immutable" });
}
function getFromTransactionCache(keys3, cache2, clone) {
  try {
    if (!cache2)
      return null;
    if (cache2.keys.length < keys3.length)
      return null;
    var result = [];
    for (var i = 0, j = 0; i < cache2.keys.length && j < keys3.length; ++i) {
      if (cmp(cache2.keys[i], keys3[j]) !== 0)
        continue;
      result.push(clone ? deepClone(cache2.values[i]) : cache2.values[i]);
      ++j;
    }
    return result.length === keys3.length ? result : null;
  } catch (_a2) {
    return null;
  }
}
var cacheExistingValuesMiddleware = {
  stack: "dbcore",
  level: -1,
  create: function(core) {
    return {
      table: function(tableName) {
        var table = core.table(tableName);
        return __assign(__assign({}, table), { getMany: function(req) {
          if (!req.cache) {
            return table.getMany(req);
          }
          var cachedResult = getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
          if (cachedResult) {
            return DexiePromise.resolve(cachedResult);
          }
          return table.getMany(req).then(function(res) {
            req.trans["_cache"] = {
              keys: req.keys,
              values: req.cache === "clone" ? deepClone(res) : res
            };
            return res;
          });
        }, mutate: function(req) {
          if (req.type !== "add")
            req.trans["_cache"] = null;
          return table.mutate(req);
        } });
      }
    };
  }
};
var _a;
function isEmptyRange(node) {
  return !("from" in node);
}
var RangeSet = function(fromOrTree, to) {
  if (this) {
    extend(this, arguments.length ? { d: 1, from: fromOrTree, to: arguments.length > 1 ? to : fromOrTree } : { d: 0 });
  } else {
    var rv = new RangeSet();
    if (fromOrTree && "d" in fromOrTree) {
      extend(rv, fromOrTree);
    }
    return rv;
  }
};
props(RangeSet.prototype, (_a = {
  add: function(rangeSet) {
    mergeRanges(this, rangeSet);
    return this;
  },
  addKey: function(key) {
    addRange(this, key, key);
    return this;
  },
  addKeys: function(keys3) {
    var _this = this;
    keys3.forEach(function(key) {
      return addRange(_this, key, key);
    });
    return this;
  }
}, _a[iteratorSymbol] = function() {
  return getRangeSetIterator(this);
}, _a));
function addRange(target, from, to) {
  var diff2 = cmp(from, to);
  if (isNaN(diff2))
    return;
  if (diff2 > 0)
    throw RangeError();
  if (isEmptyRange(target))
    return extend(target, { from, to, d: 1 });
  var left = target.l;
  var right = target.r;
  if (cmp(to, target.from) < 0) {
    left ? addRange(left, from, to) : target.l = { from, to, d: 1, l: null, r: null };
    return rebalance(target);
  }
  if (cmp(from, target.to) > 0) {
    right ? addRange(right, from, to) : target.r = { from, to, d: 1, l: null, r: null };
    return rebalance(target);
  }
  if (cmp(from, target.from) < 0) {
    target.from = from;
    target.l = null;
    target.d = right ? right.d + 1 : 1;
  }
  if (cmp(to, target.to) > 0) {
    target.to = to;
    target.r = null;
    target.d = target.l ? target.l.d + 1 : 1;
  }
  var rightWasCutOff = !target.r;
  if (left && !target.l) {
    mergeRanges(target, left);
  }
  if (right && rightWasCutOff) {
    mergeRanges(target, right);
  }
}
function mergeRanges(target, newSet) {
  function _addRangeSet(target2, _a2) {
    var from = _a2.from, to = _a2.to, l = _a2.l, r = _a2.r;
    addRange(target2, from, to);
    if (l)
      _addRangeSet(target2, l);
    if (r)
      _addRangeSet(target2, r);
  }
  if (!isEmptyRange(newSet))
    _addRangeSet(target, newSet);
}
function rangesOverlap(rangeSet1, rangeSet2) {
  var i1 = getRangeSetIterator(rangeSet2);
  var nextResult1 = i1.next();
  if (nextResult1.done)
    return false;
  var a = nextResult1.value;
  var i2 = getRangeSetIterator(rangeSet1);
  var nextResult2 = i2.next(a.from);
  var b = nextResult2.value;
  while (!nextResult1.done && !nextResult2.done) {
    if (cmp(b.from, a.to) <= 0 && cmp(b.to, a.from) >= 0)
      return true;
    cmp(a.from, b.from) < 0 ? a = (nextResult1 = i1.next(b.from)).value : b = (nextResult2 = i2.next(a.from)).value;
  }
  return false;
}
function getRangeSetIterator(node) {
  var state = isEmptyRange(node) ? null : { s: 0, n: node };
  return {
    next: function(key) {
      var keyProvided = arguments.length > 0;
      while (state) {
        switch (state.s) {
          case 0:
            state.s = 1;
            if (keyProvided) {
              while (state.n.l && cmp(key, state.n.from) < 0)
                state = { up: state, n: state.n.l, s: 1 };
            } else {
              while (state.n.l)
                state = { up: state, n: state.n.l, s: 1 };
            }
          case 1:
            state.s = 2;
            if (!keyProvided || cmp(key, state.n.to) <= 0)
              return { value: state.n, done: false };
          case 2:
            if (state.n.r) {
              state.s = 3;
              state = { up: state, n: state.n.r, s: 0 };
              continue;
            }
          case 3:
            state = state.up;
        }
      }
      return { done: true };
    }
  };
}
function rebalance(target) {
  var _a2, _b;
  var diff2 = (((_a2 = target.r) === null || _a2 === void 0 ? void 0 : _a2.d) || 0) - (((_b = target.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
  var r = diff2 > 1 ? "r" : diff2 < -1 ? "l" : "";
  if (r) {
    var l = r === "r" ? "l" : "r";
    var rootClone = __assign({}, target);
    var oldRootRight = target[r];
    target.from = oldRootRight.from;
    target.to = oldRootRight.to;
    target[r] = oldRootRight[r];
    rootClone[r] = oldRootRight[l];
    target[l] = rootClone;
    rootClone.d = computeDepth(rootClone);
  }
  target.d = computeDepth(target);
}
function computeDepth(_a2) {
  var r = _a2.r, l = _a2.l;
  return (r ? l ? Math.max(r.d, l.d) : r.d : l ? l.d : 0) + 1;
}
var observabilityMiddleware = {
  stack: "dbcore",
  level: 0,
  create: function(core) {
    var dbName = core.schema.name;
    var FULL_RANGE = new RangeSet(core.MIN_KEY, core.MAX_KEY);
    return __assign(__assign({}, core), { table: function(tableName) {
      var table = core.table(tableName);
      var schema = table.schema;
      var primaryKey = schema.primaryKey;
      var extractKey = primaryKey.extractKey, outbound = primaryKey.outbound;
      var tableClone = __assign(__assign({}, table), { mutate: function(req) {
        var trans = req.trans;
        var mutatedParts = trans.mutatedParts || (trans.mutatedParts = {});
        var getRangeSet = function(indexName) {
          var part = "idb://" + dbName + "/" + tableName + "/" + indexName;
          return mutatedParts[part] || (mutatedParts[part] = new RangeSet());
        };
        var pkRangeSet = getRangeSet("");
        var delsRangeSet = getRangeSet(":dels");
        var type2 = req.type;
        var _a2 = req.type === "deleteRange" ? [req.range] : req.type === "delete" ? [req.keys] : req.values.length < 50 ? [[], req.values] : [], keys3 = _a2[0], newObjs = _a2[1];
        var oldCache = req.trans["_cache"];
        return table.mutate(req).then(function(res) {
          if (isArray(keys3)) {
            if (type2 !== "delete")
              keys3 = res.results;
            pkRangeSet.addKeys(keys3);
            var oldObjs = getFromTransactionCache(keys3, oldCache);
            if (!oldObjs && type2 !== "add") {
              delsRangeSet.addKeys(keys3);
            }
            if (oldObjs || newObjs) {
              trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
            }
          } else if (keys3) {
            var range = { from: keys3.lower, to: keys3.upper };
            delsRangeSet.add(range);
            pkRangeSet.add(range);
          } else {
            pkRangeSet.add(FULL_RANGE);
            delsRangeSet.add(FULL_RANGE);
            schema.indexes.forEach(function(idx) {
              return getRangeSet(idx.name).add(FULL_RANGE);
            });
          }
          return res;
        });
      } });
      var getRange = function(_a2) {
        var _b, _c;
        var _d = _a2.query, index = _d.index, range = _d.range;
        return [
          index,
          new RangeSet((_b = range.lower) !== null && _b !== void 0 ? _b : core.MIN_KEY, (_c = range.upper) !== null && _c !== void 0 ? _c : core.MAX_KEY)
        ];
      };
      var readSubscribers = {
        get: function(req) {
          return [primaryKey, new RangeSet(req.key)];
        },
        getMany: function(req) {
          return [primaryKey, new RangeSet().addKeys(req.keys)];
        },
        count: getRange,
        query: getRange,
        openCursor: getRange
      };
      keys(readSubscribers).forEach(function(method) {
        tableClone[method] = function(req) {
          var subscr = PSD.subscr;
          if (subscr) {
            var getRangeSet = function(indexName) {
              var part = "idb://" + dbName + "/" + tableName + "/" + indexName;
              return subscr[part] || (subscr[part] = new RangeSet());
            };
            var pkRangeSet_1 = getRangeSet("");
            var delsRangeSet_1 = getRangeSet(":dels");
            var _a2 = readSubscribers[method](req), queriedIndex = _a2[0], queriedRanges = _a2[1];
            getRangeSet(queriedIndex.name || "").add(queriedRanges);
            if (!queriedIndex.isPrimaryKey) {
              if (method === "count") {
                delsRangeSet_1.add(FULL_RANGE);
              } else {
                var keysPromise_1 = method === "query" && outbound && req.values && table.query(__assign(__assign({}, req), { values: false }));
                return table[method].apply(this, arguments).then(function(res) {
                  if (method === "query") {
                    if (outbound && req.values) {
                      return keysPromise_1.then(function(_a3) {
                        var resultingKeys = _a3.result;
                        pkRangeSet_1.addKeys(resultingKeys);
                        return res;
                      });
                    }
                    var pKeys = req.values ? res.result.map(extractKey) : res.result;
                    if (req.values) {
                      pkRangeSet_1.addKeys(pKeys);
                    } else {
                      delsRangeSet_1.addKeys(pKeys);
                    }
                  } else if (method === "openCursor") {
                    var cursor_1 = res;
                    var wantValues_1 = req.values;
                    return cursor_1 && Object.create(cursor_1, {
                      key: {
                        get: function() {
                          delsRangeSet_1.addKey(cursor_1.primaryKey);
                          return cursor_1.key;
                        }
                      },
                      primaryKey: {
                        get: function() {
                          var pkey = cursor_1.primaryKey;
                          delsRangeSet_1.addKey(pkey);
                          return pkey;
                        }
                      },
                      value: {
                        get: function() {
                          wantValues_1 && pkRangeSet_1.addKey(cursor_1.primaryKey);
                          return cursor_1.value;
                        }
                      }
                    });
                  }
                  return res;
                });
              }
            }
          }
          return table[method].apply(this, arguments);
        };
      });
      return tableClone;
    } });
  }
};
function trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
  function addAffectedIndex(ix) {
    var rangeSet = getRangeSet(ix.name || "");
    function extractKey(obj) {
      return obj != null ? ix.extractKey(obj) : null;
    }
    var addKeyOrKeys = function(key) {
      return ix.multiEntry && isArray(key) ? key.forEach(function(key2) {
        return rangeSet.addKey(key2);
      }) : rangeSet.addKey(key);
    };
    (oldObjs || newObjs).forEach(function(_, i) {
      var oldKey = oldObjs && extractKey(oldObjs[i]);
      var newKey = newObjs && extractKey(newObjs[i]);
      if (cmp(oldKey, newKey) !== 0) {
        if (oldKey != null)
          addKeyOrKeys(oldKey);
        if (newKey != null)
          addKeyOrKeys(newKey);
      }
    });
  }
  schema.indexes.forEach(addAffectedIndex);
}
var Dexie$1 = function() {
  function Dexie2(name, options) {
    var _this = this;
    this._middlewares = {};
    this.verno = 0;
    var deps = Dexie2.dependencies;
    this._options = options = __assign({
      addons: Dexie2.addons,
      autoOpen: true,
      indexedDB: deps.indexedDB,
      IDBKeyRange: deps.IDBKeyRange
    }, options);
    this._deps = {
      indexedDB: options.indexedDB,
      IDBKeyRange: options.IDBKeyRange
    };
    var addons = options.addons;
    this._dbSchema = {};
    this._versions = [];
    this._storeNames = [];
    this._allTables = {};
    this.idbdb = null;
    this._novip = this;
    var state = {
      dbOpenError: null,
      isBeingOpened: false,
      onReadyBeingFired: null,
      openComplete: false,
      dbReadyResolve: nop,
      dbReadyPromise: null,
      cancelOpen: nop,
      openCanceller: null,
      autoSchema: true,
      PR1398_maxLoop: 3
    };
    state.dbReadyPromise = new DexiePromise(function(resolve) {
      state.dbReadyResolve = resolve;
    });
    state.openCanceller = new DexiePromise(function(_, reject) {
      state.cancelOpen = reject;
    });
    this._state = state;
    this.name = name;
    this.on = Events(this, "populate", "blocked", "versionchange", "close", { ready: [promisableChain, nop] });
    this.on.ready.subscribe = override(this.on.ready.subscribe, function(subscribe) {
      return function(subscriber, bSticky) {
        Dexie2.vip(function() {
          var state2 = _this._state;
          if (state2.openComplete) {
            if (!state2.dbOpenError)
              DexiePromise.resolve().then(subscriber);
            if (bSticky)
              subscribe(subscriber);
          } else if (state2.onReadyBeingFired) {
            state2.onReadyBeingFired.push(subscriber);
            if (bSticky)
              subscribe(subscriber);
          } else {
            subscribe(subscriber);
            var db_1 = _this;
            if (!bSticky)
              subscribe(function unsubscribe() {
                db_1.on.ready.unsubscribe(subscriber);
                db_1.on.ready.unsubscribe(unsubscribe);
              });
          }
        });
      };
    });
    this.Collection = createCollectionConstructor(this);
    this.Table = createTableConstructor(this);
    this.Transaction = createTransactionConstructor(this);
    this.Version = createVersionConstructor(this);
    this.WhereClause = createWhereClauseConstructor(this);
    this.on("versionchange", function(ev) {
      if (ev.newVersion > 0)
        console.warn("Another connection wants to upgrade database '" + _this.name + "'. Closing db now to resume the upgrade.");
      else
        console.warn("Another connection wants to delete database '" + _this.name + "'. Closing db now to resume the delete request.");
      _this.close();
    });
    this.on("blocked", function(ev) {
      if (!ev.newVersion || ev.newVersion < ev.oldVersion)
        console.warn("Dexie.delete('" + _this.name + "') was blocked");
      else
        console.warn("Upgrade '" + _this.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
    });
    this._maxKey = getMaxKey(options.IDBKeyRange);
    this._createTransaction = function(mode, storeNames, dbschema, parentTransaction) {
      return new _this.Transaction(mode, storeNames, dbschema, _this._options.chromeTransactionDurability, parentTransaction);
    };
    this._fireOnBlocked = function(ev) {
      _this.on("blocked").fire(ev);
      connections.filter(function(c) {
        return c.name === _this.name && c !== _this && !c._state.vcFired;
      }).map(function(c) {
        return c.on("versionchange").fire(ev);
      });
    };
    this.use(virtualIndexMiddleware);
    this.use(hooksMiddleware);
    this.use(observabilityMiddleware);
    this.use(cacheExistingValuesMiddleware);
    this.vip = Object.create(this, { _vip: { value: true } });
    addons.forEach(function(addon) {
      return addon(_this);
    });
  }
  Dexie2.prototype.version = function(versionNumber) {
    if (isNaN(versionNumber) || versionNumber < 0.1)
      throw new exceptions.Type("Given version is not a positive number");
    versionNumber = Math.round(versionNumber * 10) / 10;
    if (this.idbdb || this._state.isBeingOpened)
      throw new exceptions.Schema("Cannot add version when database is open");
    this.verno = Math.max(this.verno, versionNumber);
    var versions = this._versions;
    var versionInstance = versions.filter(function(v) {
      return v._cfg.version === versionNumber;
    })[0];
    if (versionInstance)
      return versionInstance;
    versionInstance = new this.Version(versionNumber);
    versions.push(versionInstance);
    versions.sort(lowerVersionFirst);
    versionInstance.stores({});
    this._state.autoSchema = false;
    return versionInstance;
  };
  Dexie2.prototype._whenReady = function(fn) {
    var _this = this;
    return this.idbdb && (this._state.openComplete || PSD.letThrough || this._vip) ? fn() : new DexiePromise(function(resolve, reject) {
      if (_this._state.openComplete) {
        return reject(new exceptions.DatabaseClosed(_this._state.dbOpenError));
      }
      if (!_this._state.isBeingOpened) {
        if (!_this._options.autoOpen) {
          reject(new exceptions.DatabaseClosed());
          return;
        }
        _this.open().catch(nop);
      }
      _this._state.dbReadyPromise.then(resolve, reject);
    }).then(fn);
  };
  Dexie2.prototype.use = function(_a2) {
    var stack = _a2.stack, create = _a2.create, level = _a2.level, name = _a2.name;
    if (name)
      this.unuse({ stack, name });
    var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
    middlewares.push({ stack, create, level: level == null ? 10 : level, name });
    middlewares.sort(function(a, b) {
      return a.level - b.level;
    });
    return this;
  };
  Dexie2.prototype.unuse = function(_a2) {
    var stack = _a2.stack, name = _a2.name, create = _a2.create;
    if (stack && this._middlewares[stack]) {
      this._middlewares[stack] = this._middlewares[stack].filter(function(mw) {
        return create ? mw.create !== create : name ? mw.name !== name : false;
      });
    }
    return this;
  };
  Dexie2.prototype.open = function() {
    return dexieOpen(this);
  };
  Dexie2.prototype._close = function() {
    var state = this._state;
    var idx = connections.indexOf(this);
    if (idx >= 0)
      connections.splice(idx, 1);
    if (this.idbdb) {
      try {
        this.idbdb.close();
      } catch (e) {
      }
      this._novip.idbdb = null;
    }
    state.dbReadyPromise = new DexiePromise(function(resolve) {
      state.dbReadyResolve = resolve;
    });
    state.openCanceller = new DexiePromise(function(_, reject) {
      state.cancelOpen = reject;
    });
  };
  Dexie2.prototype.close = function() {
    this._close();
    var state = this._state;
    this._options.autoOpen = false;
    state.dbOpenError = new exceptions.DatabaseClosed();
    if (state.isBeingOpened)
      state.cancelOpen(state.dbOpenError);
  };
  Dexie2.prototype.delete = function() {
    var _this = this;
    var hasArguments = arguments.length > 0;
    var state = this._state;
    return new DexiePromise(function(resolve, reject) {
      var doDelete = function() {
        _this.close();
        var req = _this._deps.indexedDB.deleteDatabase(_this.name);
        req.onsuccess = wrap(function() {
          _onDatabaseDeleted(_this._deps, _this.name);
          resolve();
        });
        req.onerror = eventRejectHandler(reject);
        req.onblocked = _this._fireOnBlocked;
      };
      if (hasArguments)
        throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
      if (state.isBeingOpened) {
        state.dbReadyPromise.then(doDelete);
      } else {
        doDelete();
      }
    });
  };
  Dexie2.prototype.backendDB = function() {
    return this.idbdb;
  };
  Dexie2.prototype.isOpen = function() {
    return this.idbdb !== null;
  };
  Dexie2.prototype.hasBeenClosed = function() {
    var dbOpenError = this._state.dbOpenError;
    return dbOpenError && dbOpenError.name === "DatabaseClosed";
  };
  Dexie2.prototype.hasFailed = function() {
    return this._state.dbOpenError !== null;
  };
  Dexie2.prototype.dynamicallyOpened = function() {
    return this._state.autoSchema;
  };
  Object.defineProperty(Dexie2.prototype, "tables", {
    get: function() {
      var _this = this;
      return keys(this._allTables).map(function(name) {
        return _this._allTables[name];
      });
    },
    enumerable: false,
    configurable: true
  });
  Dexie2.prototype.transaction = function() {
    var args = extractTransactionArgs.apply(this, arguments);
    return this._transaction.apply(this, args);
  };
  Dexie2.prototype._transaction = function(mode, tables, scopeFunc) {
    var _this = this;
    var parentTransaction = PSD.trans;
    if (!parentTransaction || parentTransaction.db !== this || mode.indexOf("!") !== -1)
      parentTransaction = null;
    var onlyIfCompatible = mode.indexOf("?") !== -1;
    mode = mode.replace("!", "").replace("?", "");
    var idbMode, storeNames;
    try {
      storeNames = tables.map(function(table) {
        var storeName = table instanceof _this.Table ? table.name : table;
        if (typeof storeName !== "string")
          throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
        return storeName;
      });
      if (mode == "r" || mode === READONLY)
        idbMode = READONLY;
      else if (mode == "rw" || mode == READWRITE)
        idbMode = READWRITE;
      else
        throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
      if (parentTransaction) {
        if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
          if (onlyIfCompatible) {
            parentTransaction = null;
          } else
            throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
        }
        if (parentTransaction) {
          storeNames.forEach(function(storeName) {
            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
              if (onlyIfCompatible) {
                parentTransaction = null;
              } else
                throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
            }
          });
        }
        if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
          parentTransaction = null;
        }
      }
    } catch (e) {
      return parentTransaction ? parentTransaction._promise(null, function(_, reject) {
        reject(e);
      }) : rejection(e);
    }
    var enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
    return parentTransaction ? parentTransaction._promise(idbMode, enterTransaction, "lock") : PSD.trans ? usePSD(PSD.transless, function() {
      return _this._whenReady(enterTransaction);
    }) : this._whenReady(enterTransaction);
  };
  Dexie2.prototype.table = function(tableName) {
    if (!hasOwn(this._allTables, tableName)) {
      throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
    }
    return this._allTables[tableName];
  };
  return Dexie2;
}();
var symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol ? Symbol.observable : "@@observable";
var Observable = function() {
  function Observable2(subscribe) {
    this._subscribe = subscribe;
  }
  Observable2.prototype.subscribe = function(x, error, complete) {
    return this._subscribe(!x || typeof x === "function" ? { next: x, error, complete } : x);
  };
  Observable2.prototype[symbolObservable] = function() {
    return this;
  };
  return Observable2;
}();
function extendObservabilitySet(target, newSet) {
  keys(newSet).forEach(function(part) {
    var rangeSet = target[part] || (target[part] = new RangeSet());
    mergeRanges(rangeSet, newSet[part]);
  });
  return target;
}
function liveQuery(querier) {
  var hasValue = false;
  var currentValue = void 0;
  var observable = new Observable(function(observer) {
    var scopeFuncIsAsync = isAsyncFunction(querier);
    function execute2(subscr) {
      if (scopeFuncIsAsync) {
        incrementExpectedAwaits();
      }
      var exec = function() {
        return newScope(querier, { subscr, trans: null });
      };
      var rv = PSD.trans ? usePSD(PSD.transless, exec) : exec();
      if (scopeFuncIsAsync) {
        rv.then(decrementExpectedAwaits, decrementExpectedAwaits);
      }
      return rv;
    }
    var closed = false;
    var accumMuts = {};
    var currentObs = {};
    var subscription = {
      get closed() {
        return closed;
      },
      unsubscribe: function() {
        closed = true;
        globalEvents.storagemutated.unsubscribe(mutationListener);
      }
    };
    observer.start && observer.start(subscription);
    var querying = false, startedListening = false;
    function shouldNotify() {
      return keys(currentObs).some(function(key) {
        return accumMuts[key] && rangesOverlap(accumMuts[key], currentObs[key]);
      });
    }
    var mutationListener = function(parts) {
      extendObservabilitySet(accumMuts, parts);
      if (shouldNotify()) {
        doQuery();
      }
    };
    var doQuery = function() {
      if (querying || closed)
        return;
      accumMuts = {};
      var subscr = {};
      var ret = execute2(subscr);
      if (!startedListening) {
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
        startedListening = true;
      }
      querying = true;
      Promise.resolve(ret).then(function(result) {
        hasValue = true;
        currentValue = result;
        querying = false;
        if (closed)
          return;
        if (shouldNotify()) {
          doQuery();
        } else {
          accumMuts = {};
          currentObs = subscr;
          observer.next && observer.next(result);
        }
      }, function(err) {
        querying = false;
        hasValue = false;
        observer.error && observer.error(err);
        subscription.unsubscribe();
      });
    };
    doQuery();
    return subscription;
  });
  observable.hasValue = function() {
    return hasValue;
  };
  observable.getValue = function() {
    return currentValue;
  };
  return observable;
}
var domDeps;
try {
  domDeps = {
    indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
    IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
  };
} catch (e) {
  domDeps = { indexedDB: null, IDBKeyRange: null };
}
var Dexie = Dexie$1;
props(Dexie, __assign(__assign({}, fullNameExceptions), {
  delete: function(databaseName) {
    var db = new Dexie(databaseName, { addons: [] });
    return db.delete();
  },
  exists: function(name) {
    return new Dexie(name, { addons: [] }).open().then(function(db) {
      db.close();
      return true;
    }).catch("NoSuchDatabaseError", function() {
      return false;
    });
  },
  getDatabaseNames: function(cb) {
    try {
      return getDatabaseNames(Dexie.dependencies).then(cb);
    } catch (_a2) {
      return rejection(new exceptions.MissingAPI());
    }
  },
  defineClass: function() {
    function Class(content) {
      extend(this, content);
    }
    return Class;
  },
  ignoreTransaction: function(scopeFunc) {
    return PSD.trans ? usePSD(PSD.transless, scopeFunc) : scopeFunc();
  },
  vip,
  async: function(generatorFn) {
    return function() {
      try {
        var rv = awaitIterator(generatorFn.apply(this, arguments));
        if (!rv || typeof rv.then !== "function")
          return DexiePromise.resolve(rv);
        return rv;
      } catch (e) {
        return rejection(e);
      }
    };
  },
  spawn: function(generatorFn, args, thiz) {
    try {
      var rv = awaitIterator(generatorFn.apply(thiz, args || []));
      if (!rv || typeof rv.then !== "function")
        return DexiePromise.resolve(rv);
      return rv;
    } catch (e) {
      return rejection(e);
    }
  },
  currentTransaction: {
    get: function() {
      return PSD.trans || null;
    }
  },
  waitFor: function(promiseOrFunction, optionalTimeout) {
    var promise = DexiePromise.resolve(typeof promiseOrFunction === "function" ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 6e4);
    return PSD.trans ? PSD.trans.waitFor(promise) : promise;
  },
  Promise: DexiePromise,
  debug: {
    get: function() {
      return debug;
    },
    set: function(value) {
      setDebug(value, value === "dexie" ? function() {
        return true;
      } : dexieStackFrameFilter);
    }
  },
  derive,
  extend,
  props,
  override,
  Events,
  on: globalEvents,
  liveQuery,
  extendObservabilitySet,
  getByKeyPath,
  setByKeyPath,
  delByKeyPath,
  shallowClone,
  deepClone,
  getObjectDiff,
  cmp,
  asap: asap$1,
  minKey,
  addons: [],
  connections,
  errnames,
  dependencies: domDeps,
  semVer: DEXIE_VERSION,
  version: DEXIE_VERSION.split(".").map(function(n) {
    return parseInt(n);
  }).reduce(function(p, c, i) {
    return p + c / Math.pow(10, i * 2);
  })
}));
Dexie.maxKey = getMaxKey(Dexie.dependencies.IDBKeyRange);
if (typeof dispatchEvent !== "undefined" && typeof addEventListener !== "undefined") {
  globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function(updatedParts) {
    if (!propagatingLocally) {
      var event_1;
      if (isIEOrEdge) {
        event_1 = document.createEvent("CustomEvent");
        event_1.initCustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, true, true, updatedParts);
      } else {
        event_1 = new CustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, {
          detail: updatedParts
        });
      }
      propagatingLocally = true;
      dispatchEvent(event_1);
      propagatingLocally = false;
    }
  });
  addEventListener(STORAGE_MUTATED_DOM_EVENT_NAME, function(_a2) {
    var detail = _a2.detail;
    if (!propagatingLocally) {
      propagateLocally(detail);
    }
  });
}
function propagateLocally(updateParts) {
  var wasMe = propagatingLocally;
  try {
    propagatingLocally = true;
    globalEvents.storagemutated.fire(updateParts);
  } finally {
    propagatingLocally = wasMe;
  }
}
var propagatingLocally = false;
if (typeof BroadcastChannel !== "undefined") {
  bc_1 = new BroadcastChannel(STORAGE_MUTATED_DOM_EVENT_NAME);
  if (typeof bc_1.unref === "function") {
    bc_1.unref();
  }
  globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
    if (!propagatingLocally) {
      bc_1.postMessage(changedParts);
    }
  });
  bc_1.onmessage = function(ev) {
    if (ev.data)
      propagateLocally(ev.data);
  };
} else if (typeof self !== "undefined" && typeof navigator !== "undefined") {
  globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
    try {
      if (!propagatingLocally) {
        if (typeof localStorage !== "undefined") {
          localStorage.setItem(STORAGE_MUTATED_DOM_EVENT_NAME, JSON.stringify({
            trig: Math.random(),
            changedParts
          }));
        }
        if (typeof self["clients"] === "object") {
          __spreadArray([], self["clients"].matchAll({ includeUncontrolled: true }), true).forEach(function(client) {
            return client.postMessage({
              type: STORAGE_MUTATED_DOM_EVENT_NAME,
              changedParts
            });
          });
        }
      }
    } catch (_a2) {
    }
  });
  if (typeof addEventListener !== "undefined") {
    addEventListener("storage", function(ev) {
      if (ev.key === STORAGE_MUTATED_DOM_EVENT_NAME) {
        var data = JSON.parse(ev.newValue);
        if (data)
          propagateLocally(data.changedParts);
      }
    });
  }
  swContainer = self.document && navigator.serviceWorker;
  if (swContainer) {
    swContainer.addEventListener("message", propagateMessageLocally);
  }
}
var bc_1;
var swContainer;
function propagateMessageLocally(_a2) {
  var data = _a2.data;
  if (data && data.type === STORAGE_MUTATED_DOM_EVENT_NAME) {
    propagateLocally(data.changedParts);
  }
}
DexiePromise.rejectionMapper = mapError;
setDebug(debug, dexieStackFrameFilter);

// deno-cache:https://cdn.skypack.dev/-/regenerator-runtime@v0.13.9-4Dxus9nU31cBsHxnWq2H/dist=es2019,mode=imports/optimized/regenerator-runtime.js
function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base) {
      return commonjsRequire(path, base === void 0 || base === null ? module.path : base);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var runtime_1 = createCommonjsModule(function(module) {
  var runtime = function(exports) {
    var Op = Object.prototype;
    var hasOwn2 = Op.hasOwnProperty;
    var undefined$1;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol2 = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap22(innerFn, outerFn, self2, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self2, context);
      return generator;
    }
    exports.wrap = wrap22;
    function tryCatch2(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol2, function() {
      return this;
    });
    var getProto2 = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto2 && getProto2(getProto2(values2([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn2.call(NativeIteratorPrototype, iteratorSymbol2)) {
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }
    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };
    exports.awrap = function(arg) {
      return { __await: arg };
    };
    function AsyncIterator2(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch2(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && typeof value === "object" && hasOwn2.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }
          return PromiseImpl.resolve(value).then(function(unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
      this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator2.prototype);
    define(AsyncIterator2.prototype, asyncIteratorSymbol, function() {
      return this;
    });
    exports.AsyncIterator = AsyncIterator2;
    exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0)
        PromiseImpl = Promise;
      var iter2 = new AsyncIterator2(wrap22(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter2 : iter2.next().then(function(result) {
        return result.done ? result.value : iter2.next();
      });
    };
    function makeInvokeMethod(innerFn, self2, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }
          return doneResult();
        }
        context.method = method;
        context.arg = arg;
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel)
                continue;
              return delegateResult;
            }
          }
          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch2(innerFn, self2, context);
          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        context.delegate = null;
        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);
            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch2(method, delegate.iterator, context.arg);
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
      var info = record.arg;
      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        return info;
      }
      context.delegate = null;
      return ContinueSentinel;
    }
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    define(Gp, iteratorSymbol2, function() {
      return this;
    });
    define(Gp, "toString", function() {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports.keys = function(object) {
      var keys22 = [];
      for (var key in object) {
        keys22.push(key);
      }
      keys22.reverse();
      return function next() {
        while (keys22.length) {
          var key2 = keys22.pop();
          if (key2 in object) {
            next.value = key2;
            next.done = false;
            return next;
          }
        }
        next.done = true;
        return next;
      };
    };
    function values2(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol2];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1, next = function next2() {
            while (++i < iterable.length) {
              if (hasOwn2.call(iterable, i)) {
                next2.value = iterable[i];
                next2.done = false;
                return next2;
              }
            }
            next2.value = undefined$1;
            next2.done = true;
            return next2;
          };
          return next.next = next;
        }
      }
      return { next: doneResult };
    }
    exports.values = values2;
    function doneResult() {
      return { value: undefined$1, done: true };
    }
    Context.prototype = {
      constructor: Context,
      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn2.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          if (caught) {
            context.method = "next";
            context.arg = undefined$1;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn2.call(entry, "catchLoc");
            var hasFinally = hasOwn2.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function(type2, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn2.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type2 === "break" || type2 === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type2;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      catch: function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values2(iterable),
          resultName,
          nextLoc
        };
        if (this.method === "next") {
          this.arg = undefined$1;
        }
        return ContinueSentinel;
      }
    };
    return exports;
  }(module.exports);
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
});
var AsyncIterator = runtime_1.AsyncIterator;
var async = runtime_1.async;
var awrap = runtime_1.awrap;
var isGeneratorFunction = runtime_1.isGeneratorFunction;
var keys2 = runtime_1.keys;
var mark = runtime_1.mark;
var values = runtime_1.values;
var wrap2 = runtime_1.wrap;

// deno-cache:https://cdn.skypack.dev/-/indexeddbshim@v9.0.0-QVaW8rBIOGlJegwkWTsK/dist=es2019,mode=imports/unoptimized/dist/indexeddbshim-noninvasive.js
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule2(fn) {
  var module = { exports: {} };
  return fn(module, module.exports), module.exports;
}
var __VIRTUAL_FILE = createCommonjsModule2(function(module, exports) {
  (function(global2, factory) {
    module.exports = factory();
  })(commonjsGlobal, function() {
    var UnicodeIDStart = "(?:[$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D])";
    var UnicodeIDContinue = "(?:[$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF])";
    function ownKeys(object, enumerableOnly) {
      var keys3 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys3.push.apply(keys3, symbols);
      }
      return keys3;
    }
    function _objectSpread2(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      return _typeof$1 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof$1(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props2) {
      for (var i2 = 0; i2 < props2.length; i2++) {
        var descriptor = props2[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _defineEnumerableProperties(obj, descs) {
      for (var key in descs) {
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc)
          desc.writable = true;
        Object.defineProperty(obj, key, desc);
      }
      if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for (var i2 = 0; i2 < objectSymbols.length; i2++) {
          var sym = objectSymbols[i2];
          var desc = descs[sym];
          desc.configurable = desc.enumerable = true;
          if ("value" in desc)
            desc.writable = true;
          Object.defineProperty(obj, sym, desc);
        }
      }
      return obj;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArray(iter2) {
      if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
        return Array.from(iter2);
    }
    function _iterableToArrayLimit(arr, i2) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i2 = 0;
          var F = function() {
          };
          return {
            s: F,
            n: function() {
              if (i2 >= o.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o[i2++]
              };
            },
            e: function(e) {
              throw e;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(e) {
          didErr = true;
          err = e;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    var global$2 = typeof global$1 !== "undefined" ? global$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
    var global$1 = typeof global$2 !== "undefined" ? global$2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var phases = {
      NONE: 0,
      CAPTURING_PHASE: 1,
      AT_TARGET: 2,
      BUBBLING_PHASE: 3
    };
    var ShimDOMException$1 = typeof DOMException === "undefined" ? function DOMException2(msg, name) {
      var err = new Error(msg);
      err.name = name;
      return err;
    } : DOMException;
    var ev = /* @__PURE__ */ new WeakMap();
    var evCfg = /* @__PURE__ */ new WeakMap();
    var ShimEvent = function Event(type2) {
      this[Symbol.toStringTag] = "Event";
      this.toString = function() {
        return "[object Event]";
      };
      var _arguments = Array.prototype.slice.call(arguments), evInit = _arguments[1], _ev = _arguments[2];
      if (!arguments.length) {
        throw new TypeError("Failed to construct 'Event': 1 argument required, but only 0 present.");
      }
      evInit = evInit || {};
      _ev = _ev || {};
      var _evCfg = {};
      if ("composed" in evInit) {
        _evCfg.composed = evInit.composed;
      }
      ev.set(this, _ev);
      evCfg.set(this, _evCfg);
      this.initEvent(type2, evInit.bubbles, evInit.cancelable);
      Object.defineProperties(this, ["target", "currentTarget", "eventPhase", "defaultPrevented"].reduce(function(obj, prop) {
        obj[prop] = {
          get: function get() {
            return _evCfg[prop] !== void 0 ? _evCfg[prop] : prop in _ev ? _ev[prop] : prop === "eventPhase" ? 0 : prop === "defaultPrevented" ? false : null;
          }
        };
        return obj;
      }, {}));
      var props2 = [
        "type",
        "bubbles",
        "cancelable",
        "isTrusted",
        "timeStamp",
        "initEvent",
        "composedPath",
        "composed"
      ];
      if (this.toString() === "[object CustomEvent]") {
        props2.push("detail", "initCustomEvent");
      }
      Object.defineProperties(this, props2.reduce(function(obj, prop) {
        obj[prop] = {
          get: function get() {
            return prop in _evCfg ? _evCfg[prop] : prop in _ev ? _ev[prop] : ["bubbles", "cancelable", "composed"].includes(prop) ? false : void 0;
          }
        };
        return obj;
      }, {}));
    };
    ShimEvent.prototype.preventDefault = function() {
      if (!(this instanceof ShimEvent)) {
        throw new TypeError("Illegal invocation");
      }
      var _ev = ev.get(this);
      var _evCfg = evCfg.get(this);
      if (this.cancelable && !_evCfg._passive) {
        _evCfg.defaultPrevented = true;
        if (typeof _ev.preventDefault === "function") {
          _ev.preventDefault();
        }
      }
    };
    ShimEvent.prototype.stopImmediatePropagation = function() {
      var _evCfg = evCfg.get(this);
      _evCfg._stopImmediatePropagation = true;
    };
    ShimEvent.prototype.stopPropagation = function() {
      var _evCfg = evCfg.get(this);
      _evCfg._stopPropagation = true;
    };
    ShimEvent.prototype.initEvent = function(type2, bubbles, cancelable) {
      var _evCfg = evCfg.get(this);
      if (_evCfg._dispatched) {
        return;
      }
      _evCfg.type = type2;
      if (bubbles !== void 0) {
        _evCfg.bubbles = bubbles;
      }
      if (cancelable !== void 0) {
        _evCfg.cancelable = cancelable;
      }
    };
    ["type", "target", "currentTarget"].forEach(function(prop) {
      Object.defineProperty(ShimEvent.prototype, prop, {
        enumerable: true,
        configurable: true,
        get: function get() {
          throw new TypeError("Illegal invocation");
        }
      });
    });
    ["eventPhase", "defaultPrevented", "bubbles", "cancelable", "timeStamp"].forEach(function(prop) {
      Object.defineProperty(ShimEvent.prototype, prop, {
        enumerable: true,
        configurable: true,
        get: function get() {
          throw new TypeError("Illegal invocation");
        }
      });
    });
    ["NONE", "CAPTURING_PHASE", "AT_TARGET", "BUBBLING_PHASE"].forEach(function(prop, i2) {
      Object.defineProperty(ShimEvent, prop, {
        enumerable: true,
        writable: false,
        value: i2
      });
      Object.defineProperty(ShimEvent.prototype, prop, {
        writable: false,
        value: i2
      });
    });
    ShimEvent[Symbol.toStringTag] = "Function";
    ShimEvent.prototype[Symbol.toStringTag] = "EventPrototype";
    Object.defineProperty(ShimEvent, "prototype", {
      writable: false
    });
    var ShimCustomEvent = function CustomEvent2(type2) {
      var _arguments2 = Array.prototype.slice.call(arguments), evInit = _arguments2[1], _ev = _arguments2[2];
      ShimEvent.call(this, type2, evInit, _ev);
      this[Symbol.toStringTag] = "CustomEvent";
      this.toString = function() {
        return "[object CustomEvent]";
      };
      evInit = evInit || {};
      this.initCustomEvent(type2, evInit.bubbles, evInit.cancelable, "detail" in evInit ? evInit.detail : null);
    };
    Object.defineProperty(ShimCustomEvent.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: ShimCustomEvent
    });
    ShimCustomEvent.prototype.initCustomEvent = function(type2, bubbles, cancelable, detail) {
      if (!(this instanceof ShimCustomEvent)) {
        throw new TypeError("Illegal invocation");
      }
      var _evCfg = evCfg.get(this);
      ShimCustomEvent.call(this, type2, {
        bubbles,
        cancelable,
        detail
      }, arguments[4]);
      if (_evCfg._dispatched) {
        return;
      }
      if (detail !== void 0) {
        _evCfg.detail = detail;
      }
      Object.defineProperty(this, "detail", {
        get: function get() {
          return _evCfg.detail;
        }
      });
    };
    ShimCustomEvent[Symbol.toStringTag] = "Function";
    ShimCustomEvent.prototype[Symbol.toStringTag] = "CustomEventPrototype";
    Object.defineProperty(ShimCustomEvent.prototype, "detail", {
      enumerable: true,
      configurable: true,
      get: function get() {
        throw new TypeError("Illegal invocation");
      }
    });
    Object.defineProperty(ShimCustomEvent, "prototype", {
      writable: false
    });
    function copyEvent(e) {
      var bubbles = e.bubbles, cancelable = e.cancelable, detail = e.detail, type2 = e.type;
      if ("detail" in e) {
        return new ShimCustomEvent(type2, {
          bubbles,
          cancelable,
          detail
        }, e);
      }
      return new ShimEvent(type2, {
        bubbles,
        cancelable
      }, e);
    }
    function getListenersOptions(listeners2, type2, options) {
      var listenersByType = listeners2[type2];
      if (listenersByType === void 0)
        listeners2[type2] = listenersByType = [];
      options = typeof options === "boolean" ? {
        capture: options
      } : options || {};
      var stringifiedOptions = JSON.stringify(options);
      var listenersByTypeOptions = listenersByType.filter(function(obj) {
        return stringifiedOptions === JSON.stringify(obj.options);
      });
      return {
        listenersByTypeOptions,
        options,
        listenersByType
      };
    }
    var methods = {
      addListener: function addListener(listeners2, listener, type2, options) {
        var listenerOptions = getListenersOptions(listeners2, type2, options);
        var listenersByTypeOptions = listenerOptions.listenersByTypeOptions;
        options = listenerOptions.options;
        var listenersByType = listenerOptions.listenersByType;
        if (listenersByTypeOptions.some(function(l) {
          return l.listener === listener;
        }))
          return;
        listenersByType.push({
          listener,
          options
        });
      },
      removeListener: function removeListener(listeners2, listener, type2, options) {
        var listenerOptions = getListenersOptions(listeners2, type2, options);
        var listenersByType = listenerOptions.listenersByType;
        var stringifiedOptions = JSON.stringify(listenerOptions.options);
        listenersByType.some(function(l, i2) {
          if (l.listener === listener && stringifiedOptions === JSON.stringify(l.options)) {
            listenersByType.splice(i2, 1);
            if (!listenersByType.length)
              delete listeners2[type2];
            return true;
          }
          return false;
        });
      },
      hasListener: function hasListener(listeners2, listener, type2, options) {
        var listenerOptions = getListenersOptions(listeners2, type2, options);
        var listenersByTypeOptions = listenerOptions.listenersByTypeOptions;
        return listenersByTypeOptions.some(function(l) {
          return l.listener === listener;
        });
      }
    };
    function EventTarget() {
      throw new TypeError("Illegal constructor");
    }
    Object.assign(EventTarget.prototype, ["Early", "", "Late", "Default"].reduce(function(obj, listenerType) {
      ["add", "remove", "has"].forEach(function(method) {
        obj[method + listenerType + "EventListener"] = function(type2, listener) {
          var options = arguments[2];
          if (arguments.length < 2)
            throw new TypeError("2 or more arguments required");
          if (typeof type2 !== "string") {
            throw new ShimDOMException$1("UNSPECIFIED_EVENT_TYPE_ERR", "UNSPECIFIED_EVENT_TYPE_ERR");
          }
          try {
            if (listener.handleEvent && listener.handleEvent.bind) {
              listener = listener.handleEvent.bind(listener);
            }
          } catch (err) {
            console.log("Uncaught `handleEvent` error", err);
          }
          var arrStr = "_" + listenerType.toLowerCase() + (listenerType === "" ? "l" : "L") + "isteners";
          if (!this[arrStr]) {
            Object.defineProperty(this, arrStr, {
              value: {}
            });
          }
          return methods[method + "Listener"](this[arrStr], listener, type2, options);
        };
      });
      return obj;
    }, {}));
    Object.assign(EventTarget.prototype, {
      __setOptions: function __setOptions(customOptions) {
        customOptions = customOptions || {};
        this._defaultSync = customOptions.defaultSync;
        this._extraProperties = customOptions.extraProperties || [];
        if (customOptions.legacyOutputDidListenersThrowFlag) {
          this._legacyOutputDidListenersThrowCheck = true;
          this._extraProperties.push("__legacyOutputDidListenersThrowError");
        }
      },
      dispatchEvent: function dispatchEvent2(e) {
        return this._dispatchEvent(e, true);
      },
      _dispatchEvent: function _dispatchEvent(e, setTarget) {
        var _this = this;
        ["early", "", "late", "default"].forEach(function(listenerType) {
          var arrStr = "_" + listenerType + (listenerType === "" ? "l" : "L") + "isteners";
          if (!_this[arrStr]) {
            Object.defineProperty(_this, arrStr, {
              value: {}
            });
          }
        });
        var _evCfg = evCfg.get(e);
        if (_evCfg && setTarget && _evCfg._dispatched) {
          throw new ShimDOMException$1("The object is in an invalid state.", "InvalidStateError");
        }
        var eventCopy;
        if (_evCfg) {
          eventCopy = e;
        } else {
          eventCopy = copyEvent(e);
          _evCfg = evCfg.get(eventCopy);
          _evCfg._dispatched = true;
          this._extraProperties.forEach(function(prop) {
            if (prop in e) {
              eventCopy[prop] = e[prop];
            }
          });
        }
        var _eventCopy = eventCopy, type2 = _eventCopy.type;
        function finishEventDispatch() {
          _evCfg.eventPhase = phases.NONE;
          _evCfg.currentTarget = null;
          delete _evCfg._children;
        }
        function invokeDefaults() {
          _evCfg._stopImmediatePropagation = void 0;
          _evCfg._stopPropagation = void 0;
          if (!eventCopy.defaultPrevented || !_evCfg.cancelable) {
            _evCfg.eventPhase = phases.AT_TARGET;
            eventCopy.target.invokeCurrentListeners(eventCopy.target._defaultListeners, eventCopy, type2);
          }
          finishEventDispatch();
        }
        var continueEventDispatch = function continueEventDispatch2() {
          _evCfg._stopImmediatePropagation = void 0;
          _evCfg._stopPropagation = void 0;
          if (!_this._defaultSync) {
            setTimeout(invokeDefaults, 0);
          } else
            invokeDefaults();
          _evCfg.eventPhase = phases.AT_TARGET;
          if (!_evCfg._stopPropagation) {
            _evCfg._stopImmediatePropagation = void 0;
            _evCfg._stopPropagation = void 0;
            eventCopy.target.invokeCurrentListeners(eventCopy.target._lateListeners, eventCopy, type2);
          }
          finishEventDispatch();
          return !eventCopy.defaultPrevented;
        };
        if (setTarget)
          _evCfg.target = this;
        switch (eventCopy.eventPhase) {
          default:
          case phases.NONE: {
            _evCfg.eventPhase = phases.AT_TARGET;
            this.invokeCurrentListeners(this._earlyListeners, eventCopy, type2);
            if (!this.__getParent) {
              _evCfg.eventPhase = phases.AT_TARGET;
              return this._dispatchEvent(eventCopy, false);
            }
            var par = this;
            var root = this;
            while (par.__getParent && (par = par.__getParent()) !== null) {
              if (!_evCfg._children) {
                _evCfg._children = [];
              }
              _evCfg._children.push(root);
              root = par;
            }
            root._defaultSync = this._defaultSync;
            _evCfg.eventPhase = phases.CAPTURING_PHASE;
            return root._dispatchEvent(eventCopy, false);
          }
          case phases.CAPTURING_PHASE: {
            if (_evCfg._stopPropagation) {
              return continueEventDispatch();
            }
            this.invokeCurrentListeners(this._listeners, eventCopy, type2);
            var child = _evCfg._children && _evCfg._children.length && _evCfg._children.pop();
            if (!child || child === eventCopy.target) {
              _evCfg.eventPhase = phases.AT_TARGET;
            }
            if (child)
              child._defaultSync = this._defaultSync;
            return (child || this)._dispatchEvent(eventCopy, false);
          }
          case phases.AT_TARGET:
            if (_evCfg._stopPropagation) {
              return continueEventDispatch();
            }
            this.invokeCurrentListeners(this._listeners, eventCopy, type2, true);
            if (!_evCfg.bubbles) {
              return continueEventDispatch();
            }
            _evCfg.eventPhase = phases.BUBBLING_PHASE;
            return this._dispatchEvent(eventCopy, false);
          case phases.BUBBLING_PHASE: {
            if (_evCfg._stopPropagation) {
              return continueEventDispatch();
            }
            var parent = this.__getParent && this.__getParent();
            if (!parent) {
              return continueEventDispatch();
            }
            parent.invokeCurrentListeners(parent._listeners, eventCopy, type2, true);
            parent._defaultSync = this._defaultSync;
            return parent._dispatchEvent(eventCopy, false);
          }
        }
      },
      invokeCurrentListeners: function invokeCurrentListeners(listeners2, eventCopy, type2, checkOnListeners) {
        var _this2 = this;
        var _evCfg = evCfg.get(eventCopy);
        _evCfg.currentTarget = this;
        var listOpts = getListenersOptions(listeners2, type2, {});
        var listenersByType = listOpts.listenersByType.concat();
        var dummyIPos = listenersByType.length ? 1 : 0;
        listenersByType.some(function(listenerObj, i2) {
          var onListener = checkOnListeners ? _this2["on" + type2] : null;
          if (_evCfg._stopImmediatePropagation)
            return true;
          if (i2 === dummyIPos && typeof onListener === "function") {
            _this2.tryCatch(eventCopy, function() {
              var ret = onListener.call(eventCopy.currentTarget, eventCopy);
              if (ret === false) {
                eventCopy.preventDefault();
              }
            });
          }
          var options = listenerObj.options;
          var once = options.once, passive = options.passive, capture = options.capture;
          _evCfg._passive = passive;
          if (capture && eventCopy.target !== eventCopy.currentTarget && eventCopy.eventPhase === phases.CAPTURING_PHASE || eventCopy.eventPhase === phases.AT_TARGET || !capture && eventCopy.target !== eventCopy.currentTarget && eventCopy.eventPhase === phases.BUBBLING_PHASE) {
            var listener = listenerObj.listener;
            _this2.tryCatch(eventCopy, function() {
              listener.call(eventCopy.currentTarget, eventCopy);
            });
            if (once) {
              _this2.removeEventListener(type2, listener, options);
            }
          }
          return false;
        });
        this.tryCatch(eventCopy, function() {
          var onListener = checkOnListeners ? _this2["on" + type2] : null;
          if (typeof onListener === "function" && listenersByType.length < 2) {
            var ret = onListener.call(eventCopy.currentTarget, eventCopy);
            if (ret === false) {
              eventCopy.preventDefault();
            }
          }
        });
        return !eventCopy.defaultPrevented;
      },
      tryCatch: function tryCatch2(evt, cb) {
        try {
          cb();
        } catch (err) {
          this.triggerErrorEvent(err, evt);
        }
      },
      triggerErrorEvent: function triggerErrorEvent(err, evt) {
        var error2 = err;
        if (typeof err === "string") {
          error2 = new Error("Uncaught exception: " + err);
        }
        var triggerGlobalErrorEvent;
        var useNodeImpl = false;
        if (typeof window === "undefined" || typeof ErrorEvent === "undefined" || window && (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && !window.dispatchEvent) {
          useNodeImpl = true;
          triggerGlobalErrorEvent = function triggerGlobalErrorEvent2() {
            setTimeout(function() {
              throw error2;
            });
          };
        } else {
          triggerGlobalErrorEvent = function triggerGlobalErrorEvent2() {
            var errEv = new ErrorEvent("error", {
              error: err,
              message: error2.message || "",
              filename: error2.fileName || "",
              lineno: error2.lineNumber || 0,
              colno: error2.columnNumber || 0
            });
            window.dispatchEvent(errEv);
          };
        }
        if (!useNodeImpl || !this._legacyOutputDidListenersThrowCheck)
          triggerGlobalErrorEvent();
        if (this._legacyOutputDidListenersThrowCheck) {
          evt.__legacyOutputDidListenersThrowError = error2;
        }
      }
    });
    EventTarget.prototype[Symbol.toStringTag] = "EventTargetPrototype";
    Object.defineProperty(EventTarget, "prototype", {
      writable: false
    });
    var ShimEventTarget = EventTarget;
    var EventTargetFactory = {
      createInstance: function createInstance(customOptions) {
        function EventTarget2() {
          this.__setOptions(customOptions);
        }
        EventTarget2.prototype = ShimEventTarget.prototype;
        return new EventTarget2();
      }
    };
    EventTarget.ShimEvent = ShimEvent;
    EventTarget.ShimCustomEvent = ShimCustomEvent;
    EventTarget.ShimDOMException = ShimDOMException$1;
    EventTarget.ShimEventTarget = EventTarget;
    EventTarget.EventTargetFactory = EventTargetFactory;
    function setPrototypeOfCustomEvent() {
      Object.setPrototypeOf(ShimCustomEvent, ShimEvent);
      Object.setPrototypeOf(ShimCustomEvent.prototype, ShimEvent.prototype);
    }
    var map$1 = {};
    var CFG = {};
    [
      "DEBUG",
      "cacheDatabaseInstances",
      "autoName",
      "fullIDLSupport",
      "checkOrigin",
      "cursorPreloadPackSize",
      "UnicodeIDStart",
      "UnicodeIDContinue",
      "registerSCA",
      "avoidAutoShim",
      "win",
      "DEFAULT_DB_SIZE",
      "useSQLiteIndexes",
      "fs",
      "addNonIDBGlobals",
      "replaceNonIDBGlobals",
      "escapeDatabaseName",
      "unescapeDatabaseName",
      "databaseCharacterEscapeList",
      "databaseNameLengthLimit",
      "escapeNFDForDatabaseNames",
      "addSQLiteExtension",
      ["memoryDatabase", function(val) {
        if (!/^(?::memory:|file::memory:(\?(?:(?!#)[\s\S])*)?(#(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?)?$/.test(val)) {
          throw new TypeError('`memoryDatabase` must be the empty string, ":memory:", or a "file::memory:[?queryString][#hash] URL".');
        }
      }],
      "deleteDatabaseFiles",
      "databaseBasePath",
      "sysDatabaseBasePath",
      "sqlBusyTimeout",
      "sqlTrace",
      "sqlProfile"
    ].forEach(function(prop) {
      var validator;
      if (Array.isArray(prop)) {
        var _prop = prop;
        var _prop2 = _slicedToArray(_prop, 2);
        prop = _prop2[0];
        validator = _prop2[1];
      }
      Object.defineProperty(CFG, prop, {
        get: function get() {
          return map$1[prop];
        },
        set: function set2(val) {
          if (validator) {
            validator(val);
          }
          map$1[prop] = val;
        }
      });
    });
    var regex = /[\xC0-\xC5\xC7-\xCF\xD1-\xD6\xD9-\xDD\xE0-\xE5\xE7-\xEF\xF1-\xF6\xF9-\xFD\xFF-\u010F\u0112-\u0125\u0128-\u0130\u0134-\u0137\u0139-\u013E\u0143-\u0148\u014C-\u0151\u0154-\u0165\u0168-\u017E\u01A0\u01A1\u01AF\u01B0\u01CD-\u01DC\u01DE-\u01E3\u01E6-\u01F0\u01F4\u01F5\u01F8-\u021B\u021E\u021F\u0226-\u0233\u0344\u0385\u0386\u0388-\u038A\u038C\u038E-\u0390\u03AA-\u03B0\u03CA-\u03CE\u03D3\u03D4\u0400\u0401\u0403\u0407\u040C-\u040E\u0419\u0439\u0450\u0451\u0453\u0457\u045C-\u045E\u0476\u0477\u04C1\u04C2\u04D0-\u04D3\u04D6\u04D7\u04DA-\u04DF\u04E2-\u04E7\u04EA-\u04F5\u04F8\u04F9\u0622-\u0626\u06C0\u06C2\u06D3\u0929\u0931\u0934\u0958-\u095F\u09CB\u09CC\u09DC\u09DD\u09DF\u0A33\u0A36\u0A59-\u0A5B\u0A5E\u0B48\u0B4B\u0B4C\u0B5C\u0B5D\u0B94\u0BCA-\u0BCC\u0C48\u0CC0\u0CC7\u0CC8\u0CCA\u0CCB\u0D4A-\u0D4C\u0DDA\u0DDC-\u0DDE\u0F43\u0F4D\u0F52\u0F57\u0F5C\u0F69\u0F73\u0F75\u0F76\u0F78\u0F81\u0F93\u0F9D\u0FA2\u0FA7\u0FAC\u0FB9\u1026\u1B06\u1B08\u1B0A\u1B0C\u1B0E\u1B12\u1B3B\u1B3D\u1B40\u1B41\u1B43\u1E00-\u1E99\u1E9B\u1EA0-\u1EF9\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FC1-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEE\u1FF2-\u1FF4\u1FF6-\u1FFC\u212B\u219A\u219B\u21AE\u21CD-\u21CF\u2204\u2209\u220C\u2224\u2226\u2241\u2244\u2247\u2249\u2260\u2262\u226D-\u2271\u2274\u2275\u2278\u2279\u2280\u2281\u2284\u2285\u2288\u2289\u22AC-\u22AF\u22E0-\u22E3\u22EA-\u22ED\u2ADC\u304C\u304E\u3050\u3052\u3054\u3056\u3058\u305A\u305C\u305E\u3060\u3062\u3065\u3067\u3069\u3070\u3071\u3073\u3074\u3076\u3077\u3079\u307A\u307C\u307D\u3094\u309E\u30AC\u30AE\u30B0\u30B2\u30B4\u30B6\u30B8\u30BA\u30BC\u30BE\u30C0\u30C2\u30C5\u30C7\u30C9\u30D0\u30D1\u30D3\u30D4\u30D6\u30D7\u30D9\u30DA\u30DC\u30DD\u30F4\u30F7-\u30FA\u30FE\uAC00-\uD7A3\uFB1D\uFB1F\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4E]|\uD804[\uDC9A\uDC9C\uDCAB\uDD2E\uDD2F\uDF4B\uDF4C]|\uD805[\uDCBB\uDCBC\uDCBE\uDDBA\uDDBB]|\uD806\uDD38|\uD834[\uDD5E-\uDD64\uDDBB-\uDDC0]/;
    function escapeUnmatchedSurrogates(arg) {
      return arg.replace(/((?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])))(?!(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))|(^|(?:(?![\uD800-\uDBFF](?![\uDC00-\uDFFF]))[\s\S]))((?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, function(_, unmatchedHighSurrogate, precedingLow, unmatchedLowSurrogate) {
        if (unmatchedHighSurrogate) {
          return "^2" + unmatchedHighSurrogate.codePointAt().toString(16).padStart(4, "0");
        }
        return (precedingLow || "") + "^3" + unmatchedLowSurrogate.codePointAt().toString(16).padStart(4, "0");
      });
    }
    function escapeNameForSQLiteIdentifier(arg) {
      return "_" + escapeUnmatchedSurrogates(arg.replace(/\^/g, "^^").replace(/\0/g, "^0").replace(/([A-Z])/g, "^$1"));
    }
    function escapeSQLiteStatement(arg) {
      return escapeUnmatchedSurrogates(arg.replace(/\^/g, "^^").replace(/\0/g, "^0"));
    }
    function unescapeSQLiteResponse(arg) {
      return unescapeUnmatchedSurrogates(arg).replace(/(\^+)0/g, function(_, esc) {
        return esc.length % 2 ? esc.slice(1) + "\0" : _;
      }).replace(/\^\^/g, "^");
    }
    function sqlEscape(arg) {
      return arg.replace(/"/g, '""');
    }
    function sqlQuote(arg) {
      return '"' + sqlEscape(arg) + '"';
    }
    function escapeDatabaseNameForSQLAndFiles(db) {
      if (CFG.escapeDatabaseName) {
        return CFG.escapeDatabaseName(escapeSQLiteStatement(db));
      }
      db = "D" + escapeNameForSQLiteIdentifier(db);
      if (CFG.escapeNFDForDatabaseNames !== false) {
        db = db.replace(new RegExp(regex, "gu"), function(expandable) {
          return "^4" + expandable.codePointAt().toString(16).padStart(6, "0");
        });
      }
      if (CFG.databaseCharacterEscapeList !== false) {
        db = db.replace(CFG.databaseCharacterEscapeList ? new RegExp(CFG.databaseCharacterEscapeList, "gu") : /[\0-\x1F"\*\/:<>\?\\\|\x7F]/g, function(n0) {
          return "^1" + n0.charCodeAt().toString(16).padStart(2, "0");
        });
      }
      if (CFG.databaseNameLengthLimit !== false && db.length >= (CFG.databaseNameLengthLimit || 254) - (CFG.addSQLiteExtension !== false ? 7 : 0)) {
        throw new Error("Unexpectedly long database name supplied; length limit required for Node compatibility; passed length: " + db.length + "; length limit setting: " + (CFG.databaseNameLengthLimit || 254) + ".");
      }
      return db + (CFG.addSQLiteExtension !== false ? ".sqlite" : "");
    }
    function unescapeUnmatchedSurrogates(arg) {
      return arg.replace(/(\^+)3(d[0-9a-f]{3})/g, function(_, esc, lowSurr) {
        return esc.length % 2 ? esc.slice(1) + String.fromCodePoint(Number.parseInt(lowSurr, 16)) : _;
      }).replace(/(\^+)2(d[0-9a-f]{3})/g, function(_, esc, highSurr) {
        return esc.length % 2 ? esc.slice(1) + String.fromCodePoint(Number.parseInt(highSurr, 16)) : _;
      });
    }
    function escapeStoreNameForSQL(store) {
      return sqlQuote("S" + escapeNameForSQLiteIdentifier(store));
    }
    function escapeIndexNameForSQL(index) {
      return sqlQuote("I" + escapeNameForSQLiteIdentifier(index));
    }
    function escapeIndexNameForSQLKeyColumn(index) {
      return "I" + escapeNameForSQLiteIdentifier(index);
    }
    function sqlLIKEEscape(str) {
      return sqlEscape(str).replace(/\^/g, "^^");
    }
    function instanceOf(obj, Clss) {
      return Clss[Symbol.hasInstance](obj);
    }
    function isObj(obj) {
      return obj && _typeof$1(obj) === "object";
    }
    function isDate(obj) {
      return isObj(obj) && typeof obj.getDate === "function";
    }
    function isBlob(obj) {
      return isObj(obj) && typeof obj.size === "number" && typeof obj.slice === "function" && !("lastModified" in obj);
    }
    function isFile(obj) {
      return isObj(obj) && typeof obj.name === "string" && typeof obj.slice === "function" && "lastModified" in obj;
    }
    function isBinary(obj) {
      return isObj(obj) && typeof obj.byteLength === "number" && (typeof obj.slice === "function" || typeof obj.getFloat64 === "function");
    }
    function isIterable(obj) {
      return isObj(obj) && typeof obj[Symbol.iterator] === "function";
    }
    function defineOuterInterface(obj, props2) {
      props2.forEach(function(prop) {
        var _o, _mutatorMap;
        var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function() {
          throw new TypeError("Illegal invocation");
        }, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].set = function(val) {
          throw new TypeError("Illegal invocation");
        }, _defineEnumerableProperties(_o, _mutatorMap), _o);
        var desc = Object.getOwnPropertyDescriptor(o, prop);
        Object.defineProperty(obj, prop, desc);
      });
    }
    function defineReadonlyOuterInterface(obj, props2) {
      props2.forEach(function(prop) {
        var _o2, _mutatorMap2;
        var o = (_o2 = {}, _mutatorMap2 = {}, _mutatorMap2[prop] = _mutatorMap2[prop] || {}, _mutatorMap2[prop].get = function() {
          throw new TypeError("Illegal invocation");
        }, _defineEnumerableProperties(_o2, _mutatorMap2), _o2);
        var desc = Object.getOwnPropertyDescriptor(o, prop);
        Object.defineProperty(obj, prop, desc);
      });
    }
    function defineListenerProperties(obj, listeners2) {
      listeners2 = typeof listeners2 === "string" ? [listeners2] : listeners2;
      listeners2.forEach(function(listener) {
        var _o3, _mutatorMap3;
        var o = (_o3 = {}, _mutatorMap3 = {}, _mutatorMap3[listener] = _mutatorMap3[listener] || {}, _mutatorMap3[listener].get = function() {
          return obj["__" + listener];
        }, _mutatorMap3[listener] = _mutatorMap3[listener] || {}, _mutatorMap3[listener].set = function(val) {
          obj["__" + listener] = val;
        }, _defineEnumerableProperties(_o3, _mutatorMap3), _o3);
        var desc = Object.getOwnPropertyDescriptor(o, listener);
        Object.defineProperty(obj, listener, desc);
      });
      listeners2.forEach(function(l) {
        obj[l] = null;
      });
    }
    function defineReadonlyProperties(obj, props2) {
      var getter = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      props2 = typeof props2 === "string" ? [props2] : props2;
      props2.forEach(function(prop) {
        var o;
        if (getter && prop in getter) {
          o = getter[prop];
        } else {
          var _o4, _mutatorMap4;
          Object.defineProperty(obj, "__" + prop, {
            enumerable: false,
            configurable: false,
            writable: true
          });
          o = (_o4 = {}, _mutatorMap4 = {}, _mutatorMap4[prop] = _mutatorMap4[prop] || {}, _mutatorMap4[prop].get = function() {
            return this["__" + prop];
          }, _defineEnumerableProperties(_o4, _mutatorMap4), _o4);
        }
        var desc = Object.getOwnPropertyDescriptor(o, prop);
        Object.defineProperty(obj, prop, desc);
      });
    }
    function isIdentifier(item) {
      var UnicodeIDStart2 = CFG.UnicodeIDStart || "[$A-Z_a-z]";
      var UnicodeIDContinue2 = CFG.UnicodeIDContinue || "[$0-9A-Z_a-z]";
      var IdentifierStart = "(?:" + UnicodeIDStart2 + "|[$_])";
      var IdentifierPart = "(?:" + UnicodeIDContinue2 + "|[$_\u200C\u200D])";
      return new RegExp("^" + IdentifierStart + IdentifierPart + "*$", "u").test(item);
    }
    function isValidKeyPathString(keyPathString) {
      return typeof keyPathString === "string" && (keyPathString === "" || isIdentifier(keyPathString) || keyPathString.split(".").every(function(pathComponent) {
        return isIdentifier(pathComponent);
      }));
    }
    function isValidKeyPath(keyPath) {
      return isValidKeyPathString(keyPath) || Array.isArray(keyPath) && keyPath.length && _toConsumableArray(keyPath).every(function(pathComponent) {
        return isValidKeyPathString(pathComponent);
      });
    }
    function enforceRange(number, type2) {
      number = Math.floor(Number(number));
      var max, min;
      switch (type2) {
        case "unsigned long long": {
          max = 9007199254740991;
          min = 0;
          break;
        }
        case "unsigned long": {
          max = 4294967295;
          min = 0;
          break;
        }
        default:
          throw new Error("Unrecognized type supplied to enforceRange");
      }
      if (!Number.isFinite(number) || number > max || number < min) {
        throw new TypeError("Invalid range: " + number);
      }
      return number;
    }
    function convertToDOMString(v, treatNullAs) {
      return v === null && treatNullAs ? "" : ToString(v);
    }
    function ToString(o) {
      return "" + o;
    }
    function convertToSequenceDOMString(val) {
      if (isIterable(val)) {
        return _toConsumableArray(val).map(function(item) {
          return ToString(item);
        });
      }
      return ToString(val);
    }
    function isNullish(v) {
      return v === null || v === void 0;
    }
    function hasOwn2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    function createEvent(type2, debug2, evInit) {
      var ev2 = new ShimEvent(type2, evInit);
      ev2.debug = debug2;
      return ev2;
    }
    Object.defineProperty(ShimEvent, Symbol.hasInstance, {
      value: function value(obj) {
        return isObj(obj) && "target" in obj && typeof obj.bubbles === "boolean";
      }
    });
    var readonlyProperties$6 = ["oldVersion", "newVersion"];
    function IDBVersionChangeEvent2(type2) {
      ShimEvent.call(this, type2);
      this[Symbol.toStringTag] = "IDBVersionChangeEvent";
      this.toString = function() {
        return "[object IDBVersionChangeEvent]";
      };
      this.__eventInitDict = arguments[1] || {};
    }
    IDBVersionChangeEvent2.prototype = Object.create(ShimEvent.prototype);
    IDBVersionChangeEvent2.prototype[Symbol.toStringTag] = "IDBVersionChangeEventPrototype";
    readonlyProperties$6.forEach(function(prop) {
      var _o, _mutatorMap;
      var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function() {
        if (!(this instanceof IDBVersionChangeEvent2)) {
          throw new TypeError("Illegal invocation");
        }
        return this.__eventInitDict && this.__eventInitDict[prop] || (prop === "oldVersion" ? 0 : null);
      }, _defineEnumerableProperties(_o, _mutatorMap), _o);
      var desc = Object.getOwnPropertyDescriptor(o, prop);
      Object.defineProperty(IDBVersionChangeEvent2.prototype, prop, desc);
    });
    Object.defineProperty(IDBVersionChangeEvent2, Symbol.hasInstance, {
      value: function value(obj) {
        return isObj(obj) && "oldVersion" in obj && typeof obj.defaultPrevented === "boolean";
      }
    });
    Object.defineProperty(IDBVersionChangeEvent2.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: IDBVersionChangeEvent2
    });
    Object.defineProperty(IDBVersionChangeEvent2, "prototype", {
      writable: false
    });
    function createNativeDOMException(name, message) {
      return new DOMException.prototype.constructor(message, name || "DOMException");
    }
    var codes = {
      IndexSizeError: 1,
      HierarchyRequestError: 3,
      WrongDocumentError: 4,
      InvalidCharacterError: 5,
      NoModificationAllowedError: 7,
      NotFoundError: 8,
      NotSupportedError: 9,
      InUseAttributeError: 10,
      InvalidStateError: 11,
      SyntaxError: 12,
      InvalidModificationError: 13,
      NamespaceError: 14,
      InvalidAccessError: 15,
      TypeMismatchError: 17,
      SecurityError: 18,
      NetworkError: 19,
      AbortError: 20,
      URLMismatchError: 21,
      QuotaExceededError: 22,
      TimeoutError: 23,
      InvalidNodeTypeError: 24,
      DataCloneError: 25,
      EncodingError: 0,
      NotReadableError: 0,
      UnknownError: 0,
      ConstraintError: 0,
      DataError: 0,
      TransactionInactiveError: 0,
      ReadOnlyError: 0,
      VersionError: 0,
      OperationError: 0,
      NotAllowedError: 0
    };
    var legacyCodes = {
      INDEX_SIZE_ERR: 1,
      DOMSTRING_SIZE_ERR: 2,
      HIERARCHY_REQUEST_ERR: 3,
      WRONG_DOCUMENT_ERR: 4,
      INVALID_CHARACTER_ERR: 5,
      NO_DATA_ALLOWED_ERR: 6,
      NO_MODIFICATION_ALLOWED_ERR: 7,
      NOT_FOUND_ERR: 8,
      NOT_SUPPORTED_ERR: 9,
      INUSE_ATTRIBUTE_ERR: 10,
      INVALID_STATE_ERR: 11,
      SYNTAX_ERR: 12,
      INVALID_MODIFICATION_ERR: 13,
      NAMESPACE_ERR: 14,
      INVALID_ACCESS_ERR: 15,
      VALIDATION_ERR: 16,
      TYPE_MISMATCH_ERR: 17,
      SECURITY_ERR: 18,
      NETWORK_ERR: 19,
      ABORT_ERR: 20,
      URL_MISMATCH_ERR: 21,
      QUOTA_EXCEEDED_ERR: 22,
      TIMEOUT_ERR: 23,
      INVALID_NODE_TYPE_ERR: 24,
      DATA_CLONE_ERR: 25
    };
    function createNonNativeDOMExceptionClass() {
      function DOMException2(message, name) {
        this[Symbol.toStringTag] = "DOMException";
        this._code = name in codes ? codes[name] : legacyCodes[name] || 0;
        this._name = name || "Error";
        this._message = message === void 0 ? "" : "" + message;
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          writable: true,
          value: this._code
        });
        if (name !== void 0) {
          Object.defineProperty(this, "name", {
            configurable: true,
            enumerable: true,
            writable: true,
            value: this._name
          });
        }
        if (message !== void 0) {
          Object.defineProperty(this, "message", {
            configurable: true,
            enumerable: false,
            writable: true,
            value: this._message
          });
        }
      }
      var DummyDOMException = function DOMException3() {
      };
      DummyDOMException.prototype = Object.create(Error.prototype);
      ["name", "message"].forEach(function(prop) {
        Object.defineProperty(DummyDOMException.prototype, prop, {
          enumerable: true,
          get: function get() {
            if (!(this instanceof DOMException2 || this instanceof DummyDOMException || this instanceof Error)) {
              throw new TypeError("Illegal invocation");
            }
            return this["_" + prop];
          }
        });
      });
      Object.defineProperty(DummyDOMException.prototype, "code", {
        configurable: true,
        enumerable: true,
        get: function get() {
          throw new TypeError("Illegal invocation");
        }
      });
      DOMException2.prototype = new DummyDOMException();
      DOMException2.prototype[Symbol.toStringTag] = "DOMExceptionPrototype";
      Object.defineProperty(DOMException2, "prototype", {
        writable: false
      });
      Object.keys(codes).forEach(function(codeName) {
        Object.defineProperty(DOMException2.prototype, codeName, {
          enumerable: true,
          configurable: false,
          value: codes[codeName]
        });
        Object.defineProperty(DOMException2, codeName, {
          enumerable: true,
          configurable: false,
          value: codes[codeName]
        });
      });
      Object.keys(legacyCodes).forEach(function(codeName) {
        Object.defineProperty(DOMException2.prototype, codeName, {
          enumerable: true,
          configurable: false,
          value: legacyCodes[codeName]
        });
        Object.defineProperty(DOMException2, codeName, {
          enumerable: true,
          configurable: false,
          value: legacyCodes[codeName]
        });
      });
      Object.defineProperty(DOMException2.prototype, "constructor", {
        writable: true,
        configurable: true,
        enumerable: false,
        value: DOMException2
      });
      return DOMException2;
    }
    var ShimNonNativeDOMException = createNonNativeDOMExceptionClass();
    function createNonNativeDOMException(name, message) {
      return new ShimNonNativeDOMException(message, name);
    }
    function logError(name, message, error2) {
      if (CFG.DEBUG) {
        if (error2 && error2.message) {
          error2 = error2.message;
        }
        var method = typeof console.error === "function" ? "error" : "log";
        console[method](name + ": " + message + ". " + (error2 || ""));
        console.trace && console.trace();
      }
    }
    function isErrorOrDOMErrorOrDOMException(obj) {
      return obj && _typeof$1(obj) === "object" && typeof obj.name === "string";
    }
    function findError(args) {
      var err;
      if (args) {
        if (args.length === 1) {
          return args[0];
        }
        var _iterator = _createForOfIteratorHelper(args), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var arg = _step.value;
            if (isErrorOrDOMErrorOrDOMException(arg)) {
              return arg;
            }
            if (arg && typeof arg.message === "string") {
              err = arg;
            }
          }
        } catch (err2) {
          _iterator.e(err2);
        } finally {
          _iterator.f();
        }
      }
      return err;
    }
    function webSQLErrback(webSQLErr) {
      var name, message;
      switch (webSQLErr.code) {
        case 4: {
          name = "QuotaExceededError";
          message = "The operation failed because there was not enough remaining storage space, or the storage quota was reached and the user declined to give more space to the database.";
          break;
        }
        default: {
          name = "UnknownError";
          message = "The operation failed for reasons unrelated to the database itself and not covered by any other errors.";
          break;
        }
      }
      message += " (" + webSQLErr.message + ")--(" + webSQLErr.code + ")";
      var err = createDOMException(name, message);
      err.sqlError = webSQLErr;
      return err;
    }
    var test, useNativeDOMException = false;
    try {
      test = createNativeDOMException("test name", "test message");
      if (isErrorOrDOMErrorOrDOMException(test) && test.name === "test name" && test.message === "test message") {
        useNativeDOMException = true;
      }
    } catch (e) {
    }
    var createDOMException = useNativeDOMException ? function(name, message, error2) {
      logError(name, message, error2);
      return createNativeDOMException(name, message);
    } : function(name, message, error2) {
      logError(name, message, error2);
      return createNonNativeDOMException(name, message);
    };
    var ShimDOMException = useNativeDOMException ? DOMException : ShimNonNativeDOMException;
    var listeners$2 = ["onsuccess", "onerror"];
    var readonlyProperties$5 = ["source", "transaction", "readyState"];
    var doneFlagGetters = ["result", "error"];
    function IDBRequest2() {
      throw new TypeError("Illegal constructor");
    }
    IDBRequest2.__super = function IDBRequest22() {
      var _this = this;
      this[Symbol.toStringTag] = "IDBRequest";
      this.__setOptions({
        legacyOutputDidListenersThrowFlag: true
      });
      doneFlagGetters.forEach(function(prop) {
        Object.defineProperty(_this, "__" + prop, {
          enumerable: false,
          configurable: false,
          writable: true
        });
        Object.defineProperty(_this, prop, {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (!this.__done) {
              throw createDOMException("InvalidStateError", "Can't get " + prop + "; the request is still pending.");
            }
            return this["__" + prop];
          }
        });
      });
      defineReadonlyProperties(this, readonlyProperties$5, {
        readyState: {
          get readyState() {
            return this.__done ? "done" : "pending";
          }
        }
      });
      defineListenerProperties(this, listeners$2);
      this.__result = void 0;
      this.__error = this.__source = this.__transaction = null;
      this.__done = false;
    };
    IDBRequest2.__createInstance = function() {
      return new IDBRequest2.__super();
    };
    IDBRequest2.prototype = EventTargetFactory.createInstance({
      extraProperties: ["debug"]
    });
    IDBRequest2.prototype[Symbol.toStringTag] = "IDBRequestPrototype";
    IDBRequest2.prototype.__getParent = function() {
      if (this.toString() === "[object IDBOpenDBRequest]") {
        return null;
      }
      return this.__transaction;
    };
    defineReadonlyOuterInterface(IDBRequest2.prototype, readonlyProperties$5);
    defineReadonlyOuterInterface(IDBRequest2.prototype, doneFlagGetters);
    defineOuterInterface(IDBRequest2.prototype, listeners$2);
    Object.defineProperty(IDBRequest2.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: IDBRequest2
    });
    IDBRequest2.__super.prototype = IDBRequest2.prototype;
    Object.defineProperty(IDBRequest2, "prototype", {
      writable: false
    });
    var openListeners = ["onblocked", "onupgradeneeded"];
    function IDBOpenDBRequest2() {
      throw new TypeError("Illegal constructor");
    }
    IDBOpenDBRequest2.prototype = Object.create(IDBRequest2.prototype);
    Object.defineProperty(IDBOpenDBRequest2.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: IDBOpenDBRequest2
    });
    var IDBOpenDBRequestAlias = IDBOpenDBRequest2;
    IDBOpenDBRequest2.__createInstance = function() {
      function IDBOpenDBRequest22() {
        IDBRequest2.__super.call(this);
        this[Symbol.toStringTag] = "IDBOpenDBRequest";
        this.__setOptions({
          legacyOutputDidListenersThrowFlag: true,
          extraProperties: ["oldVersion", "newVersion", "debug"]
        });
        defineListenerProperties(this, openListeners);
      }
      IDBOpenDBRequest22.prototype = IDBOpenDBRequestAlias.prototype;
      return new IDBOpenDBRequest22();
    };
    defineOuterInterface(IDBOpenDBRequest2.prototype, openListeners);
    IDBOpenDBRequest2.prototype[Symbol.toStringTag] = "IDBOpenDBRequestPrototype";
    Object.defineProperty(IDBOpenDBRequest2, "prototype", {
      writable: false
    });
    var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : {};
    function isPromise(p) {
      return p && typeof p.then === "function";
    }
    function addReject(prom, reject) {
      prom.then(null, reject);
    }
    var PENDING = 2, FULFILLED = 0, REJECTED = 1;
    function SyncPromise(fn) {
      var self2 = this;
      self2.v = 0;
      self2.s = PENDING;
      self2.c = [[], []];
      function transist(val, state) {
        self2.v = val;
        self2.s = state;
        self2.c[state].forEach(function(fn2) {
          fn2(val);
        });
        if (self2.c[state].length)
          self2.c = null;
      }
      function resolve2(val) {
        if (!self2.c)
          ;
        else if (isPromise(val)) {
          addReject(val.then(resolve2), reject);
        } else {
          transist(val, FULFILLED);
        }
      }
      function reject(reason) {
        if (!self2.c)
          ;
        else if (isPromise(reason)) {
          addReject(reason.then(reject), reject);
        } else {
          transist(reason, REJECTED);
        }
      }
      try {
        fn(resolve2, reject);
      } catch (err) {
        reject(err);
      }
    }
    var prot = SyncPromise.prototype;
    prot.then = function(cb, errBack) {
      var self2 = this;
      return new SyncPromise(function(resolve2, reject) {
        var rej = typeof errBack === "function" ? errBack : reject;
        function settle() {
          try {
            resolve2(cb ? cb(self2.v) : self2.v);
          } catch (e) {
            rej(e);
          }
        }
        if (self2.s === FULFILLED) {
          settle();
        } else if (self2.s === REJECTED) {
          rej(self2.v);
        } else {
          self2.c[FULFILLED].push(settle);
          self2.c[REJECTED].push(rej);
        }
      });
    };
    prot["catch"] = function(cb) {
      var self2 = this;
      return new SyncPromise(function(resolve2, reject) {
        function settle() {
          try {
            resolve2(cb(self2.v));
          } catch (e) {
            reject(e);
          }
        }
        if (self2.s === REJECTED) {
          settle();
        } else if (self2.s === FULFILLED) {
          resolve2(self2.v);
        } else {
          self2.c[REJECTED].push(settle);
          self2.c[FULFILLED].push(resolve2);
        }
      });
    };
    SyncPromise.all = function(promises) {
      return new SyncPromise(function(resolve2, reject, l) {
        l = promises.length;
        var newPromises = [];
        if (!l) {
          resolve2(newPromises);
          return;
        }
        promises.forEach(function(p, i2) {
          if (isPromise(p)) {
            addReject(p.then(function(res) {
              newPromises[i2] = res;
              --l || resolve2(newPromises);
            }), reject);
          } else {
            newPromises[i2] = p;
            --l || resolve2(promises);
          }
        });
      });
    };
    SyncPromise.race = function(promises) {
      var resolved = false;
      return new SyncPromise(function(resolve2, reject) {
        promises.some(function(p, i2) {
          if (isPromise(p)) {
            addReject(p.then(function(res) {
              if (resolved) {
                return;
              }
              resolve2(res);
              resolved = true;
            }), reject);
          } else {
            resolve2(p);
            resolved = true;
            return true;
          }
        });
      });
    };
    SyncPromise.resolve = function(val) {
      return new SyncPromise(function(resolve2, reject) {
        resolve2(val);
      });
    };
    SyncPromise.reject = function(val) {
      return new SyncPromise(function(resolve2, reject) {
        reject(val);
      });
    };
    var syncPromiseCommonjs = SyncPromise;
    function cmp2(first, second) {
      var encodedKey1 = _encode(first);
      var encodedKey2 = _encode(second);
      var result = encodedKey1 > encodedKey2 ? 1 : encodedKey1 === encodedKey2 ? 0 : -1;
      if (CFG.DEBUG) {
        var decodedKey1 = _decode(encodedKey1);
        var decodedKey2 = _decode(encodedKey2);
        if (_typeof$1(first) === "object") {
          first = JSON.stringify(first);
          decodedKey1 = JSON.stringify(decodedKey1);
        }
        if (_typeof$1(second) === "object") {
          second = JSON.stringify(second);
          decodedKey2 = JSON.stringify(decodedKey2);
        }
        if (decodedKey1 !== first) {
          console.warn(first + " was incorrectly encoded as " + decodedKey1);
        }
        if (decodedKey2 !== second) {
          console.warn(second + " was incorrectly encoded as " + decodedKey2);
        }
      }
      return result;
    }
    var keyTypeToEncodedChar = {
      invalid: 100,
      number: 200,
      date: 300,
      string: 400,
      binary: 500,
      array: 600
    };
    var keyTypes = Object.keys(keyTypeToEncodedChar);
    keyTypes.forEach(function(k) {
      keyTypeToEncodedChar[k] = String.fromCodePoint(keyTypeToEncodedChar[k]);
    });
    var encodedCharToKeyType = keyTypes.reduce(function(o, k) {
      o[keyTypeToEncodedChar[k]] = k;
      return o;
    }, {});
    var signValues = ["negativeInfinity", "bigNegative", "smallNegative", "smallPositive", "bigPositive", "positiveInfinity"];
    var types = {
      invalid: {
        encode: function encode2(key) {
          return keyTypeToEncodedChar.invalid + "-";
        },
        decode: function decode22(key) {
          return void 0;
        }
      },
      number: {
        encode: function encode2(key) {
          var key32 = key === Number.MIN_VALUE ? "0." + "0".repeat(214) + "2" : Math.abs(key).toString(32);
          var decimalIndex = key32.indexOf(".");
          key32 = decimalIndex !== -1 ? key32.replace(".", "") : key32;
          var significantDigitIndex = key32.search(/(?:(?!0)[\s\S])/);
          key32 = key32.slice(significantDigitIndex);
          var sign, exponent, mantissa;
          if (Number.isFinite(Number(key))) {
            if (key < 0) {
              if (key > -1) {
                sign = signValues.indexOf("smallNegative");
                exponent = padBase32Exponent(significantDigitIndex);
                mantissa = flipBase32(padBase32Mantissa(key32));
              } else {
                sign = signValues.indexOf("bigNegative");
                exponent = flipBase32(padBase32Exponent(decimalIndex !== -1 ? decimalIndex : key32.length));
                mantissa = flipBase32(padBase32Mantissa(key32));
              }
            } else if (key < 1) {
              sign = signValues.indexOf("smallPositive");
              exponent = flipBase32(padBase32Exponent(significantDigitIndex));
              mantissa = padBase32Mantissa(key32);
            } else {
              sign = signValues.indexOf("bigPositive");
              exponent = padBase32Exponent(decimalIndex !== -1 ? decimalIndex : key32.length);
              mantissa = padBase32Mantissa(key32);
            }
          } else {
            exponent = zeros(2);
            mantissa = zeros(11);
            sign = signValues.indexOf(key > 0 ? "positiveInfinity" : "negativeInfinity");
          }
          return keyTypeToEncodedChar.number + "-" + sign + exponent + mantissa;
        },
        decode: function decode22(key) {
          var sign = Number(key.slice(2, 3));
          var exponent = key.slice(3, 5);
          var mantissa = key.slice(5, 16);
          switch (signValues[sign]) {
            case "negativeInfinity":
              return Number.NEGATIVE_INFINITY;
            case "positiveInfinity":
              return Number.POSITIVE_INFINITY;
            case "bigPositive":
              return pow32(mantissa, exponent);
            case "smallPositive":
              exponent = negate(flipBase32(exponent));
              return pow32(mantissa, exponent);
            case "smallNegative":
              exponent = negate(exponent);
              mantissa = flipBase32(mantissa);
              return -pow32(mantissa, exponent);
            case "bigNegative":
              exponent = flipBase32(exponent);
              mantissa = flipBase32(mantissa);
              return -pow32(mantissa, exponent);
            default:
              throw new Error("Invalid number.");
          }
        }
      },
      string: {
        encode: function encode2(key, inArray) {
          if (inArray) {
            key = key.replace(/((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, "-$1") + " ";
          }
          return keyTypeToEncodedChar.string + "-" + key;
        },
        decode: function decode22(key, inArray) {
          key = key.slice(2);
          if (inArray) {
            key = key.slice(0, -1).replace(/\x2D((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, "$1");
          }
          return key;
        }
      },
      array: {
        encode: function encode2(key) {
          var encoded = [];
          var _iterator = _createForOfIteratorHelper(key.entries()), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 2), i2 = _step$value[0], item = _step$value[1];
              var encodedItem = _encode(item, true);
              encoded[i2] = encodedItem;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          encoded.push(keyTypeToEncodedChar.invalid + "-");
          return keyTypeToEncodedChar.array + "-" + JSON.stringify(encoded);
        },
        decode: function decode22(key) {
          var decoded = JSON.parse(key.slice(2));
          decoded.pop();
          for (var i2 = 0; i2 < decoded.length; i2++) {
            var item = decoded[i2];
            var decodedItem = _decode(item, true);
            decoded[i2] = decodedItem;
          }
          return decoded;
        }
      },
      date: {
        encode: function encode2(key) {
          return keyTypeToEncodedChar.date + "-" + key.toJSON();
        },
        decode: function decode22(key) {
          return new Date(key.slice(2));
        }
      },
      binary: {
        encode: function encode2(key) {
          return keyTypeToEncodedChar.binary + "-" + (key.byteLength ? _toConsumableArray(getCopyBytesHeldByBufferSource(key)).map(function(b) {
            return String(b).padStart(3, "0");
          }) : "");
        },
        decode: function decode22(key) {
          var k = key.slice(2);
          var arr = k.length ? k.split(",").map(function(s) {
            return Number.parseInt(s);
          }) : [];
          var buffer = new ArrayBuffer(arr.length);
          var uint8 = new Uint8Array(buffer);
          uint8.set(arr);
          return buffer;
        }
      }
    };
    function padBase32Exponent(n) {
      n = n.toString(32);
      return n.length === 1 ? "0" + n : n;
    }
    function padBase32Mantissa(s) {
      return (s + zeros(11)).slice(0, 11);
    }
    function flipBase32(encoded) {
      var flipped = "";
      var _iterator2 = _createForOfIteratorHelper(encoded), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var ch = _step2.value;
          flipped += (31 - Number.parseInt(ch, 32)).toString(32);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return flipped;
    }
    function pow32(mantissa, exponent) {
      exponent = Number.parseInt(exponent, 32);
      if (exponent < 0) {
        return roundToPrecision(Number.parseInt(mantissa, 32) * Math.pow(32, exponent - 10));
      }
      if (exponent < 11) {
        var whole = mantissa.slice(0, exponent);
        whole = Number.parseInt(whole, 32);
        var fraction = mantissa.slice(exponent);
        fraction = Number.parseInt(fraction, 32) * Math.pow(32, exponent - 11);
        return roundToPrecision(whole + fraction);
      }
      var expansion = mantissa + zeros(exponent - 11);
      return Number.parseInt(expansion, 32);
    }
    function roundToPrecision(num) {
      var precision = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16;
      return Number.parseFloat(num.toPrecision(precision));
    }
    function zeros(n) {
      return "0".repeat(n);
    }
    function negate(s) {
      return "-" + s;
    }
    function getKeyType(key) {
      if (Array.isArray(key))
        return "array";
      if (isDate(key))
        return "date";
      if (isBinary(key))
        return "binary";
      var keyType = _typeof$1(key);
      return ["string", "number"].includes(keyType) ? keyType : "invalid";
    }
    function convertValueToKey(input, seen) {
      return convertValueToKeyValueDecoded(input, seen, false, true);
    }
    function convertValueToMultiEntryKey(input) {
      return convertValueToKeyValueDecoded(input, null, true, true);
    }
    function getCopyBytesHeldByBufferSource(O) {
      var offset = 0;
      var length = 0;
      if (ArrayBuffer.isView(O)) {
        var arrayBuffer = O.buffer;
        if (arrayBuffer === void 0) {
          throw new TypeError("Could not copy the bytes held by a buffer source as the buffer was undefined.");
        }
        offset = O.byteOffset;
        length = O.byteLength;
      } else {
        length = O.byteLength;
      }
      return new Uint8Array(O.buffer || O, offset, length);
    }
    function convertValueToKeyValueDecoded(input, seen, multiEntry, fullKeys) {
      seen = seen || [];
      if (seen.includes(input)) {
        return {
          type: "array",
          invalid: true,
          message: "An array key cannot be circular"
        };
      }
      var type2 = getKeyType(input);
      var ret = {
        type: type2,
        value: input
      };
      switch (type2) {
        case "number": {
          if (Number.isNaN(input)) {
            return {
              type: "NaN",
              invalid: true
            };
          }
          return ret;
        }
        case "string": {
          return ret;
        }
        case "binary": {
          var octets = getCopyBytesHeldByBufferSource(input);
          return {
            type: "binary",
            value: octets
          };
        }
        case "array": {
          var len = input.length;
          seen.push(input);
          var keys3 = [];
          for (var i2 = 0; i2 < len; i2++) {
            if (!multiEntry && !Object.prototype.hasOwnProperty.call(input, i2)) {
              return {
                type: type2,
                invalid: true,
                message: "Does not have own index property"
              };
            }
            try {
              var _ret = function() {
                var entry = input[i2];
                var key = convertValueToKeyValueDecoded(entry, seen, false, fullKeys);
                if (key.invalid) {
                  if (multiEntry) {
                    return "continue";
                  }
                  return {
                    v: {
                      type: type2,
                      invalid: true,
                      message: "Bad array entry value-to-key conversion"
                    }
                  };
                }
                if (!multiEntry || !fullKeys && keys3.every(function(k) {
                  return cmp2(k, key.value) !== 0;
                }) || fullKeys && keys3.every(function(k) {
                  return cmp2(k, key) !== 0;
                })) {
                  keys3.push(fullKeys ? key : key.value);
                }
              }();
              if (_ret === "continue")
                continue;
              if (_typeof$1(_ret) === "object")
                return _ret.v;
            } catch (err) {
              if (!multiEntry) {
                throw err;
              }
            }
          }
          return {
            type: type2,
            value: keys3
          };
        }
        case "date": {
          if (!Number.isNaN(input.getTime())) {
            return fullKeys ? {
              type: type2,
              value: input.getTime()
            } : {
              type: type2,
              value: new Date(input.getTime())
            };
          }
          return {
            type: type2,
            invalid: true,
            message: "Not a valid date"
          };
        }
        case "invalid":
        default: {
          var _type = input === null ? "null" : _typeof$1(input);
          return {
            type: _type,
            invalid: true,
            message: "Not a valid key; type " + _type
          };
        }
      }
    }
    function convertValueToMultiEntryKeyDecoded(key, fullKeys) {
      return convertValueToKeyValueDecoded(key, null, true, fullKeys);
    }
    function convertValueToKeyRethrowingAndIfInvalid(input, seen) {
      var key = convertValueToKey(input, seen);
      if (key.invalid) {
        throw createDOMException("DataError", key.message || "Not a valid key; type: " + key.type);
      }
      return key;
    }
    function extractKeyFromValueUsingKeyPath(value, keyPath, multiEntry) {
      return extractKeyValueDecodedFromValueUsingKeyPath(value, keyPath, multiEntry, true);
    }
    function evaluateKeyPathOnValue(value, keyPath, multiEntry) {
      return evaluateKeyPathOnValueToDecodedValue(value, keyPath);
    }
    function extractKeyValueDecodedFromValueUsingKeyPath(value, keyPath, multiEntry, fullKeys) {
      var r = evaluateKeyPathOnValueToDecodedValue(value, keyPath);
      if (r.failure) {
        return r;
      }
      if (!multiEntry) {
        return convertValueToKeyValueDecoded(r.value, null, false, fullKeys);
      }
      return convertValueToMultiEntryKeyDecoded(r.value, fullKeys);
    }
    function evaluateKeyPathOnValueToDecodedValue(value, keyPath, multiEntry, fullKeys) {
      if (Array.isArray(keyPath)) {
        var result = [];
        return keyPath.some(function(item) {
          var key = evaluateKeyPathOnValueToDecodedValue(value, item);
          if (key.failure) {
            return true;
          }
          result.push(key.value);
          return false;
        }) ? {
          failure: true
        } : {
          value: result
        };
      }
      if (keyPath === "") {
        return {
          value
        };
      }
      var identifiers = keyPath.split(".");
      return identifiers.some(function(idntfr, i2) {
        if (idntfr === "length" && (typeof value === "string" || Array.isArray(value))) {
          value = value.length;
        } else if (isBlob(value)) {
          switch (idntfr) {
            case "size":
            case "type":
              value = value[idntfr];
              break;
          }
        } else if (isFile(value)) {
          switch (idntfr) {
            case "name":
            case "lastModified":
              value = value[idntfr];
              break;
            case "lastModifiedDate":
              value = new Date(value.lastModified);
              break;
          }
        } else if (!isObj(value) || !Object.prototype.hasOwnProperty.call(value, idntfr)) {
          return true;
        } else {
          value = value[idntfr];
          return value === void 0;
        }
        return false;
      }) ? {
        failure: true
      } : {
        value
      };
    }
    function injectKeyIntoValueUsingKeyPath(value, key, keyPath) {
      var identifiers = keyPath.split(".");
      var last = identifiers.pop();
      identifiers.forEach(function(identifier) {
        var hop = Object.prototype.hasOwnProperty.call(value, identifier);
        if (!hop) {
          value[identifier] = {};
        }
        value = value[identifier];
      });
      value[last] = key;
    }
    function checkKeyCouldBeInjectedIntoValue(value, keyPath) {
      var identifiers = keyPath.split(".");
      identifiers.pop();
      var _iterator3 = _createForOfIteratorHelper(identifiers), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var identifier = _step3.value;
          if (!isObj(value)) {
            return false;
          }
          var hop = Object.prototype.hasOwnProperty.call(value, identifier);
          if (!hop) {
            return true;
          }
          value = value[identifier];
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return isObj(value);
    }
    function isKeyInRange(key, range, checkCached) {
      var lowerMatch = range.lower === void 0;
      var upperMatch = range.upper === void 0;
      var encodedKey = _encode(key, true);
      var lower = checkCached ? range.__lowerCached : _encode(range.lower, true);
      var upper = checkCached ? range.__upperCached : _encode(range.upper, true);
      if (range.lower !== void 0) {
        if (range.lowerOpen && encodedKey > lower) {
          lowerMatch = true;
        }
        if (!range.lowerOpen && encodedKey >= lower) {
          lowerMatch = true;
        }
      }
      if (range.upper !== void 0) {
        if (range.upperOpen && encodedKey < upper) {
          upperMatch = true;
        }
        if (!range.upperOpen && encodedKey <= upper) {
          upperMatch = true;
        }
      }
      return lowerMatch && upperMatch;
    }
    function isMultiEntryMatch(encodedEntry, encodedKey) {
      var keyType = encodedCharToKeyType[encodedKey.slice(0, 1)];
      if (keyType === "array") {
        return encodedKey.indexOf(encodedEntry) > 1;
      }
      return encodedKey === encodedEntry;
    }
    function findMultiEntryMatches(keyEntry, range) {
      var matches = [];
      if (Array.isArray(keyEntry)) {
        var _iterator4 = _createForOfIteratorHelper(keyEntry), _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
            var key = _step4.value;
            if (Array.isArray(key)) {
              if (range && range.lower === range.upper) {
                continue;
              }
              if (key.length === 1) {
                key = key[0];
              } else {
                var nested = findMultiEntryMatches(key, range);
                if (nested.length > 0) {
                  matches.push(key);
                }
                continue;
              }
            }
            if (isNullish(range) || isKeyInRange(key, range, true)) {
              matches.push(key);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else if (isNullish(range) || isKeyInRange(keyEntry, range, true)) {
        matches.push(keyEntry);
      }
      return matches;
    }
    function convertKeyToValue(key) {
      var type2 = key.type, value = key.value;
      switch (type2) {
        case "number":
        case "string": {
          return value;
        }
        case "array": {
          var array = [];
          var len = value.length;
          var index = 0;
          while (index < len) {
            var entry = convertKeyToValue(value[index]);
            array[index] = entry;
            index++;
          }
          return array;
        }
        case "date": {
          return new Date(value);
        }
        case "binary": {
          var _len = value.length;
          var buffer = new ArrayBuffer(_len);
          var uint8 = new Uint8Array(buffer, value.byteOffset || 0, value.byteLength);
          uint8.set(value);
          return buffer;
        }
        case "invalid":
        default:
          throw new Error("Bad key");
      }
    }
    function _encode(key, inArray) {
      if (key === void 0) {
        return null;
      }
      return types[getKeyType(key)].encode(key, inArray);
    }
    function _decode(key, inArray) {
      if (typeof key !== "string") {
        return void 0;
      }
      return types[encodedCharToKeyType[key.slice(0, 1)]].decode(key, inArray);
    }
    function roundTrip(key, inArray) {
      return _decode(_encode(key, inArray), inArray);
    }
    var MAX_ALLOWED_CURRENT_NUMBER = 9007199254740992;
    function getCurrentNumber(tx, store, func, sqlFailCb) {
      tx.executeSql('SELECT "currNum" FROM __sys__ WHERE "name" = ?', [escapeSQLiteStatement(store.__currentName)], function(tx2, data) {
        if (data.rows.length !== 1) {
          func(1);
        } else {
          func(data.rows.item(0).currNum);
        }
      }, function(tx2, error2) {
        sqlFailCb(createDOMException("DataError", "Could not get the auto increment value for key", error2));
      });
    }
    function assignCurrentNumber(tx, store, num, successCb, failCb) {
      var sql = 'UPDATE __sys__ SET "currNum" = ? WHERE "name" = ?';
      var sqlValues = [num, escapeSQLiteStatement(store.__currentName)];
      CFG.DEBUG && console.log(sql, sqlValues);
      tx.executeSql(sql, sqlValues, function(tx2, data) {
        successCb(num);
      }, function(tx2, err) {
        failCb(createDOMException("UnknownError", "Could not set the auto increment value for key", err));
      });
    }
    function setCurrentNumber(tx, store, num, successCb, failCb) {
      num = num === MAX_ALLOWED_CURRENT_NUMBER ? num + 2 : num + 1;
      return assignCurrentNumber(tx, store, num, successCb, failCb);
    }
    function generateKeyForStore(tx, store, cb, sqlFailCb) {
      getCurrentNumber(tx, store, function(key) {
        if (key > MAX_ALLOWED_CURRENT_NUMBER) {
          cb("failure");
          return;
        }
        setCurrentNumber(tx, store, key, function() {
          cb(null, key, key);
        }, sqlFailCb);
      }, sqlFailCb);
    }
    function possiblyUpdateKeyGenerator(tx, store, key, successCb, sqlFailCb) {
      if (typeof key !== "number" || key < 1) {
        successCb();
      } else {
        getCurrentNumber(tx, store, function(cn) {
          var value = Math.floor(Math.min(key, MAX_ALLOWED_CURRENT_NUMBER));
          var useNewKeyForAutoInc = value >= cn;
          if (useNewKeyForAutoInc) {
            setCurrentNumber(tx, store, value, function() {
              successCb(cn);
            }, sqlFailCb);
          } else {
            successCb();
          }
        }, sqlFailCb);
      }
    }
    var Key = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      encode: _encode,
      decode: _decode,
      roundTrip,
      convertKeyToValue,
      convertValueToKeyValueDecoded,
      convertValueToMultiEntryKeyDecoded,
      convertValueToKey,
      convertValueToMultiEntryKey,
      convertValueToKeyRethrowingAndIfInvalid,
      extractKeyFromValueUsingKeyPath,
      evaluateKeyPathOnValue,
      extractKeyValueDecodedFromValueUsingKeyPath,
      injectKeyIntoValueUsingKeyPath,
      checkKeyCouldBeInjectedIntoValue,
      isMultiEntryMatch,
      isKeyInRange,
      findMultiEntryMatches,
      assignCurrentNumber,
      generateKeyForStore,
      possiblyUpdateKeyGenerator
    });
    var readonlyProperties$4 = ["lower", "upper", "lowerOpen", "upperOpen"];
    function IDBKeyRange2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBKeyRangeAlias = IDBKeyRange2;
    IDBKeyRange2.__createInstance = function(lower, upper, lowerOpen, upperOpen) {
      function IDBKeyRange22() {
        this[Symbol.toStringTag] = "IDBKeyRange";
        if (lower === void 0 && upper === void 0) {
          throw createDOMException("DataError", "Both arguments to the key range method cannot be undefined");
        }
        var lowerConverted, upperConverted;
        if (lower !== void 0) {
          lowerConverted = roundTrip(lower);
          convertValueToKeyRethrowingAndIfInvalid(lower);
        }
        if (upper !== void 0) {
          upperConverted = roundTrip(upper);
          convertValueToKeyRethrowingAndIfInvalid(upper);
        }
        if (lower !== void 0 && upper !== void 0 && lower !== upper) {
          if (_encode(lower) > _encode(upper)) {
            throw createDOMException("DataError", "`lower` must not be greater than `upper` argument in `bound()` call.");
          }
        }
        this.__lower = lowerConverted;
        this.__upper = upperConverted;
        this.__lowerOpen = Boolean(lowerOpen);
        this.__upperOpen = Boolean(upperOpen);
      }
      IDBKeyRange22.prototype = IDBKeyRangeAlias.prototype;
      return new IDBKeyRange22();
    };
    IDBKeyRange2.prototype.includes = function(key) {
      if (!isObj(this) || typeof this.__lowerOpen !== "boolean") {
        throw new TypeError("Illegal invocation");
      }
      if (!arguments.length) {
        throw new TypeError("IDBKeyRange.includes requires a key argument");
      }
      convertValueToKeyRethrowingAndIfInvalid(key);
      return isKeyInRange(key, this);
    };
    IDBKeyRange2.only = function(value) {
      if (!arguments.length) {
        throw new TypeError("IDBKeyRange.only requires a value argument");
      }
      return IDBKeyRange2.__createInstance(value, value, false, false);
    };
    IDBKeyRange2.lowerBound = function(value) {
      if (!arguments.length) {
        throw new TypeError("IDBKeyRange.lowerBound requires a value argument");
      }
      return IDBKeyRange2.__createInstance(value, void 0, arguments[1], true);
    };
    IDBKeyRange2.upperBound = function(value) {
      if (!arguments.length) {
        throw new TypeError("IDBKeyRange.upperBound requires a value argument");
      }
      return IDBKeyRange2.__createInstance(void 0, value, true, arguments[1]);
    };
    IDBKeyRange2.bound = function(lower, upper) {
      if (arguments.length <= 1) {
        throw new TypeError("IDBKeyRange.bound requires lower and upper arguments");
      }
      return IDBKeyRange2.__createInstance(lower, upper, arguments[2], arguments[3]);
    };
    IDBKeyRange2.prototype[Symbol.toStringTag] = "IDBKeyRangePrototype";
    readonlyProperties$4.forEach(function(prop) {
      var _o, _mutatorMap;
      Object.defineProperty(IDBKeyRange2.prototype, "__" + prop, {
        enumerable: false,
        configurable: false,
        writable: true
      });
      var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function() {
        if (!isObj(this) || typeof this.__lowerOpen !== "boolean") {
          throw new TypeError("Illegal invocation");
        }
        return this["__" + prop];
      }, _defineEnumerableProperties(_o, _mutatorMap), _o);
      var desc = Object.getOwnPropertyDescriptor(o, prop);
      Object.defineProperty(IDBKeyRange2.prototype, prop, desc);
    });
    Object.defineProperty(IDBKeyRange2, Symbol.hasInstance, {
      value: function value(obj) {
        return isObj(obj) && "upper" in obj && typeof obj.lowerOpen === "boolean";
      }
    });
    Object.defineProperty(IDBKeyRange2, "prototype", {
      writable: false
    });
    function setSQLForKeyRange(range, quotedKeyColumnName, sql, sqlValues, addAnd, checkCached) {
      if (range && (range.lower !== void 0 || range.upper !== void 0)) {
        if (addAnd)
          sql.push("AND");
        var encodedLowerKey, encodedUpperKey;
        var hasLower = range.lower !== void 0;
        var hasUpper = range.upper !== void 0;
        if (hasLower) {
          encodedLowerKey = checkCached ? range.__lowerCached : _encode(range.lower);
        }
        if (hasUpper) {
          encodedUpperKey = checkCached ? range.__upperCached : _encode(range.upper);
        }
        if (hasLower) {
          sqlValues.push(escapeSQLiteStatement(encodedLowerKey));
          if (hasUpper && encodedLowerKey === encodedUpperKey && !range.lowerOpen && !range.upperOpen) {
            sql.push(quotedKeyColumnName, "=", "?");
            return;
          }
          sql.push(quotedKeyColumnName, range.lowerOpen ? ">" : ">=", "?");
        }
        hasLower && hasUpper && sql.push("AND");
        if (hasUpper) {
          sql.push(quotedKeyColumnName, range.upperOpen ? "<" : "<=", "?");
          sqlValues.push(escapeSQLiteStatement(encodedUpperKey));
        }
      }
    }
    function convertValueToKeyRange(value, nullDisallowed) {
      if (instanceOf(value, IDBKeyRange2)) {
        if (value.toString() !== "[object IDBKeyRange]") {
          return IDBKeyRange2.__createInstance(value.lower, value.upper, value.lowerOpen, value.upperOpen);
        }
        return value;
      }
      if (isNullish(value)) {
        if (nullDisallowed) {
          throw createDOMException("DataError", "No key or range was specified");
        }
        return void 0;
      }
      convertValueToKeyRethrowingAndIfInvalid(value);
      return IDBKeyRange2.only(value);
    }
    var _DOMStringList$protot;
    var cleanInterface = false;
    var testObject = {
      test: true
    };
    if (Object.defineProperty) {
      try {
        Object.defineProperty(testObject, "test", {
          enumerable: false
        });
        if (testObject.test) {
          cleanInterface = true;
        }
      } catch (e) {
      }
    }
    var DOMStringList = function DOMStringList2() {
      throw new TypeError("Illegal constructor");
    };
    DOMStringList.prototype = (_DOMStringList$protot = {
      constructor: DOMStringList,
      contains: function contains(str) {
        if (!arguments.length) {
          throw new TypeError("DOMStringList.contains must be supplied a value");
        }
        return this._items.includes(str);
      },
      item: function item(key) {
        if (!arguments.length) {
          throw new TypeError("DOMStringList.item must be supplied a value");
        }
        if (key < 0 || key >= this.length || !Number.isInteger(key)) {
          return null;
        }
        return this._items[key];
      },
      clone: function clone2() {
        var stringList = DOMStringList.__createInstance();
        stringList._items = this._items.slice();
        stringList._length = this.length;
        stringList.addIndexes();
        return stringList;
      },
      addIndexes: function addIndexes() {
        for (var i2 = 0; i2 < this._items.length; i2++) {
          this[i2] = this._items[i2];
        }
      },
      sortList: function sortList() {
        this._items.sort();
        this.addIndexes();
        return this._items;
      },
      forEach: function forEach(cb, thisArg) {
        this._items.forEach(cb, thisArg);
      },
      map: function map2(cb, thisArg) {
        return this._items.map(cb, thisArg);
      },
      indexOf: function indexOf(str) {
        return this._items.indexOf(str);
      },
      push: function push(item) {
        this._items.push(item);
        this._length++;
        this.sortList();
      },
      splice: function splice() {
        var _this$_items;
        (_this$_items = this._items).splice.apply(_this$_items, arguments);
        this._length = this._items.length;
        for (var i2 in this) {
          if (i2 === String(Number.parseInt(i2))) {
            delete this[i2];
          }
        }
        this.sortList();
      }
    }, _defineProperty(_DOMStringList$protot, Symbol.toStringTag, "DOMStringListPrototype"), _defineProperty(_DOMStringList$protot, Symbol.iterator, /* @__PURE__ */ regeneratorRuntime.mark(function _callee() {
      var i2;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i2 = 0;
            case 1:
              if (!(i2 < this._items.length)) {
                _context.next = 6;
                break;
              }
              _context.next = 4;
              return this._items[i2++];
            case 4:
              _context.next = 1;
              break;
            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })), _DOMStringList$protot);
    Object.defineProperty(DOMStringList, Symbol.hasInstance, {
      value: function value(obj) {
        return Object.prototype.toString.call(obj) === "DOMStringListPrototype";
      }
    });
    var DOMStringListAlias = DOMStringList;
    Object.defineProperty(DOMStringList, "__createInstance", {
      value: function value() {
        var DOMStringList2 = function DOMStringList3() {
          this.toString = function() {
            return "[object DOMStringList]";
          };
          Object.defineProperty(this, "length", {
            enumerable: true,
            get: function get() {
              return this._length;
            }
          });
          this._items = [];
          this._length = 0;
        };
        DOMStringList2.prototype = DOMStringListAlias.prototype;
        return new DOMStringList2();
      }
    });
    if (cleanInterface) {
      Object.defineProperty(DOMStringList, "prototype", {
        writable: false
      });
      var nonenumerableReadonly = ["addIndexes", "sortList", "forEach", "map", "indexOf", "push", "splice", "constructor", "__createInstance"];
      nonenumerableReadonly.forEach(function(nonenumerableReadonly2) {
        Object.defineProperty(DOMStringList.prototype, nonenumerableReadonly2, {
          enumerable: false
        });
      });
      Object.defineProperty(DOMStringList.prototype, "length", {
        configurable: true,
        enumerable: true,
        get: function get() {
          throw new TypeError("Illegal invocation");
        }
      });
      var nonenumerableWritable = ["_items", "_length"];
      nonenumerableWritable.forEach(function(nonenumerableWritable2) {
        Object.defineProperty(DOMStringList.prototype, nonenumerableWritable2, {
          enumerable: false,
          writable: true
        });
      });
    }
    var uniqueID = 0;
    var listeners$1 = ["onabort", "oncomplete", "onerror"];
    var readonlyProperties$3 = ["objectStoreNames", "mode", "db", "error"];
    function IDBTransaction2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBTransactionAlias = IDBTransaction2;
    IDBTransaction2.__createInstance = function(db, storeNames, mode) {
      function IDBTransaction22() {
        var _this = this;
        var me = this;
        me[Symbol.toStringTag] = "IDBTransaction";
        defineReadonlyProperties(me, readonlyProperties$3);
        me.__id = ++uniqueID;
        me.__active = true;
        me.__running = false;
        me.__errored = false;
        me.__requests = [];
        me.__objectStoreNames = storeNames;
        me.__mode = mode;
        me.__db = db;
        me.__error = null;
        me.__setOptions({
          legacyOutputDidListenersThrowFlag: true
        });
        readonlyProperties$3.forEach(function(readonlyProp) {
          Object.defineProperty(_this, readonlyProp, {
            configurable: true
          });
        });
        defineListenerProperties(this, listeners$1);
        me.__storeHandles = {};
        setTimeout(function() {
          me.__executeRequests();
        }, 0);
      }
      IDBTransaction22.prototype = IDBTransactionAlias.prototype;
      return new IDBTransaction22();
    };
    IDBTransaction2.prototype = EventTargetFactory.createInstance({
      defaultSync: true,
      extraProperties: ["complete"]
    });
    IDBTransaction2.prototype.__transFinishedCb = function(err, cb) {
      cb(Boolean(err));
    };
    IDBTransaction2.prototype.__executeRequests = function() {
      var me = this;
      if (me.__running) {
        CFG.DEBUG && console.log("Looks like the request set is already running", me.mode);
        return;
      }
      me.__running = true;
      me.db.__db[me.mode === "readonly" ? "readTransaction" : "transaction"](function executeRequests(tx) {
        me.__tx = tx;
        var q = null, i2 = -1;
        function success(result, req) {
          if (me.__errored || me.__requestsFinished) {
            return;
          }
          if (req) {
            q.req = req;
          }
          if (q.req.__done) {
            return;
          }
          q.req.__done = true;
          q.req.__result = result;
          q.req.__error = null;
          me.__active = true;
          var e = createEvent("success");
          q.req.dispatchEvent(e);
          if (e.__legacyOutputDidListenersThrowError) {
            logError("Error", "An error occurred in a success handler attached to request chain", e.__legacyOutputDidListenersThrowError);
            me.__abortTransaction(createDOMException("AbortError", "A request was aborted (in user handler after success)."));
            return;
          }
          executeNextRequest();
        }
        function error2() {
          if (me.__errored || me.__requestsFinished) {
            return;
          }
          if (q.req && q.req.__done) {
            return;
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var err = findError(args);
          if (!q.req) {
            me.__abortTransaction(err);
            return;
          }
          q.req.__done = true;
          q.req.__error = err;
          q.req.__result = void 0;
          q.req.addLateEventListener("error", function(e2) {
            if (e2.cancelable && e2.defaultPrevented && !e2.__legacyOutputDidListenersThrowError) {
              executeNextRequest();
            }
          });
          q.req.addDefaultEventListener("error", function() {
            me.__abortTransaction(q.req.__error);
          });
          me.__active = true;
          var e = createEvent("error", err, {
            bubbles: true,
            cancelable: true
          });
          q.req.dispatchEvent(e);
          if (e.__legacyOutputDidListenersThrowError) {
            logError("Error", "An error occurred in an error handler attached to request chain", e.__legacyOutputDidListenersThrowError);
            e.preventDefault();
            me.__abortTransaction(createDOMException("AbortError", "A request was aborted (in user handler after error)."));
          }
        }
        function executeNextRequest() {
          if (me.__errored || me.__requestsFinished) {
            return;
          }
          i2++;
          if (i2 >= me.__requests.length) {
            me.__requests = [];
            if (me.__active) {
              requestsFinished();
            }
          } else {
            try {
              q = me.__requests[i2];
              if (!q.req) {
                q.op(tx, q.args, executeNextRequest, error2);
                return;
              }
              if (q.req.__done) {
                return;
              }
              q.op(tx, q.args, success, error2, executeNextRequest);
            } catch (e) {
              error2(e);
            }
          }
        }
        executeNextRequest();
      }, function webSQLError(webSQLErr) {
        if (webSQLErr === true) {
          return;
        }
        var err = webSQLErrback(webSQLErr);
        me.__abortTransaction(err);
      }, function() {
        if (me.__transFinishedCb !== IDBTransaction2.prototype.__transFinishedCb) {
          return;
        }
        if (!me.__transactionEndCallback && !me.__requestsFinished) {
          me.__transactionFinished = true;
          return;
        }
        if (me.__transactionEndCallback && !me.__completed) {
          me.__transFinishedCb(me.__errored, me.__transactionEndCallback);
        }
      }, function(currentTask, err, done, rollback, commit) {
        if (currentTask.readOnly || err) {
          return true;
        }
        me.__transFinishedCb = function(err2, cb) {
          if (err2) {
            rollback(err2, cb);
          } else {
            commit(cb);
          }
        };
        if (me.__transactionEndCallback && !me.__completed) {
          me.__transFinishedCb(me.__errored, me.__transactionEndCallback);
        }
        return false;
      });
      function requestsFinished() {
        me.__active = false;
        me.__requestsFinished = true;
        function complete() {
          me.__completed = true;
          CFG.DEBUG && console.log("Transaction completed");
          var evt = createEvent("complete");
          try {
            me.__internal = true;
            me.dispatchEvent(evt);
            me.__internal = false;
            me.dispatchEvent(createEvent("__complete"));
          } catch (e) {
            me.__internal = false;
            me.__errored = true;
            throw e;
          } finally {
            me.__storeHandles = {};
          }
        }
        if (me.mode === "readwrite") {
          if (me.__transactionFinished) {
            complete();
            return;
          }
          me.__transactionEndCallback = complete;
          return;
        }
        if (me.mode === "readonly") {
          complete();
          return;
        }
        var ev2 = createEvent("__beforecomplete");
        ev2.complete = complete;
        me.dispatchEvent(ev2);
      }
    };
    IDBTransaction2.prototype.__createRequest = function(source) {
      var me = this;
      var request2 = IDBRequest2.__createInstance();
      request2.__source = source !== void 0 ? source : me.db;
      request2.__transaction = me;
      return request2;
    };
    IDBTransaction2.prototype.__addToTransactionQueue = function(callback, args, source) {
      var request2 = this.__createRequest(source);
      this.__pushToQueue(request2, callback, args);
      return request2;
    };
    IDBTransaction2.prototype.__addNonRequestToTransactionQueue = function(callback, args, source) {
      this.__pushToQueue(null, callback, args);
    };
    IDBTransaction2.prototype.__pushToQueue = function(request2, callback, args) {
      this.__assertActive();
      this.__requests.push({
        op: callback,
        args,
        req: request2
      });
    };
    IDBTransaction2.prototype.__assertActive = function() {
      if (!this.__active) {
        throw createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
      }
    };
    IDBTransaction2.prototype.__assertWritable = function() {
      if (this.mode === "readonly") {
        throw createDOMException("ReadOnlyError", "The transaction is read only");
      }
    };
    IDBTransaction2.prototype.__assertVersionChange = function() {
      IDBTransaction2.__assertVersionChange(this);
    };
    IDBTransaction2.prototype.objectStore = function(objectStoreName) {
      var me = this;
      if (!(me instanceof IDBTransaction2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No object store name was specified");
      }
      IDBTransaction2.__assertNotFinished(me);
      if (me.__objectStoreNames.indexOf(objectStoreName) === -1) {
        throw createDOMException("NotFoundError", objectStoreName + " is not participating in this transaction");
      }
      var store = me.db.__objectStores[objectStoreName];
      if (!store) {
        throw createDOMException("NotFoundError", objectStoreName + " does not exist in " + me.db.name);
      }
      if (!me.__storeHandles[objectStoreName] || me.__storeHandles[objectStoreName].__pendingDelete || me.__storeHandles[objectStoreName].__deleted) {
        me.__storeHandles[objectStoreName] = IDBObjectStore2.__clone(store, me);
      }
      return me.__storeHandles[objectStoreName];
    };
    IDBTransaction2.prototype.__abortTransaction = function(err) {
      var me = this;
      logError("Error", "An error occurred in a transaction", err);
      if (me.__errored) {
        return;
      }
      me.__errored = true;
      if (me.mode === "versionchange") {
        me.db.__version = me.db.__oldVersion;
        me.db.__objectStoreNames = me.db.__oldObjectStoreNames;
        me.__objectStoreNames = me.db.__oldObjectStoreNames;
        Object.values(me.db.__objectStores).concat(Object.values(me.__storeHandles)).forEach(function(store) {
          if ("__pendingName" in store && me.db.__oldObjectStoreNames.indexOf(store.__pendingName) > -1) {
            store.__name = store.__originalName;
          }
          store.__indexNames = store.__oldIndexNames;
          delete store.__pendingDelete;
          Object.values(store.__indexes).concat(Object.values(store.__indexHandles)).forEach(function(index) {
            if ("__pendingName" in index && store.__oldIndexNames.indexOf(index.__pendingName) > -1) {
              index.__name = index.__originalName;
            }
            delete index.__pendingDelete;
          });
        });
      }
      me.__active = false;
      if (err !== null) {
        me.__error = err;
      }
      if (me.__requestsFinished) {
        setTimeout(function() {
          throw err;
        }, 0);
      }
      function abort(tx, errOrResult) {
        if (!tx) {
          CFG.DEBUG && console.log("Rollback not possible due to missing transaction", me);
        } else if (errOrResult && typeof errOrResult.code === "number") {
          CFG.DEBUG && console.log("Rollback erred; feature is probably not supported as per WebSQL", me);
        } else {
          CFG.DEBUG && console.log("Rollback succeeded", me);
        }
        me.dispatchEvent(createEvent("__preabort"));
        me.__requests.filter(function(q, i2, arr) {
          return q.req && !q.req.__done && [i2, -1].includes(arr.map(function(q2) {
            return q2.req;
          }).lastIndexOf(q.req));
        }).reduce(function(promises, q) {
          return promises.then(function() {
            q.req.__done = true;
            q.req.__result = void 0;
            q.req.__error = createDOMException("AbortError", "A request was aborted (an unfinished request).");
            var reqEvt = createEvent("error", q.req.__error, {
              bubbles: true,
              cancelable: true
            });
            return new syncPromiseCommonjs(function(resolve2) {
              setTimeout(function() {
                q.req.dispatchEvent(reqEvt);
                resolve2();
              });
            });
          });
        }, syncPromiseCommonjs.resolve()).then(function() {
          var evt = createEvent("abort", err, {
            bubbles: true,
            cancelable: false
          });
          setTimeout(function() {
            me.__abortFinished = true;
            me.dispatchEvent(evt);
            me.__storeHandles = {};
            me.dispatchEvent(createEvent("__abort"));
          });
          return void 0;
        })["catch"](function(err2) {
          console.log("Abort error");
          throw err2;
        });
      }
      me.__transFinishedCb(true, function(rollback) {
        if (rollback && me.__tx) {
          if (me.mode === "readwrite") {
            if (me.__transactionFinished) {
              abort();
              return;
            }
            me.__transactionEndCallback = abort;
            return;
          }
          try {
            me.__tx.executeSql("ROLLBACK", [], abort, abort);
          } catch (err2) {
            abort();
          }
        } else {
          abort(null, {
            code: 0
          });
        }
      });
    };
    IDBTransaction2.prototype.abort = function() {
      var me = this;
      if (!(me instanceof IDBTransaction2)) {
        throw new TypeError("Illegal invocation");
      }
      CFG.DEBUG && console.log("The transaction was aborted", me);
      IDBTransaction2.__assertNotFinished(me);
      me.__abortTransaction(null);
    };
    IDBTransaction2.prototype[Symbol.toStringTag] = "IDBTransactionPrototype";
    IDBTransaction2.__assertVersionChange = function(tx) {
      if (!tx || tx.mode !== "versionchange") {
        throw createDOMException("InvalidStateError", "Not a version transaction");
      }
    };
    IDBTransaction2.__assertNotVersionChange = function(tx) {
      if (tx && tx.mode === "versionchange") {
        throw createDOMException("InvalidStateError", "Cannot be called during a version transaction");
      }
    };
    IDBTransaction2.__assertNotFinished = function(tx) {
      if (!tx || tx.__completed || tx.__abortFinished || tx.__errored) {
        throw createDOMException("InvalidStateError", "Transaction finished by commit or abort");
      }
    };
    IDBTransaction2.__assertNotFinishedObjectStoreMethod = function(tx) {
      try {
        IDBTransaction2.__assertNotFinished(tx);
      } catch (err) {
        if (tx && !tx.__completed && !tx.__abortFinished) {
          throw createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
        }
        throw err;
      }
    };
    IDBTransaction2.__assertActive = function(tx) {
      if (!tx || !tx.__active) {
        throw createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
      }
    };
    IDBTransaction2.prototype.__getParent = function() {
      return this.db;
    };
    defineOuterInterface(IDBTransaction2.prototype, listeners$1);
    defineReadonlyOuterInterface(IDBTransaction2.prototype, readonlyProperties$3);
    Object.defineProperty(IDBTransaction2.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: IDBTransaction2
    });
    Object.defineProperty(IDBTransaction2, "prototype", {
      writable: false
    });
    var typeson$1 = { exports: {} };
    (function(module2, exports2) {
      (function(global2, factory) {
        module2.exports = factory();
      })(commonjsGlobal$1, function() {
        function _typeof2(obj) {
          "@babel/helpers - typeof";
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof2 = function _typeof3(obj2) {
              return typeof obj2;
            };
          } else {
            _typeof2 = function _typeof3(obj2) {
              return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            };
          }
          return _typeof2(obj);
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties2(target, props2) {
          for (var i2 = 0; i2 < props2.length; i2++) {
            var descriptor = props2[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties2(Constructor, staticProps);
          return Constructor;
        }
        function _defineProperty2(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function ownKeys2(object, enumerableOnly) {
          var keys22 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys22.push.apply(keys22, symbols);
          }
          return keys22;
        }
        function _objectSpread22(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = arguments[i2] != null ? arguments[i2] : {};
            if (i2 % 2) {
              ownKeys2(Object(source), true).forEach(function(key) {
                _defineProperty2(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys2(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _slicedToArray2(arr, i2) {
          return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
        }
        function _toConsumableArray2(arr) {
          return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
        }
        function _arrayWithoutHoles2(arr) {
          if (Array.isArray(arr))
            return _arrayLikeToArray2(arr);
        }
        function _arrayWithHoles2(arr) {
          if (Array.isArray(arr))
            return arr;
        }
        function _iterableToArray2(iter2) {
          if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter2))
            return Array.from(iter2);
        }
        function _iterableToArrayLimit2(arr, i2) {
          if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
            return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i2 && _arr.length === i2)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null)
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        function _unsupportedIterableToArray2(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray2(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray2(o, minLen);
        }
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
            arr2[i2] = arr[i2];
          }
          return arr2;
        }
        function _nonIterableSpread2() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _nonIterableRest2() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var TypesonPromise = function TypesonPromise2(f) {
          _classCallCheck2(this, TypesonPromise2);
          this.p = new Promise(f);
        };
        TypesonPromise.__typeson__type__ = "TypesonPromise";
        if (typeof Symbol !== "undefined") {
          TypesonPromise.prototype[Symbol.toStringTag] = "TypesonPromise";
        }
        TypesonPromise.prototype.then = function(onFulfilled, onRejected) {
          var _this = this;
          return new TypesonPromise(function(typesonResolve, typesonReject) {
            _this.p.then(function(res) {
              typesonResolve(onFulfilled ? onFulfilled(res) : res);
            })["catch"](function(res) {
              return onRejected ? onRejected(res) : Promise.reject(res);
            }).then(typesonResolve, typesonReject);
          });
        };
        TypesonPromise.prototype["catch"] = function(onRejected) {
          return this.then(null, onRejected);
        };
        TypesonPromise.resolve = function(v) {
          return new TypesonPromise(function(typesonResolve) {
            typesonResolve(v);
          });
        };
        TypesonPromise.reject = function(v) {
          return new TypesonPromise(function(typesonResolve, typesonReject) {
            typesonReject(v);
          });
        };
        ["all", "race", "allSettled"].forEach(function(meth) {
          TypesonPromise[meth] = function(promArr) {
            return new TypesonPromise(function(typesonResolve, typesonReject) {
              Promise[meth](promArr.map(function(prom) {
                return prom && prom.constructor && prom.constructor.__typeson__type__ === "TypesonPromise" ? prom.p : prom;
              })).then(typesonResolve, typesonReject);
            });
          };
        });
        var _ref = {}, toStr = _ref.toString, hasOwn$1 = {}.hasOwnProperty, getProto2 = Object.getPrototypeOf, fnToString = hasOwn$1.toString;
        function isThenable(v, catchCheck) {
          return isObject(v) && typeof v.then === "function" && (!catchCheck || typeof v["catch"] === "function");
        }
        function toStringTag2(val) {
          return toStr.call(val).slice(8, -1);
        }
        function hasConstructorOf(a, b) {
          if (!a || _typeof2(a) !== "object") {
            return false;
          }
          var proto = getProto2(a);
          if (!proto) {
            return b === null;
          }
          var Ctor = hasOwn$1.call(proto, "constructor") && proto.constructor;
          if (typeof Ctor !== "function") {
            return b === null;
          }
          if (b === Ctor) {
            return true;
          }
          if (b !== null && fnToString.call(Ctor) === fnToString.call(b)) {
            return true;
          }
          if (typeof b === "function" && typeof Ctor.__typeson__type__ === "string" && Ctor.__typeson__type__ === b.__typeson__type__) {
            return true;
          }
          return false;
        }
        function isPlainObject(val) {
          if (!val || toStringTag2(val) !== "Object") {
            return false;
          }
          var proto = getProto2(val);
          if (!proto) {
            return true;
          }
          return hasConstructorOf(val, Object);
        }
        function isUserObject(val) {
          if (!val || toStringTag2(val) !== "Object") {
            return false;
          }
          var proto = getProto2(val);
          if (!proto) {
            return true;
          }
          return hasConstructorOf(val, Object) || isUserObject(proto);
        }
        function isObject(v) {
          return v && _typeof2(v) === "object";
        }
        function escapeKeyPathComponent(keyPathComponent) {
          return keyPathComponent.replace(/~/g, "~0").replace(/\./g, "~1");
        }
        function unescapeKeyPathComponent(keyPathComponent) {
          return keyPathComponent.replace(/~1/g, ".").replace(/~0/g, "~");
        }
        function getByKeyPath2(obj, keyPath) {
          if (keyPath === "") {
            return obj;
          }
          var period = keyPath.indexOf(".");
          if (period > -1) {
            var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];
            return innerObj === void 0 ? void 0 : getByKeyPath2(innerObj, keyPath.slice(period + 1));
          }
          return obj[unescapeKeyPathComponent(keyPath)];
        }
        function setAtKeyPath(obj, keyPath, value) {
          if (keyPath === "") {
            return value;
          }
          var period = keyPath.indexOf(".");
          if (period > -1) {
            var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];
            return setAtKeyPath(innerObj, keyPath.slice(period + 1), value);
          }
          obj[unescapeKeyPathComponent(keyPath)] = value;
          return obj;
        }
        function getJSONType(value) {
          return value === null ? "null" : Array.isArray(value) ? "array" : _typeof2(value);
        }
        function _await(value, then, direct) {
          if (direct) {
            return then ? then(value) : value;
          }
          if (!value || !value.then) {
            value = Promise.resolve(value);
          }
          return then ? value.then(then) : value;
        }
        var keys3 = Object.keys, isArray2 = Array.isArray, hasOwn22 = {}.hasOwnProperty, internalStateObjPropsToIgnore = ["type", "replaced", "iterateIn", "iterateUnsetNumeric"];
        function _async(f) {
          return function() {
            for (var args = [], i2 = 0; i2 < arguments.length; i2++) {
              args[i2] = arguments[i2];
            }
            try {
              return Promise.resolve(f.apply(this, args));
            } catch (e) {
              return Promise.reject(e);
            }
          };
        }
        function _invoke(body, then) {
          var result = body();
          if (result && result.then) {
            return result.then(then);
          }
          return then(result);
        }
        function nestedPathsFirst(a, b) {
          if (a.keypath === "") {
            return -1;
          }
          var as = a.keypath.match(/\./g) || 0;
          var bs = b.keypath.match(/\./g) || 0;
          if (as) {
            as = as.length;
          }
          if (bs) {
            bs = bs.length;
          }
          return as > bs ? -1 : as < bs ? 1 : a.keypath < b.keypath ? -1 : a.keypath > b.keypath;
        }
        var Typeson2 = /* @__PURE__ */ function() {
          function Typeson3(options) {
            _classCallCheck2(this, Typeson3);
            this.options = options;
            this.plainObjectReplacers = [];
            this.nonplainObjectReplacers = [];
            this.revivers = {};
            this.types = {};
          }
          _createClass2(Typeson3, [{
            key: "stringify",
            value: function stringify(obj, replacer, space, opts) {
              opts = _objectSpread22(_objectSpread22(_objectSpread22({}, this.options), opts), {}, {
                stringification: true
              });
              var encapsulated = this.encapsulate(obj, null, opts);
              if (isArray2(encapsulated)) {
                return JSON.stringify(encapsulated[0], replacer, space);
              }
              return encapsulated.then(function(res) {
                return JSON.stringify(res, replacer, space);
              });
            }
          }, {
            key: "stringifySync",
            value: function stringifySync(obj, replacer, space, opts) {
              return this.stringify(obj, replacer, space, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: true
              }));
            }
          }, {
            key: "stringifyAsync",
            value: function stringifyAsync(obj, replacer, space, opts) {
              return this.stringify(obj, replacer, space, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: false
              }));
            }
          }, {
            key: "parse",
            value: function parse(text, reviver, opts) {
              opts = _objectSpread22(_objectSpread22(_objectSpread22({}, this.options), opts), {}, {
                parse: true
              });
              return this.revive(JSON.parse(text, reviver), opts);
            }
          }, {
            key: "parseSync",
            value: function parseSync(text, reviver, opts) {
              return this.parse(text, reviver, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: true
              }));
            }
          }, {
            key: "parseAsync",
            value: function parseAsync(text, reviver, opts) {
              return this.parse(text, reviver, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: false
              }));
            }
          }, {
            key: "specialTypeNames",
            value: function specialTypeNames(obj, stateObj) {
              var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              opts.returnTypeNames = true;
              return this.encapsulate(obj, stateObj, opts);
            }
          }, {
            key: "rootTypeName",
            value: function rootTypeName(obj, stateObj) {
              var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              opts.iterateNone = true;
              return this.encapsulate(obj, stateObj, opts);
            }
          }, {
            key: "encapsulate",
            value: function encapsulate(obj, stateObj, opts) {
              var checkPromises = _async(function(ret2, promisesData) {
                return _await(Promise.all(promisesData.map(function(pd) {
                  return pd[1].p;
                })), function(promResults) {
                  return _await(Promise.all(promResults.map(_async(function(promResult) {
                    var _exit = false;
                    var newPromisesData = [];
                    var _promisesData$splice = promisesData.splice(0, 1), _promisesData$splice2 = _slicedToArray2(_promisesData$splice, 1), prData = _promisesData$splice2[0];
                    var _prData = _slicedToArray2(prData, 7), keyPath = _prData[0], cyclic2 = _prData[2], stateObj2 = _prData[3], parentObj = _prData[4], key = _prData[5], detectedType = _prData[6];
                    var encaps = _encapsulate(keyPath, promResult, cyclic2, stateObj2, newPromisesData, true, detectedType);
                    var isTypesonPromise = hasConstructorOf(encaps, TypesonPromise);
                    return _invoke(function() {
                      if (keyPath && isTypesonPromise) {
                        return _await(encaps.p, function(encaps2) {
                          parentObj[key] = encaps2;
                          _exit = true;
                          return checkPromises(ret2, newPromisesData);
                        });
                      }
                    }, function(_result) {
                      if (_exit)
                        return _result;
                      if (keyPath) {
                        parentObj[key] = encaps;
                      } else if (isTypesonPromise) {
                        ret2 = encaps.p;
                      } else {
                        ret2 = encaps;
                      }
                      return checkPromises(ret2, newPromisesData);
                    });
                  }))), function() {
                    return ret2;
                  });
                });
              });
              opts = _objectSpread22(_objectSpread22({
                sync: true
              }, this.options), opts);
              var _opts = opts, sync2 = _opts.sync;
              var that = this, types2 = {}, refObjs = [], refKeys = [], promisesDataRoot = [];
              var cyclic = "cyclic" in opts ? opts.cyclic : true;
              var _opts2 = opts, encapsulateObserver = _opts2.encapsulateObserver;
              var ret = _encapsulate("", obj, cyclic, stateObj || {}, promisesDataRoot);
              function finish(ret2) {
                var typeNames = Object.values(types2);
                if (opts.iterateNone) {
                  if (typeNames.length) {
                    return typeNames[0];
                  }
                  return Typeson3.getJSONType(ret2);
                }
                if (typeNames.length) {
                  if (opts.returnTypeNames) {
                    return _toConsumableArray2(new Set(typeNames));
                  }
                  if (!ret2 || !isPlainObject(ret2) || hasOwn22.call(ret2, "$types")) {
                    ret2 = {
                      $: ret2,
                      $types: {
                        $: types2
                      }
                    };
                  } else {
                    ret2.$types = types2;
                  }
                } else if (isObject(ret2) && hasOwn22.call(ret2, "$types")) {
                  ret2 = {
                    $: ret2,
                    $types: true
                  };
                }
                if (opts.returnTypeNames) {
                  return false;
                }
                return ret2;
              }
              function _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, cb) {
                Object.assign(stateObj2, ownKeysObj);
                var vals = internalStateObjPropsToIgnore.map(function(prop) {
                  var tmp = stateObj2[prop];
                  delete stateObj2[prop];
                  return tmp;
                });
                cb();
                internalStateObjPropsToIgnore.forEach(function(prop, i2) {
                  stateObj2[prop] = vals[i2];
                });
              }
              function _encapsulate(keypath, value, cyclic2, stateObj2, promisesData, resolvingTypesonPromise, detectedType) {
                var ret2;
                var observerData = {};
                var $typeof = _typeof2(value);
                var runObserver = encapsulateObserver ? function(obj2) {
                  var type2 = detectedType || stateObj2.type || Typeson3.getJSONType(value);
                  encapsulateObserver(Object.assign(obj2 || observerData, {
                    keypath,
                    value,
                    cyclic: cyclic2,
                    stateObj: stateObj2,
                    promisesData,
                    resolvingTypesonPromise,
                    awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise)
                  }, {
                    type: type2
                  }));
                } : null;
                if (["string", "boolean", "number", "undefined"].includes($typeof)) {
                  if (value === void 0 || Number.isNaN(value) || value === Number.NEGATIVE_INFINITY || value === Number.POSITIVE_INFINITY) {
                    ret2 = stateObj2.replaced ? value : replace(keypath, value, stateObj2, promisesData, false, resolvingTypesonPromise, runObserver);
                    if (ret2 !== value) {
                      observerData = {
                        replaced: ret2
                      };
                    }
                  } else {
                    ret2 = value;
                  }
                  if (runObserver) {
                    runObserver();
                  }
                  return ret2;
                }
                if (value === null) {
                  if (runObserver) {
                    runObserver();
                  }
                  return value;
                }
                if (cyclic2 && !stateObj2.iterateIn && !stateObj2.iterateUnsetNumeric && value && _typeof2(value) === "object") {
                  var refIndex = refObjs.indexOf(value);
                  if (refIndex < 0) {
                    if (cyclic2 === true) {
                      refObjs.push(value);
                      refKeys.push(keypath);
                    }
                  } else {
                    types2[keypath] = "#";
                    if (runObserver) {
                      runObserver({
                        cyclicKeypath: refKeys[refIndex]
                      });
                    }
                    return "#" + refKeys[refIndex];
                  }
                }
                var isPlainObj = isPlainObject(value);
                var isArr = isArray2(value);
                var replaced = (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj2.replaced) || stateObj2.iterateIn ? value : replace(keypath, value, stateObj2, promisesData, isPlainObj || isArr, null, runObserver);
                var clone2;
                if (replaced !== value) {
                  ret2 = replaced;
                  observerData = {
                    replaced
                  };
                } else {
                  if (keypath === "" && hasConstructorOf(value, TypesonPromise)) {
                    promisesData.push([keypath, value, cyclic2, stateObj2, void 0, void 0, stateObj2.type]);
                    ret2 = value;
                  } else if (isArr && stateObj2.iterateIn !== "object" || stateObj2.iterateIn === "array") {
                    clone2 = new Array(value.length);
                    observerData = {
                      clone: clone2
                    };
                  } else if (!["function", "symbol"].includes(_typeof2(value)) && !("toJSON" in value) && !hasConstructorOf(value, TypesonPromise) && !hasConstructorOf(value, Promise) && !hasConstructorOf(value, ArrayBuffer) || isPlainObj || stateObj2.iterateIn === "object") {
                    clone2 = {};
                    if (stateObj2.addLength) {
                      clone2.length = value.length;
                    }
                    observerData = {
                      clone: clone2
                    };
                  } else {
                    ret2 = value;
                  }
                }
                if (runObserver) {
                  runObserver();
                }
                if (opts.iterateNone) {
                  return clone2 || ret2;
                }
                if (!clone2) {
                  return ret2;
                }
                if (stateObj2.iterateIn) {
                  var _loop = function _loop3(key2) {
                    var ownKeysObj = {
                      ownKeys: hasOwn22.call(value, key2)
                    };
                    _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, function() {
                      var kp = keypath + (keypath ? "." : "") + escapeKeyPathComponent(key2);
                      var val = _encapsulate(kp, value[key2], Boolean(cyclic2), stateObj2, promisesData, resolvingTypesonPromise);
                      if (hasConstructorOf(val, TypesonPromise)) {
                        promisesData.push([kp, val, Boolean(cyclic2), stateObj2, clone2, key2, stateObj2.type]);
                      } else if (val !== void 0) {
                        clone2[key2] = val;
                      }
                    });
                  };
                  for (var key in value) {
                    _loop(key);
                  }
                  if (runObserver) {
                    runObserver({
                      endIterateIn: true,
                      end: true
                    });
                  }
                } else {
                  keys3(value).forEach(function(key2) {
                    var kp = keypath + (keypath ? "." : "") + escapeKeyPathComponent(key2);
                    var ownKeysObj = {
                      ownKeys: true
                    };
                    _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, function() {
                      var val = _encapsulate(kp, value[key2], Boolean(cyclic2), stateObj2, promisesData, resolvingTypesonPromise);
                      if (hasConstructorOf(val, TypesonPromise)) {
                        promisesData.push([kp, val, Boolean(cyclic2), stateObj2, clone2, key2, stateObj2.type]);
                      } else if (val !== void 0) {
                        clone2[key2] = val;
                      }
                    });
                  });
                  if (runObserver) {
                    runObserver({
                      endIterateOwn: true,
                      end: true
                    });
                  }
                }
                if (stateObj2.iterateUnsetNumeric) {
                  var vl = value.length;
                  var _loop2 = function _loop22(i3) {
                    if (!(i3 in value)) {
                      var kp = keypath + (keypath ? "." : "") + i3;
                      var ownKeysObj = {
                        ownKeys: false
                      };
                      _adaptBuiltinStateObjectProperties(stateObj2, ownKeysObj, function() {
                        var val = _encapsulate(kp, void 0, Boolean(cyclic2), stateObj2, promisesData, resolvingTypesonPromise);
                        if (hasConstructorOf(val, TypesonPromise)) {
                          promisesData.push([kp, val, Boolean(cyclic2), stateObj2, clone2, i3, stateObj2.type]);
                        } else if (val !== void 0) {
                          clone2[i3] = val;
                        }
                      });
                    }
                  };
                  for (var i2 = 0; i2 < vl; i2++) {
                    _loop2(i2);
                  }
                  if (runObserver) {
                    runObserver({
                      endIterateUnsetNumeric: true,
                      end: true
                    });
                  }
                }
                return clone2;
              }
              function replace(keypath, value, stateObj2, promisesData, plainObject, resolvingTypesonPromise, runObserver) {
                var replacers = plainObject ? that.plainObjectReplacers : that.nonplainObjectReplacers;
                var i2 = replacers.length;
                while (i2--) {
                  var replacer = replacers[i2];
                  if (replacer.test(value, stateObj2)) {
                    var type2 = replacer.type;
                    if (that.revivers[type2]) {
                      var existing = types2[keypath];
                      types2[keypath] = existing ? [type2].concat(existing) : type2;
                    }
                    Object.assign(stateObj2, {
                      type: type2,
                      replaced: true
                    });
                    if ((sync2 || !replacer.replaceAsync) && !replacer.replace) {
                      if (runObserver) {
                        runObserver({
                          typeDetected: true
                        });
                      }
                      return _encapsulate(keypath, value, cyclic && "readonly", stateObj2, promisesData, resolvingTypesonPromise, type2);
                    }
                    if (runObserver) {
                      runObserver({
                        replacing: true
                      });
                    }
                    var replaceMethod = sync2 || !replacer.replaceAsync ? "replace" : "replaceAsync";
                    return _encapsulate(keypath, replacer[replaceMethod](value, stateObj2), cyclic && "readonly", stateObj2, promisesData, resolvingTypesonPromise, type2);
                  }
                }
                return value;
              }
              return promisesDataRoot.length ? sync2 && opts.throwOnBadSyncType ? function() {
                throw new TypeError("Sync method requested but async result obtained");
              }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync2 && opts.throwOnBadSyncType ? function() {
                throw new TypeError("Async method requested but sync result obtained");
              }() : opts.stringification && sync2 ? [finish(ret)] : sync2 ? finish(ret) : Promise.resolve(finish(ret));
            }
          }, {
            key: "encapsulateSync",
            value: function encapsulateSync(obj, stateObj, opts) {
              return this.encapsulate(obj, stateObj, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: true
              }));
            }
          }, {
            key: "encapsulateAsync",
            value: function encapsulateAsync(obj, stateObj, opts) {
              return this.encapsulate(obj, stateObj, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: false
              }));
            }
          }, {
            key: "revive",
            value: function revive(obj, opts) {
              var types2 = obj && obj.$types;
              if (!types2) {
                return obj;
              }
              if (types2 === true) {
                return obj.$;
              }
              opts = _objectSpread22(_objectSpread22({
                sync: true
              }, this.options), opts);
              var _opts3 = opts, sync2 = _opts3.sync;
              var keyPathResolutions = [];
              var stateObj = {};
              var ignore$Types = true;
              if (types2.$ && isPlainObject(types2.$)) {
                obj = obj.$;
                types2 = types2.$;
                ignore$Types = false;
              }
              var that = this;
              function executeReviver(type2, val) {
                var _ref2 = that.revivers[type2] || [], _ref22 = _slicedToArray2(_ref2, 1), reviver = _ref22[0];
                if (!reviver) {
                  throw new Error("Unregistered type: " + type2);
                }
                if (sync2 && !("revive" in reviver)) {
                  return val;
                }
                return reviver[sync2 && reviver.revive ? "revive" : !sync2 && reviver.reviveAsync ? "reviveAsync" : "revive"](val, stateObj);
              }
              function revivePlainObjects() {
                var plainObjectTypes = [];
                Object.entries(types2).forEach(function(_ref3) {
                  var _ref4 = _slicedToArray2(_ref3, 2), keypath = _ref4[0], type2 = _ref4[1];
                  if (type2 === "#") {
                    return;
                  }
                  [].concat(type2).forEach(function(type22) {
                    var _ref5 = that.revivers[type22] || [null, {}], _ref6 = _slicedToArray2(_ref5, 2), plain = _ref6[1].plain;
                    if (!plain) {
                      return;
                    }
                    plainObjectTypes.push({
                      keypath,
                      type: type22
                    });
                    delete types2[keypath];
                  });
                });
                if (!plainObjectTypes.length) {
                  return void 0;
                }
                return plainObjectTypes.sort(nestedPathsFirst).reduce(function reducer(possibleTypesonPromise2, _ref7) {
                  var keypath = _ref7.keypath, type2 = _ref7.type;
                  if (isThenable(possibleTypesonPromise2)) {
                    return possibleTypesonPromise2.then(function(val2) {
                      return reducer(val2, {
                        keypath,
                        type: type2
                      });
                    });
                  }
                  var val = getByKeyPath2(obj, keypath);
                  val = executeReviver(type2, val);
                  if (hasConstructorOf(val, TypesonPromise)) {
                    return val.then(function(v) {
                      var newVal2 = setAtKeyPath(obj, keypath, v);
                      if (newVal2 === v) {
                        obj = newVal2;
                      }
                      return void 0;
                    });
                  }
                  var newVal = setAtKeyPath(obj, keypath, val);
                  if (newVal === val) {
                    obj = newVal;
                  }
                  return void 0;
                }, void 0);
              }
              var revivalPromises = [];
              function _revive(keypath, value, target, clone2, key) {
                if (ignore$Types && keypath === "$types") {
                  return void 0;
                }
                var type2 = types2[keypath];
                var isArr = isArray2(value);
                if (isArr || isPlainObject(value)) {
                  var _clone = isArr ? new Array(value.length) : {};
                  keys3(value).forEach(function(k2) {
                    var val2 = _revive(keypath + (keypath ? "." : "") + escapeKeyPathComponent(k2), value[k2], target || _clone, _clone, k2);
                    var set2 = function set3(v) {
                      if (hasConstructorOf(v, Undefined)) {
                        _clone[k2] = void 0;
                      } else if (v !== void 0) {
                        _clone[k2] = v;
                      }
                      return v;
                    };
                    if (hasConstructorOf(val2, TypesonPromise)) {
                      revivalPromises.push(val2.then(function(ret2) {
                        return set2(ret2);
                      }));
                    } else {
                      set2(val2);
                    }
                  });
                  value = _clone;
                  while (keyPathResolutions.length) {
                    var _keyPathResolutions$ = _slicedToArray2(keyPathResolutions[0], 4), _target = _keyPathResolutions$[0], keyPath = _keyPathResolutions$[1], _clone2 = _keyPathResolutions$[2], k = _keyPathResolutions$[3];
                    var val = getByKeyPath2(_target, keyPath);
                    if (val !== void 0) {
                      _clone2[k] = val;
                    } else {
                      break;
                    }
                    keyPathResolutions.splice(0, 1);
                  }
                }
                if (!type2) {
                  return value;
                }
                if (type2 === "#") {
                  var _ret = getByKeyPath2(target, value.slice(1));
                  if (_ret === void 0) {
                    keyPathResolutions.push([target, value.slice(1), clone2, key]);
                  }
                  return _ret;
                }
                return [].concat(type2).reduce(function reducer(val2, typ) {
                  if (hasConstructorOf(val2, TypesonPromise)) {
                    return val2.then(function(v) {
                      return reducer(v, typ);
                    });
                  }
                  return executeReviver(typ, val2);
                }, value);
              }
              function checkUndefined(retrn) {
                return hasConstructorOf(retrn, Undefined) ? void 0 : retrn;
              }
              var possibleTypesonPromise = revivePlainObjects();
              var ret;
              if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {
                ret = possibleTypesonPromise.then(function() {
                  return obj;
                });
              } else {
                ret = _revive("", obj, null);
                if (revivalPromises.length) {
                  ret = TypesonPromise.resolve(ret).then(function(r) {
                    return TypesonPromise.all([
                      r
                    ].concat(revivalPromises));
                  }).then(function(_ref8) {
                    var _ref9 = _slicedToArray2(_ref8, 1), r = _ref9[0];
                    return r;
                  });
                }
              }
              return isThenable(ret) ? sync2 && opts.throwOnBadSyncType ? function() {
                throw new TypeError("Sync method requested but async result obtained");
              }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync2 && opts.throwOnBadSyncType ? function() {
                throw new TypeError("Async method requested but sync result obtained");
              }() : sync2 ? checkUndefined(ret) : Promise.resolve(checkUndefined(ret));
            }
          }, {
            key: "reviveSync",
            value: function reviveSync(obj, opts) {
              return this.revive(obj, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: true
              }));
            }
          }, {
            key: "reviveAsync",
            value: function reviveAsync(obj, opts) {
              return this.revive(obj, _objectSpread22(_objectSpread22({
                throwOnBadSyncType: true
              }, opts), {}, {
                sync: false
              }));
            }
          }, {
            key: "register",
            value: function register2(typeSpecSets, opts) {
              opts = opts || {};
              [].concat(typeSpecSets).forEach(function R(typeSpec) {
                var _this = this;
                if (isArray2(typeSpec)) {
                  return typeSpec.map(function(typSpec) {
                    return R.call(_this, typSpec);
                  });
                }
                typeSpec && keys3(typeSpec).forEach(function(typeId) {
                  if (typeId === "#") {
                    throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");
                  } else if (Typeson3.JSON_TYPES.includes(typeId)) {
                    throw new TypeError("Plain JSON object types are reserved as type names");
                  }
                  var spec = typeSpec[typeId];
                  var replacers = spec && spec.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers;
                  var existingReplacer = replacers.filter(function(r) {
                    return r.type === typeId;
                  });
                  if (existingReplacer.length) {
                    replacers.splice(replacers.indexOf(existingReplacer[0]), 1);
                    delete this.revivers[typeId];
                    delete this.types[typeId];
                  }
                  if (typeof spec === "function") {
                    var Class = spec;
                    spec = {
                      test: function test3(x) {
                        return x && x.constructor === Class;
                      },
                      replace: function replace2(x) {
                        return _objectSpread22({}, x);
                      },
                      revive: function revive2(x) {
                        return Object.assign(Object.create(Class.prototype), x);
                      }
                    };
                  } else if (isArray2(spec)) {
                    var _spec = spec, _spec2 = _slicedToArray2(_spec, 3), test2 = _spec2[0], replace = _spec2[1], revive = _spec2[2];
                    spec = {
                      test: test2,
                      replace,
                      revive
                    };
                  }
                  if (!spec || !spec.test) {
                    return;
                  }
                  var replacerObj = {
                    type: typeId,
                    test: spec.test.bind(spec)
                  };
                  if (spec.replace) {
                    replacerObj.replace = spec.replace.bind(spec);
                  }
                  if (spec.replaceAsync) {
                    replacerObj.replaceAsync = spec.replaceAsync.bind(spec);
                  }
                  var start = typeof opts.fallback === "number" ? opts.fallback : opts.fallback ? 0 : Number.POSITIVE_INFINITY;
                  if (spec.testPlainObjects) {
                    this.plainObjectReplacers.splice(start, 0, replacerObj);
                  } else {
                    this.nonplainObjectReplacers.splice(start, 0, replacerObj);
                  }
                  if (spec.revive || spec.reviveAsync) {
                    var reviverObj = {};
                    if (spec.revive) {
                      reviverObj.revive = spec.revive.bind(spec);
                    }
                    if (spec.reviveAsync) {
                      reviverObj.reviveAsync = spec.reviveAsync.bind(spec);
                    }
                    this.revivers[typeId] = [reviverObj, {
                      plain: spec.testPlainObjects
                    }];
                  }
                  this.types[typeId] = spec;
                }, this);
              }, this);
              return this;
            }
          }]);
          return Typeson3;
        }();
        var Undefined = function Undefined2() {
          _classCallCheck2(this, Undefined2);
        };
        Undefined.__typeson__type__ = "TypesonUndefined";
        Typeson2.Undefined = Undefined;
        Typeson2.Promise = TypesonPromise;
        Typeson2.isThenable = isThenable;
        Typeson2.toStringTag = toStringTag2;
        Typeson2.hasConstructorOf = hasConstructorOf;
        Typeson2.isObject = isObject;
        Typeson2.isPlainObject = isPlainObject;
        Typeson2.isUserObject = isUserObject;
        Typeson2.escapeKeyPathComponent = escapeKeyPathComponent;
        Typeson2.unescapeKeyPathComponent = unescapeKeyPathComponent;
        Typeson2.getByKeyPath = getByKeyPath2;
        Typeson2.getJSONType = getJSONType;
        Typeson2.JSON_TYPES = ["null", "boolean", "number", "string", "array", "object"];
        return Typeson2;
      });
    })(typeson$1);
    var Typeson = typeson$1.exports;
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var lookup = new Uint8Array(256);
    for (var i = 0; i < chars.length; i++) {
      lookup[chars.charCodeAt(i)] = i;
    }
    var encode$1 = function encode2(arraybuffer2, byteOffset, lngth) {
      if (lngth === null || lngth === void 0) {
        lngth = arraybuffer2.byteLength;
      }
      var bytes = new Uint8Array(arraybuffer2, byteOffset || 0, lngth);
      var len = bytes.length;
      var base64 = "";
      for (var _i = 0; _i < len; _i += 3) {
        base64 += chars[bytes[_i] >> 2];
        base64 += chars[(bytes[_i] & 3) << 4 | bytes[_i + 1] >> 4];
        base64 += chars[(bytes[_i + 1] & 15) << 2 | bytes[_i + 2] >> 6];
        base64 += chars[bytes[_i + 2] & 63];
      }
      if (len % 3 === 2) {
        base64 = base64.slice(0, -1) + "=";
      } else if (len % 3 === 1) {
        base64 = base64.slice(0, -2) + "==";
      }
      return base64;
    };
    var decode$1 = function decode22(base64) {
      var len = base64.length;
      var bufferLength = base64.length * 0.75;
      var p = 0;
      var encoded1, encoded2, encoded3, encoded4;
      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }
      var arraybuffer2 = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer2);
      for (var _i2 = 0; _i2 < len; _i2 += 4) {
        encoded1 = lookup[base64.charCodeAt(_i2)];
        encoded2 = lookup[base64.charCodeAt(_i2 + 1)];
        encoded3 = lookup[base64.charCodeAt(_i2 + 2)];
        encoded4 = lookup[base64.charCodeAt(_i2 + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }
      return arraybuffer2;
    };
    var arraybuffer = {
      arraybuffer: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "ArrayBuffer";
        },
        replace: function replace(b, stateObj) {
          if (!stateObj.buffers) {
            stateObj.buffers = [];
          }
          var index = stateObj.buffers.indexOf(b);
          if (index > -1) {
            return {
              index
            };
          }
          stateObj.buffers.push(b);
          return encode$1(b);
        },
        revive: function revive(b64, stateObj) {
          if (!stateObj.buffers) {
            stateObj.buffers = [];
          }
          if (_typeof$1(b64) === "object") {
            return stateObj.buffers[b64.index];
          }
          var buffer = decode$1(b64);
          stateObj.buffers.push(buffer);
          return buffer;
        }
      }
    };
    var bigintObject = {
      bigintObject: {
        test: function test2(x) {
          return _typeof$1(x) === "object" && Typeson.hasConstructorOf(x, BigInt);
        },
        replace: function replace(n) {
          return String(n);
        },
        revive: function revive(s) {
          return new Object(BigInt(s));
        }
      }
    };
    var bigint = {
      bigint: {
        test: function test2(x) {
          return typeof x === "bigint";
        },
        replace: function replace(n) {
          return String(n);
        },
        revive: function revive(s) {
          return BigInt(s);
        }
      }
    };
    function string2arraybuffer(str) {
      var array = new Uint8Array(str.length);
      for (var i2 = 0; i2 < str.length; i2++) {
        array[i2] = str.charCodeAt(i2);
      }
      return array.buffer;
    }
    var blob = {
      blob: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Blob";
        },
        replace: function replace(b) {
          var req = new XMLHttpRequest();
          req.overrideMimeType("text/plain; charset=x-user-defined");
          req.open("GET", URL.createObjectURL(b), false);
          req.send();
          if (req.status !== 200 && req.status !== 0) {
            throw new Error("Bad Blob access: " + req.status);
          }
          return {
            type: b.type,
            stringContents: req.responseText
          };
        },
        revive: function revive(_ref) {
          var type2 = _ref.type, stringContents = _ref.stringContents;
          return new Blob([string2arraybuffer(stringContents)], {
            type: type2
          });
        },
        replaceAsync: function replaceAsync(b) {
          return new Typeson.Promise(function(resolve2, reject) {
            var reader = new FileReader();
            reader.addEventListener("load", function() {
              resolve2({
                type: b.type,
                stringContents: reader.result
              });
            });
            reader.addEventListener("error", function() {
              reject(reader.error);
            });
            reader.readAsBinaryString(b);
          });
        }
      }
    };
    function generateUUID() {
      var d = Date.now() + (typeof performance !== "undefined" && typeof performance.now === "function" ? performance.now() : 0);
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r = Math.trunc((d + Math.random() * 16) % 16);
        d = Math.floor(d / 16);
        return (c === "x" ? r : r & 3 | 8).toString(16);
      });
    }
    var cloneableObjectsByUUID = {};
    var cloneable = {
      cloneable: {
        test: function test2(x) {
          return x && _typeof$1(x) === "object" && typeof x[Symbol["for"]("cloneEncapsulate")] === "function";
        },
        replace: function replace(clonable) {
          var encapsulated = clonable[Symbol["for"]("cloneEncapsulate")]();
          var uuid = generateUUID();
          cloneableObjectsByUUID[uuid] = clonable;
          return {
            uuid,
            encapsulated
          };
        },
        revive: function revive(_ref) {
          var uuid = _ref.uuid, encapsulated = _ref.encapsulated;
          return cloneableObjectsByUUID[uuid][Symbol["for"]("cloneRevive")](encapsulated);
        }
      }
    };
    var cryptokey = {
      cryptokey: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "CryptoKey" && x.extractable;
        },
        replaceAsync: function replaceAsync(key) {
          return new Typeson.Promise(function(resolve2, reject) {
            crypto.subtle.exportKey("jwk", key)["catch"](function(err) {
              reject(err);
            }).then(function(jwk) {
              resolve2({
                jwk,
                algorithm: key.algorithm,
                usages: key.usages
              });
            });
          });
        },
        revive: function revive(_ref) {
          var jwk = _ref.jwk, algorithm = _ref.algorithm, usages = _ref.usages;
          return crypto.subtle.importKey("jwk", jwk, algorithm, true, usages);
        }
      }
    };
    var dataview = {
      dataview: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "DataView";
        },
        replace: function replace(_ref, stateObj) {
          var buffer = _ref.buffer, byteOffset = _ref.byteOffset, byteLength = _ref.byteLength;
          if (!stateObj.buffers) {
            stateObj.buffers = [];
          }
          var index = stateObj.buffers.indexOf(buffer);
          if (index > -1) {
            return {
              index,
              byteOffset,
              byteLength
            };
          }
          stateObj.buffers.push(buffer);
          return {
            encoded: encode$1(buffer),
            byteOffset,
            byteLength
          };
        },
        revive: function revive(b64Obj, stateObj) {
          if (!stateObj.buffers) {
            stateObj.buffers = [];
          }
          var byteOffset = b64Obj.byteOffset, byteLength = b64Obj.byteLength, encoded = b64Obj.encoded, index = b64Obj.index;
          var buffer;
          if ("index" in b64Obj) {
            buffer = stateObj.buffers[index];
          } else {
            buffer = decode$1(encoded);
            stateObj.buffers.push(buffer);
          }
          return new DataView(buffer, byteOffset, byteLength);
        }
      }
    };
    var date = {
      date: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Date";
        },
        replace: function replace(dt) {
          var time = dt.getTime();
          if (Number.isNaN(time)) {
            return "NaN";
          }
          return time;
        },
        revive: function revive(time) {
          if (time === "NaN") {
            return new Date(Number.NaN);
          }
          return new Date(time);
        }
      }
    };
    var error = {
      error: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Error";
        },
        replace: function replace(_ref) {
          var name = _ref.name, message = _ref.message;
          return {
            name,
            message
          };
        },
        revive: function revive(_ref2) {
          var name = _ref2.name, message = _ref2.message;
          var e = new Error(message);
          e.name = name;
          return e;
        }
      }
    };
    var _global$2 = typeof self === "undefined" ? global$1 : self;
    var errors = {};
    [
      "TypeError",
      "RangeError",
      "SyntaxError",
      "ReferenceError",
      "EvalError",
      "URIError",
      "InternalError"
    ].forEach(function(errName) {
      var Cnstrctr = _global$2[errName];
      if (Cnstrctr) {
        errors[errName.toLowerCase()] = {
          test: function test2(x) {
            return Typeson.hasConstructorOf(x, Cnstrctr);
          },
          replace: function replace(e) {
            return e.message;
          },
          revive: function revive(message) {
            return new Cnstrctr(message);
          }
        };
      }
    });
    var file = {
      file: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "File";
        },
        replace: function replace(f) {
          var req = new XMLHttpRequest();
          req.overrideMimeType("text/plain; charset=x-user-defined");
          req.open("GET", URL.createObjectURL(f), false);
          req.send();
          if (req.status !== 200 && req.status !== 0) {
            throw new Error("Bad File access: " + req.status);
          }
          return {
            type: f.type,
            stringContents: req.responseText,
            name: f.name,
            lastModified: f.lastModified
          };
        },
        revive: function revive(_ref) {
          var name = _ref.name, type2 = _ref.type, stringContents = _ref.stringContents, lastModified = _ref.lastModified;
          return new File([string2arraybuffer(stringContents)], name, {
            type: type2,
            lastModified
          });
        },
        replaceAsync: function replaceAsync(f) {
          return new Typeson.Promise(function(resolve2, reject) {
            var reader = new FileReader();
            reader.addEventListener("load", function() {
              resolve2({
                type: f.type,
                stringContents: reader.result,
                name: f.name,
                lastModified: f.lastModified
              });
            });
            reader.addEventListener("error", function() {
              reject(reader.error);
            });
            reader.readAsBinaryString(f);
          });
        }
      }
    };
    var filelist = {
      file: file.file,
      filelist: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "FileList";
        },
        replace: function replace(fl) {
          var arr = [];
          for (var i2 = 0; i2 < fl.length; i2++) {
            arr[i2] = fl.item(i2);
          }
          return arr;
        },
        revive: function revive(o) {
          var FileList = /* @__PURE__ */ function(_Symbol$toStringTag) {
            function FileList2() {
              _classCallCheck(this, FileList2);
              this._files = arguments[0];
              this.length = this._files.length;
            }
            _createClass(FileList2, [{
              key: "item",
              value: function item(index) {
                return this._files[index];
              }
            }, {
              key: _Symbol$toStringTag,
              get: function get() {
                return "FileList";
              }
            }]);
            return FileList2;
          }(Symbol.toStringTag);
          return new FileList(o);
        }
      }
    };
    var imagebitmap = {
      imagebitmap: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "ImageBitmap" || x && x.dataset && x.dataset.toStringTag === "ImageBitmap";
        },
        replace: function replace(bm) {
          var canvas = document.createElement("canvas");
          var ctx = canvas.getContext("2d");
          ctx.drawImage(bm, 0, 0);
          return canvas.toDataURL();
        },
        revive: function revive(o) {
          var canvas = document.createElement("canvas");
          var ctx = canvas.getContext("2d");
          var img = document.createElement("img");
          img.addEventListener("load", function() {
            ctx.drawImage(img, 0, 0);
          });
          img.src = o;
          return canvas;
        },
        reviveAsync: function reviveAsync(o) {
          var canvas = document.createElement("canvas");
          var ctx = canvas.getContext("2d");
          var img = document.createElement("img");
          img.addEventListener("load", function() {
            ctx.drawImage(img, 0, 0);
          });
          img.src = o;
          return createImageBitmap(canvas);
        }
      }
    };
    var imagedata = {
      imagedata: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "ImageData";
        },
        replace: function replace(d) {
          return {
            array: _toConsumableArray(d.data),
            width: d.width,
            height: d.height
          };
        },
        revive: function revive(o) {
          return new ImageData(new Uint8ClampedArray(o.array), o.width, o.height);
        }
      }
    };
    var infinity = {
      infinity: {
        test: function test2(x) {
          return x === Number.POSITIVE_INFINITY;
        },
        replace: function replace(n) {
          return "Infinity";
        },
        revive: function revive(s) {
          return Number.POSITIVE_INFINITY;
        }
      }
    };
    var IntlCollator = {
      test: function test2(x) {
        return Typeson.hasConstructorOf(x, Intl.Collator);
      },
      replace: function replace(c) {
        return c.resolvedOptions();
      },
      revive: function revive(options) {
        return new Intl.Collator(options.locale, options);
      }
    };
    var IntlDateTimeFormat = {
      test: function test2(x) {
        return Typeson.hasConstructorOf(x, Intl.DateTimeFormat);
      },
      replace: function replace(dtf) {
        return dtf.resolvedOptions();
      },
      revive: function revive(options) {
        return new Intl.DateTimeFormat(options.locale, options);
      }
    };
    var IntlNumberFormat = {
      test: function test2(x) {
        return Typeson.hasConstructorOf(x, Intl.NumberFormat);
      },
      replace: function replace(nf) {
        return nf.resolvedOptions();
      },
      revive: function revive(options) {
        return new Intl.NumberFormat(options.locale, options);
      }
    };
    var intlTypes = {
      IntlCollator,
      IntlDateTimeFormat,
      IntlNumberFormat
    };
    var map = {
      map: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Map";
        },
        replace: function replace(mp) {
          return _toConsumableArray(mp.entries());
        },
        revive: function revive(entries) {
          return new Map(entries);
        }
      }
    };
    var nan = {
      nan: {
        test: function test2(x) {
          return Number.isNaN(x);
        },
        replace: function replace(n) {
          return "NaN";
        },
        revive: function revive(s) {
          return Number.NaN;
        }
      }
    };
    var negativeInfinity = {
      negativeInfinity: {
        test: function test2(x) {
          return x === Number.NEGATIVE_INFINITY;
        },
        replace: function replace(n) {
          return "-Infinity";
        },
        revive: function revive(s) {
          return Number.NEGATIVE_INFINITY;
        }
      }
    };
    var nonbuiltinIgnore = {
      nonbuiltinIgnore: {
        test: function test2(x) {
          return x && _typeof$1(x) === "object" && !Array.isArray(x) && ![
            "Object",
            "Boolean",
            "Number",
            "String",
            "Error",
            "RegExp",
            "Math",
            "Date",
            "Map",
            "Set",
            "JSON",
            "ArrayBuffer",
            "SharedArrayBuffer",
            "DataView",
            "Int8Array",
            "Uint8Array",
            "Uint8ClampedArray",
            "Int16Array",
            "Uint16Array",
            "Int32Array",
            "Uint32Array",
            "Float32Array",
            "Float64Array",
            "Promise",
            "String Iterator",
            "Array Iterator",
            "Map Iterator",
            "Set Iterator",
            "WeakMap",
            "WeakSet",
            "Atomics",
            "Module"
          ].includes(Typeson.toStringTag(x));
        },
        replace: function replace(rexp) {
        }
      }
    };
    var primitiveObjects = {
      StringObject: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "String" && _typeof$1(x) === "object";
        },
        replace: function replace(s) {
          return String(s);
        },
        revive: function revive(s) {
          return new String(s);
        }
      },
      BooleanObject: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Boolean" && _typeof$1(x) === "object";
        },
        replace: function replace(b) {
          return Boolean(b);
        },
        revive: function revive(b) {
          return new Boolean(b);
        }
      },
      NumberObject: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Number" && _typeof$1(x) === "object";
        },
        replace: function replace(n) {
          return Number(n);
        },
        revive: function revive(n) {
          return new Number(n);
        }
      }
    };
    var regexp = {
      regexp: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "RegExp";
        },
        replace: function replace(rexp) {
          return {
            source: rexp.source,
            flags: (rexp.global ? "g" : "") + (rexp.ignoreCase ? "i" : "") + (rexp.multiline ? "m" : "") + (rexp.sticky ? "y" : "") + (rexp.unicode ? "u" : "")
          };
        },
        revive: function revive(_ref) {
          var source = _ref.source, flags = _ref.flags;
          return new RegExp(source, flags);
        }
      }
    };
    var resurrectableObjectsByUUID = {};
    var resurrectable = {
      resurrectable: {
        test: function test2(x) {
          return x && !Array.isArray(x) && ["object", "function", "symbol"].includes(_typeof$1(x));
        },
        replace: function replace(rsrrctble) {
          var uuid = generateUUID();
          resurrectableObjectsByUUID[uuid] = rsrrctble;
          return uuid;
        },
        revive: function revive(serializedResurrectable) {
          return resurrectableObjectsByUUID[serializedResurrectable];
        }
      }
    };
    var set = {
      set: {
        test: function test2(x) {
          return Typeson.toStringTag(x) === "Set";
        },
        replace: function replace(st) {
          return _toConsumableArray(st.values());
        },
        revive: function revive(values2) {
          return new Set(values2);
        }
      }
    };
    var _global$1 = typeof self === "undefined" ? global$1 : self;
    var typedArraysSocketIO = {};
    ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"].forEach(function(typeName) {
      var arrType = typeName;
      var TypedArray = _global$1[typeName];
      if (!TypedArray) {
        return;
      }
      typedArraysSocketIO[typeName.toLowerCase()] = {
        test: function test2(x) {
          return Typeson.toStringTag(x) === arrType;
        },
        replace: function replace(a) {
          return (a.byteOffset === 0 && a.byteLength === a.buffer.byteLength ? a : a.slice(0)).buffer;
        },
        revive: function revive(buf) {
          return Typeson.toStringTag(buf) === "ArrayBuffer" ? new TypedArray(buf) : buf;
        }
      };
    });
    var _global2 = typeof self === "undefined" ? global$1 : self;
    var typedArrays = {};
    ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"].forEach(function(typeName) {
      var arrType = typeName;
      var TypedArray = _global2[arrType];
      if (!TypedArray) {
        return;
      }
      typedArrays[typeName.toLowerCase()] = {
        test: function test2(x) {
          return Typeson.toStringTag(x) === arrType;
        },
        replace: function replace(_ref, stateObj) {
          var buffer = _ref.buffer, byteOffset = _ref.byteOffset, l = _ref.length;
          if (!stateObj.buffers) {
            stateObj.buffers = [];
          }
          var index = stateObj.buffers.indexOf(buffer);
          if (index > -1) {
            return {
              index,
              byteOffset,
              length: l
            };
          }
          stateObj.buffers.push(buffer);
          return {
            encoded: encode$1(buffer),
            byteOffset,
            length: l
          };
        },
        revive: function revive(b64Obj, stateObj) {
          if (!stateObj.buffers) {
            stateObj.buffers = [];
          }
          var byteOffset = b64Obj.byteOffset, len = b64Obj.length, encoded = b64Obj.encoded, index = b64Obj.index;
          var buffer;
          if ("index" in b64Obj) {
            buffer = stateObj.buffers[index];
          } else {
            buffer = decode$1(encoded);
            stateObj.buffers.push(buffer);
          }
          return new TypedArray(buffer, byteOffset, len);
        }
      };
    });
    var undef$1 = {
      undef: {
        test: function test2(x, stateObj) {
          return typeof x === "undefined" && (stateObj.ownKeys || !("ownKeys" in stateObj));
        },
        replace: function replace(n) {
          return 0;
        },
        revive: function revive(s) {
          return new Typeson.Undefined();
        }
      }
    };
    var userObject = {
      userObject: {
        test: function test2(x, stateObj) {
          return Typeson.isUserObject(x);
        },
        replace: function replace(n) {
          return _objectSpread2({}, n);
        },
        revive: function revive(s) {
          return s;
        }
      }
    };
    var arrayNonindexKeys = [{
      arrayNonindexKeys: {
        testPlainObjects: true,
        test: function test2(x, stateObj) {
          if (Array.isArray(x)) {
            if (Object.keys(x).some(function(k) {
              return String(Number.parseInt(k)) !== k;
            })) {
              stateObj.iterateIn = "object";
              stateObj.addLength = true;
            }
            return true;
          }
          return false;
        },
        replace: function replace(a, stateObj) {
          stateObj.iterateUnsetNumeric = true;
          return a;
        },
        revive: function revive(o) {
          if (Array.isArray(o)) {
            return o;
          }
          var arr = [];
          Object.keys(o).forEach(function(key) {
            var val = o[key];
            arr[key] = val;
          });
          return arr;
        }
      }
    }, {
      sparseUndefined: {
        test: function test2(x, stateObj) {
          return typeof x === "undefined" && stateObj.ownKeys === false;
        },
        replace: function replace(n) {
          return 0;
        },
        revive: function revive(s) {
          return void 0;
        }
      }
    }];
    var specialNumbers = [nan, infinity, negativeInfinity];
    var expObj$1 = [
      undef$1,
      arrayNonindexKeys,
      primitiveObjects,
      specialNumbers,
      date,
      error,
      errors,
      regexp
    ].concat(typeof Map === "function" ? map : [], typeof Set === "function" ? set : [], typeof ArrayBuffer === "function" ? arraybuffer : [], typeof Uint8Array === "function" ? typedArrays : [], typeof DataView === "function" ? dataview : [], typeof Intl !== "undefined" ? intlTypes : [], typeof BigInt !== "undefined" ? [bigint, bigintObject] : []);
    var postmessage = [error, errors];
    var socketio = [
      expObj$1,
      {
        arraybuffer: null
      },
      typedArraysSocketIO
    ];
    var sparseUndefined = [{
      sparseArrays: {
        testPlainObjects: true,
        test: function test2(x) {
          return Array.isArray(x);
        },
        replace: function replace(a, stateObj) {
          stateObj.iterateUnsetNumeric = true;
          return a;
        }
      }
    }, {
      sparseUndefined: {
        test: function test2(x, stateObj) {
          return typeof x === "undefined" && stateObj.ownKeys === false;
        },
        replace: function replace(n) {
          return 0;
        },
        revive: function revive(s) {
          return void 0;
        }
      }
    }];
    var expObj = [
      userObject,
      undef$1,
      arrayNonindexKeys,
      primitiveObjects,
      specialNumbers,
      date,
      regexp,
      imagedata,
      imagebitmap,
      file,
      filelist,
      blob
    ].concat(typeof Map === "function" ? map : [], typeof Set === "function" ? set : [], typeof ArrayBuffer === "function" ? arraybuffer : [], typeof Uint8Array === "function" ? typedArrays : [], typeof DataView === "function" ? dataview : [], typeof Intl !== "undefined" ? intlTypes : [], typeof crypto !== "undefined" ? cryptokey : [], typeof BigInt !== "undefined" ? [bigint, bigintObject] : []);
    var structuredCloningThrowing = expObj.concat({
      checkDataCloneException: {
        test: function test2(val) {
          var stringTag = {}.toString.call(val).slice(8, -1);
          if ([
            "symbol",
            "function"
          ].includes(_typeof$1(val)) || [
            "Arguments",
            "Module",
            "Error",
            "Promise",
            "WeakMap",
            "WeakSet",
            "Event",
            "MessageChannel"
          ].includes(stringTag) || val && _typeof$1(val) === "object" && typeof val.nodeType === "number" && typeof val.insertBefore === "function") {
            throw new DOMException("The object cannot be cloned.", "DataCloneError");
          }
          return false;
        }
      }
    });
    var undef = [sparseUndefined, undef$1];
    var universal = [
      expObj$1
    ];
    Typeson.types = {
      arraybuffer,
      bigintObject,
      bigint,
      blob,
      cloneable,
      cryptokey,
      dataview,
      date,
      error,
      errors,
      file,
      filelist,
      imagebitmap,
      imagedata,
      infinity,
      intlTypes,
      map,
      nan,
      negativeInfinity,
      nonbuiltinIgnore,
      primitiveObjects,
      regexp,
      resurrectable,
      set,
      typedArraysSocketio: typedArraysSocketIO,
      typedArrays,
      undef: undef$1,
      userObject
    };
    Typeson.presets = {
      arrayNonindexKeys,
      builtin: expObj$1,
      postmessage,
      socketio,
      sparseUndefined,
      specialNumbers,
      structuredCloningThrowing,
      structuredCloning: expObj,
      undef,
      universal
    };
    var typeson = new Typeson().register(Typeson.presets.structuredCloningThrowing);
    function register(func) {
      typeson = new Typeson().register(func(Typeson.presets.structuredCloningThrowing));
    }
    function encode(obj, func) {
      var ret;
      try {
        ret = typeson.stringifySync(obj);
      } catch (err) {
        if (Typeson.hasConstructorOf(err, ReferenceError) || Typeson.hasConstructorOf(err, ShimDOMException)) {
          throw createDOMException("DataCloneError", "The object cannot be cloned.");
        }
        throw err;
      }
      if (func)
        func(ret);
      return ret;
    }
    function decode2(obj) {
      return typeson.parse(obj);
    }
    function clone(val) {
      return decode2(encode(val));
    }
    var Sca = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      encode,
      decode: decode2,
      clone,
      register
    });
    var readonlyProperties$2 = ["objectStore", "keyPath", "multiEntry", "unique"];
    function IDBIndex2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBIndexAlias = IDBIndex2;
    IDBIndex2.__createInstance = function(store, indexProperties) {
      function IDBIndex22() {
        var me = this;
        me[Symbol.toStringTag] = "IDBIndex";
        defineReadonlyProperties(me, readonlyProperties$2);
        me.__objectStore = store;
        me.__name = me.__originalName = indexProperties.columnName;
        me.__keyPath = Array.isArray(indexProperties.keyPath) ? indexProperties.keyPath.slice() : indexProperties.keyPath;
        var optionalParams = indexProperties.optionalParams;
        me.__multiEntry = Boolean(optionalParams && optionalParams.multiEntry);
        me.__unique = Boolean(optionalParams && optionalParams.unique);
        me.__deleted = Boolean(indexProperties.__deleted);
        me.__objectStore.__cursors = indexProperties.cursors || [];
        Object.defineProperty(me, "__currentName", {
          get: function get() {
            return "__pendingName" in me ? me.__pendingName : me.name;
          }
        });
        Object.defineProperty(me, "name", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return this.__name;
          },
          set: function set2(newName) {
            var me2 = this;
            newName = convertToDOMString(newName);
            var oldName = me2.name;
            IDBTransaction2.__assertVersionChange(me2.objectStore.transaction);
            IDBTransaction2.__assertActive(me2.objectStore.transaction);
            IDBIndexAlias.__invalidStateIfDeleted(me2);
            IDBObjectStore2.__invalidStateIfDeleted(me2);
            if (newName === oldName) {
              return;
            }
            if (me2.objectStore.__indexes[newName] && !me2.objectStore.__indexes[newName].__deleted && !me2.objectStore.__indexes[newName].__pendingDelete) {
              throw createDOMException("ConstraintError", 'Index "' + newName + '" already exists on ' + me2.objectStore.__currentName);
            }
            me2.__name = newName;
            var objectStore = me2.objectStore;
            delete objectStore.__indexes[oldName];
            objectStore.__indexes[newName] = me2;
            objectStore.indexNames.splice(objectStore.indexNames.indexOf(oldName), 1, newName);
            var storeHandle = objectStore.transaction.__storeHandles[objectStore.name];
            var oldIndexHandle = storeHandle.__indexHandles[oldName];
            oldIndexHandle.__name = newName;
            storeHandle.__indexHandles[newName] = oldIndexHandle;
            me2.__pendingName = oldName;
            var colInfoToPreserveArr = [["key", "BLOB " + (objectStore.autoIncrement ? "UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT" : "PRIMARY KEY")], ["value", "BLOB"]].concat(_toConsumableArray(objectStore.indexNames).filter(function(indexName) {
              return indexName !== newName;
            }).map(function(indexName) {
              return [escapeIndexNameForSQL(indexName), "BLOB"];
            }));
            me2.__renameIndex(objectStore, oldName, newName, colInfoToPreserveArr, function(tx, success) {
              IDBIndexAlias.__updateIndexList(store, tx, function(store2) {
                delete storeHandle.__pendingName;
                success(store2);
              });
            });
          }
        });
      }
      IDBIndex22.prototype = IDBIndexAlias.prototype;
      return new IDBIndex22();
    };
    IDBIndex2.__invalidStateIfDeleted = function(index, msg) {
      if (index.__deleted || index.__pendingDelete || index.__pendingCreate && index.objectStore.transaction && index.objectStore.transaction.__errored) {
        throw createDOMException("InvalidStateError", msg || "This index has been deleted");
      }
    };
    IDBIndex2.__clone = function(index, store) {
      var idx = IDBIndex2.__createInstance(store, {
        columnName: index.name,
        keyPath: index.keyPath,
        optionalParams: {
          multiEntry: index.multiEntry,
          unique: index.unique
        }
      });
      ["__pendingCreate", "__pendingDelete", "__deleted", "__originalName", "__recreated"].forEach(function(p) {
        idx[p] = index[p];
      });
      return idx;
    };
    IDBIndex2.__createIndex = function(store, index) {
      var indexName = index.name;
      var storeName = store.__currentName;
      var idx = store.__indexes[indexName];
      index.__pendingCreate = true;
      store.indexNames.push(indexName);
      store.__indexes[indexName] = index;
      var indexHandle = store.__indexHandles[indexName];
      if (!indexHandle || index.__pendingDelete || index.__deleted || indexHandle.__pendingDelete || indexHandle.__deleted) {
        indexHandle = store.__indexHandles[indexName] = IDBIndex2.__clone(index, store);
      }
      var transaction = store.transaction;
      transaction.__addNonRequestToTransactionQueue(function createIndex(tx, args, success, failure) {
        var columnExists = idx && (idx.__deleted || idx.__recreated);
        var indexValues = {};
        function error2(tx2, err) {
          failure(createDOMException("UnknownError", 'Could not create index "' + indexName + '"' + err.code + "::" + err.message, err));
        }
        function applyIndex(tx2) {
          IDBIndex2.__updateIndexList(store, tx2, function() {
            tx2.executeSql('SELECT "key", "value" FROM ' + escapeStoreNameForSQL(storeName), [], function(tx3, data) {
              CFG.DEBUG && console.log("Adding existing " + storeName + " records to the " + indexName + " index");
              addIndexEntry(0);
              function addIndexEntry(i2) {
                if (i2 < data.rows.length) {
                  try {
                    var value = decode2(unescapeSQLiteResponse(data.rows.item(i2).value));
                    var indexKey = extractKeyValueDecodedFromValueUsingKeyPath(value, index.keyPath, index.multiEntry);
                    if (indexKey.invalid || indexKey.failure) {
                      throw new Error("Go to catch; ignore bad indexKey");
                    }
                    indexKey = _encode(indexKey.value, index.multiEntry);
                    if (index.unique) {
                      if (indexValues[indexKey]) {
                        indexValues = {};
                        failure(createDOMException("ConstraintError", "Duplicate values already exist within the store"));
                        return;
                      }
                      indexValues[indexKey] = true;
                    }
                    tx3.executeSql("UPDATE " + escapeStoreNameForSQL(storeName) + " SET " + escapeIndexNameForSQL(indexName) + ' = ? WHERE "key" = ?', [escapeSQLiteStatement(indexKey), data.rows.item(i2).key], function(tx4, data2) {
                      addIndexEntry(i2 + 1);
                    }, error2);
                  } catch (e) {
                    addIndexEntry(i2 + 1);
                  }
                } else {
                  delete index.__pendingCreate;
                  delete indexHandle.__pendingCreate;
                  if (index.__deleted) {
                    delete index.__deleted;
                    delete indexHandle.__deleted;
                    index.__recreated = true;
                    indexHandle.__recreated = true;
                  }
                  indexValues = {};
                  success(store);
                }
              }
            }, error2);
          }, error2);
        }
        var escapedStoreNameSQL = escapeStoreNameForSQL(storeName);
        var escapedIndexNameSQL = escapeIndexNameForSQL(index.name);
        function addIndexSQL(tx2) {
          if (!CFG.useSQLiteIndexes) {
            applyIndex(tx2);
            return;
          }
          tx2.executeSql('CREATE INDEX IF NOT EXISTS "' + escapedStoreNameSQL.slice(1, -1) + "^5" + escapedIndexNameSQL.slice(1, -1) + '" ON ' + escapedStoreNameSQL + "(" + escapedIndexNameSQL + ")", [], applyIndex, error2);
        }
        if (columnExists) {
          applyIndex(tx);
        } else {
          var sql = ["ALTER TABLE", escapedStoreNameSQL, "ADD", escapedIndexNameSQL, "BLOB"].join(" ");
          CFG.DEBUG && console.log(sql);
          tx.executeSql(sql, [], addIndexSQL, error2);
        }
      }, void 0, store);
    };
    IDBIndex2.__deleteIndex = function(store, index) {
      index.__pendingDelete = true;
      var indexHandle = store.__indexHandles[index.name];
      if (indexHandle) {
        indexHandle.__pendingDelete = true;
      }
      store.indexNames.splice(store.indexNames.indexOf(index.name), 1);
      var transaction = store.transaction;
      transaction.__addNonRequestToTransactionQueue(function deleteIndex(tx, args, success, failure) {
        function error2(tx2, err) {
          failure(createDOMException("UnknownError", 'Could not delete index "' + index.name + '"', err));
        }
        function finishDeleteIndex() {
          IDBIndex2.__updateIndexList(store, tx, function(store2) {
            delete index.__pendingDelete;
            delete index.__recreated;
            index.__deleted = true;
            if (indexHandle) {
              indexHandle.__deleted = true;
              delete indexHandle.__pendingDelete;
            }
            success(store2);
          }, error2);
        }
        if (!CFG.useSQLiteIndexes) {
          finishDeleteIndex();
          return;
        }
        tx.executeSql("DROP INDEX IF EXISTS " + sqlQuote(escapeStoreNameForSQL(store.name).slice(1, -1) + "^5" + escapeIndexNameForSQL(index.name).slice(1, -1)), [], finishDeleteIndex, error2);
      }, void 0, store);
    };
    IDBIndex2.__updateIndexList = function(store, tx, success, failure) {
      var indexList = {};
      for (var i2 = 0; i2 < store.indexNames.length; i2++) {
        var idx = store.__indexes[store.indexNames[i2]];
        indexList[idx.name] = {
          columnName: idx.name,
          keyPath: idx.keyPath,
          optionalParams: {
            unique: idx.unique,
            multiEntry: idx.multiEntry
          },
          deleted: Boolean(idx.deleted)
        };
      }
      CFG.DEBUG && console.log("Updating the index list for " + store.__currentName, indexList);
      tx.executeSql('UPDATE __sys__ SET "indexList" = ? WHERE "name" = ?', [JSON.stringify(indexList), escapeSQLiteStatement(store.__currentName)], function() {
        success(store);
      }, failure);
    };
    IDBIndex2.prototype.__fetchIndexData = function(range, opType, nullDisallowed, count) {
      var me = this;
      if (count !== void 0) {
        count = enforceRange(count, "unsigned long");
      }
      IDBIndex2.__invalidStateIfDeleted(me);
      IDBObjectStore2.__invalidStateIfDeleted(me.objectStore);
      if (me.objectStore.__deleted) {
        throw createDOMException("InvalidStateError", "This index's object store has been deleted");
      }
      IDBTransaction2.__assertActive(me.objectStore.transaction);
      if (nullDisallowed && isNullish(range)) {
        throw createDOMException("DataError", "No key or range was specified");
      }
      var fetchArgs = buildFetchIndexDataSQL(nullDisallowed, me, range, opType, false);
      return me.objectStore.transaction.__addToTransactionQueue(function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        executeFetchIndexData.apply(void 0, [count].concat(_toConsumableArray(fetchArgs), args));
      }, void 0, me);
    };
    IDBIndex2.prototype.openCursor = function() {
      var me = this;
      var _arguments = Array.prototype.slice.call(arguments), query = _arguments[0], direction = _arguments[1];
      var cursor = IDBCursorWithValue2.__createInstance(query, direction, me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), "value");
      me.__objectStore.__cursors.push(cursor);
      return cursor.__request;
    };
    IDBIndex2.prototype.openKeyCursor = function() {
      var me = this;
      var _arguments2 = Array.prototype.slice.call(arguments), query = _arguments2[0], direction = _arguments2[1];
      var cursor = IDBCursor2.__createInstance(query, direction, me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), "key");
      me.__objectStore.__cursors.push(cursor);
      return cursor.__request;
    };
    IDBIndex2.prototype.get = function(query) {
      if (!arguments.length) {
        throw new TypeError("A parameter was missing for `IDBIndex.get`.");
      }
      return this.__fetchIndexData(query, "value", true);
    };
    IDBIndex2.prototype.getKey = function(query) {
      if (!arguments.length) {
        throw new TypeError("A parameter was missing for `IDBIndex.getKey`.");
      }
      return this.__fetchIndexData(query, "key", true);
    };
    IDBIndex2.prototype.getAll = function() {
      var _arguments3 = Array.prototype.slice.call(arguments), query = _arguments3[0], count = _arguments3[1];
      return this.__fetchIndexData(query, "value", false, count);
    };
    IDBIndex2.prototype.getAllKeys = function() {
      var _arguments4 = Array.prototype.slice.call(arguments), query = _arguments4[0], count = _arguments4[1];
      return this.__fetchIndexData(query, "key", false, count);
    };
    IDBIndex2.prototype.count = function() {
      var me = this;
      var query = arguments[0];
      if (instanceOf(query, IDBKeyRange2)) {
        return IDBCursorWithValue2.__createInstance(query, "next", me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), "value", true).__request;
      }
      return me.__fetchIndexData(query, "count", false);
    };
    IDBIndex2.prototype.__renameIndex = function(store, oldName, newName) {
      var colInfoToPreserveArr = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
      var cb = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var newNameType = "BLOB";
      var storeName = store.__currentName;
      var escapedStoreNameSQL = escapeStoreNameForSQL(storeName);
      var escapedNewIndexNameSQL = escapeIndexNameForSQL(newName);
      var escapedTmpStoreNameSQL = sqlQuote("tmp_" + escapeStoreNameForSQL(storeName).slice(1, -1));
      var colNamesToPreserve = colInfoToPreserveArr.map(function(colInfo) {
        return colInfo[0];
      });
      var colInfoToPreserve = colInfoToPreserveArr.map(function(colInfo) {
        return colInfo.join(" ");
      });
      var listColInfoToPreserve = colInfoToPreserve.length ? colInfoToPreserve.join(", ") + ", " : "";
      var listColsToPreserve = colNamesToPreserve.length ? colNamesToPreserve.join(", ") + ", " : "";
      store.transaction.__addNonRequestToTransactionQueue(function renameIndex(tx, args, success, error2) {
        function sqlError(tx2, err) {
          error2(err);
        }
        function finish() {
          if (cb) {
            cb(tx, success);
            return;
          }
          success();
        }
        var sql = "CREATE TABLE " + escapedTmpStoreNameSQL + "(" + listColInfoToPreserve + escapedNewIndexNameSQL + " " + newNameType + ")";
        CFG.DEBUG && console.log(sql);
        tx.executeSql(sql, [], function() {
          var sql2 = "INSERT INTO " + escapedTmpStoreNameSQL + "(" + listColsToPreserve + escapedNewIndexNameSQL + ") SELECT " + listColsToPreserve + escapeIndexNameForSQL(oldName) + " FROM " + escapedStoreNameSQL;
          CFG.DEBUG && console.log(sql2);
          tx.executeSql(sql2, [], function() {
            var sql3 = "DROP TABLE " + escapedStoreNameSQL;
            CFG.DEBUG && console.log(sql3);
            tx.executeSql(sql3, [], function() {
              var sql4 = "ALTER TABLE " + escapedTmpStoreNameSQL + " RENAME TO " + escapedStoreNameSQL;
              CFG.DEBUG && console.log(sql4);
              tx.executeSql(sql4, [], function(tx2, data) {
                if (!CFG.useSQLiteIndexes) {
                  finish();
                  return;
                }
                var indexCreations = colNamesToPreserve.slice(2).map(function(escapedIndexNameSQL) {
                  return new syncPromiseCommonjs(function(resolve2, reject) {
                    var escapedIndexToRecreate = sqlQuote(escapedStoreNameSQL.slice(1, -1) + "^5" + escapedIndexNameSQL.slice(1, -1));
                    var sql5 = "CREATE INDEX " + escapedIndexToRecreate + " ON " + escapedStoreNameSQL + "(" + escapedIndexNameSQL + ")";
                    CFG.DEBUG && console.log(sql5);
                    tx2.executeSql(sql5, [], resolve2, function(tx3, err) {
                      reject(err);
                    });
                  });
                });
                indexCreations.push(new syncPromiseCommonjs(function(resolve2, reject) {
                  var escapedIndexToRecreate = sqlQuote("sk_" + escapedStoreNameSQL.slice(1, -1));
                  var sql5 = "DROP INDEX IF EXISTS " + escapedIndexToRecreate;
                  CFG.DEBUG && console.log(sql5);
                  tx2.executeSql(sql5, [], function() {
                    var sql6 = "CREATE INDEX " + escapedIndexToRecreate + " ON " + escapedStoreNameSQL + '("key")';
                    CFG.DEBUG && console.log(sql6);
                    tx2.executeSql(sql6, [], resolve2, function(tx3, err) {
                      reject(err);
                    });
                  }, function(tx3, err) {
                    reject(err);
                  });
                }));
                syncPromiseCommonjs.all(indexCreations).then(finish, error2)["catch"](function(err) {
                  console.log("Index rename error");
                  throw err;
                });
              }, sqlError);
            }, sqlError);
          }, sqlError);
        }, sqlError);
      });
    };
    Object.defineProperty(IDBIndex2, Symbol.hasInstance, {
      value: function value(obj) {
        return isObj(obj) && typeof obj.openCursor === "function" && typeof obj.multiEntry === "boolean";
      }
    });
    defineReadonlyOuterInterface(IDBIndex2.prototype, readonlyProperties$2);
    defineOuterInterface(IDBIndex2.prototype, ["name"]);
    IDBIndex2.prototype[Symbol.toStringTag] = "IDBIndexPrototype";
    Object.defineProperty(IDBIndex2, "prototype", {
      writable: false
    });
    function executeFetchIndexData(count, unboundedDisallowed, index, hasKey, range, opType, multiChecks, sql, sqlValues, tx, args, success, error2) {
      if (unboundedDisallowed) {
        count = 1;
      }
      if (count) {
        sql.push("LIMIT", count);
      }
      var isCount = opType === "count";
      CFG.DEBUG && console.log("Trying to fetch data for Index", sql.join(" "), sqlValues);
      tx.executeSql(sql.join(" "), sqlValues, function(tx2, data) {
        var records = [];
        var recordCount = 0;
        var decode$12 = isCount ? function() {
        } : opType === "key" ? function(record2) {
          return _decode(unescapeSQLiteResponse(record2.key));
        } : function(record2) {
          return decode2(unescapeSQLiteResponse(record2.value));
        };
        if (index.multiEntry) {
          var escapedIndexNameForKeyCol = escapeIndexNameForSQLKeyColumn(index.name);
          var encodedKey = _encode(range, index.multiEntry);
          var _loop = function _loop2(i3) {
            var row = data.rows.item(i3);
            var rowKey = _decode(row[escapedIndexNameForKeyCol]);
            var record2 = void 0;
            if (hasKey && (multiChecks && range.some(function(check) {
              return rowKey.includes(check);
            }) || isMultiEntryMatch(encodedKey, row[escapedIndexNameForKeyCol]))) {
              recordCount++;
              record2 = row;
            } else if (!hasKey && !multiChecks) {
              if (rowKey !== void 0) {
                recordCount += Array.isArray(rowKey) ? rowKey.length : 1;
                record2 = row;
              }
            }
            if (record2) {
              records.push(decode$12(record2));
              if (unboundedDisallowed) {
                return "break";
              }
            }
          };
          for (var i2 = 0; i2 < data.rows.length; i2++) {
            var _ret = _loop(i2);
            if (_ret === "break")
              break;
          }
        } else {
          for (var _i = 0; _i < data.rows.length; _i++) {
            var record = data.rows.item(_i);
            if (record) {
              records.push(decode$12(record));
            }
          }
          recordCount = records.length;
        }
        if (isCount) {
          success(recordCount);
        } else if (recordCount === 0) {
          success(unboundedDisallowed ? void 0 : []);
        } else {
          success(unboundedDisallowed ? records[0] : records);
        }
      }, error2);
    }
    function buildFetchIndexDataSQL(nullDisallowed, index, range, opType, multiChecks) {
      var hasRange = nullDisallowed || !isNullish(range);
      var col = opType === "count" ? "key" : opType;
      var sql = ["SELECT", sqlQuote(col) + (index.multiEntry ? ", " + escapeIndexNameForSQL(index.name) : ""), "FROM", escapeStoreNameForSQL(index.objectStore.__currentName), "WHERE", escapeIndexNameForSQL(index.name), "NOT NULL"];
      var sqlValues = [];
      if (hasRange) {
        if (multiChecks) {
          sql.push("AND (");
          range.forEach(function(innerKey, i2) {
            if (i2 > 0)
              sql.push("OR");
            sql.push(escapeIndexNameForSQL(index.name), "LIKE ? ESCAPE '^' ");
            sqlValues.push("%" + sqlLIKEEscape(_encode(innerKey, index.multiEntry)) + "%");
          });
          sql.push(")");
        } else if (index.multiEntry) {
          sql.push("AND", escapeIndexNameForSQL(index.name), "LIKE ? ESCAPE '^'");
          sqlValues.push("%" + sqlLIKEEscape(_encode(range, index.multiEntry)) + "%");
        } else {
          var convertedRange = convertValueToKeyRange(range, nullDisallowed);
          setSQLForKeyRange(convertedRange, escapeIndexNameForSQL(index.name), sql, sqlValues, true, false);
        }
      }
      return [nullDisallowed, index, hasRange, range, opType, multiChecks, sql, sqlValues];
    }
    var readonlyProperties$1 = ["keyPath", "indexNames", "transaction", "autoIncrement"];
    function IDBObjectStore2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBObjectStoreAlias = IDBObjectStore2;
    IDBObjectStore2.__createInstance = function(storeProperties, transaction) {
      function IDBObjectStore22() {
        var me = this;
        me[Symbol.toStringTag] = "IDBObjectStore";
        defineReadonlyProperties(this, readonlyProperties$1);
        me.__name = me.__originalName = storeProperties.name;
        me.__keyPath = Array.isArray(storeProperties.keyPath) ? storeProperties.keyPath.slice() : storeProperties.keyPath;
        me.__transaction = transaction;
        me.__idbdb = storeProperties.idbdb;
        me.__cursors = storeProperties.cursors || [];
        me.__autoIncrement = Boolean(storeProperties.autoInc);
        me.__indexes = {};
        me.__indexHandles = {};
        me.__indexNames = DOMStringList.__createInstance();
        var indexList = storeProperties.indexList;
        for (var indexName in indexList) {
          if (hasOwn2(indexList, indexName)) {
            var index = IDBIndex2.__createInstance(me, indexList[indexName]);
            me.__indexes[index.name] = index;
            if (!index.__deleted) {
              me.indexNames.push(index.name);
            }
          }
        }
        me.__oldIndexNames = me.indexNames.clone();
        Object.defineProperty(this, "__currentName", {
          get: function get() {
            return "__pendingName" in this ? this.__pendingName : this.name;
          }
        });
        Object.defineProperty(this, "name", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return this.__name;
          },
          set: function set2(name) {
            var me2 = this;
            name = convertToDOMString(name);
            var oldName = me2.name;
            IDBObjectStoreAlias.__invalidStateIfDeleted(me2);
            IDBTransaction2.__assertVersionChange(me2.transaction);
            IDBTransaction2.__assertActive(me2.transaction);
            if (oldName === name) {
              return;
            }
            if (me2.__idbdb.__objectStores[name] && !me2.__idbdb.__objectStores[name].__pendingDelete) {
              throw createDOMException("ConstraintError", 'Object store "' + name + '" already exists in ' + me2.__idbdb.name);
            }
            me2.__name = name;
            var oldStore = me2.__idbdb.__objectStores[oldName];
            oldStore.__name = name;
            me2.__idbdb.__objectStores[name] = oldStore;
            delete me2.__idbdb.__objectStores[oldName];
            me2.__idbdb.objectStoreNames.splice(me2.__idbdb.objectStoreNames.indexOf(oldName), 1, name);
            var oldHandle = me2.transaction.__storeHandles[oldName];
            oldHandle.__name = name;
            me2.transaction.__storeHandles[name] = oldHandle;
            me2.__pendingName = oldName;
            var sql = 'UPDATE __sys__ SET "name" = ? WHERE "name" = ?';
            var sqlValues = [escapeSQLiteStatement(name), escapeSQLiteStatement(oldName)];
            CFG.DEBUG && console.log(sql, sqlValues);
            me2.transaction.__addNonRequestToTransactionQueue(function objectStoreClear(tx, args, success, error2) {
              tx.executeSql(sql, sqlValues, function(tx2, data) {
                var sql2 = "ALTER TABLE " + escapeStoreNameForSQL(oldName) + " RENAME TO " + escapeStoreNameForSQL(name);
                CFG.DEBUG && console.log(sql2);
                tx2.executeSql(sql2, [], function(tx3, data2) {
                  delete me2.__pendingName;
                  success();
                });
              }, function(tx2, err) {
                error2(err);
              });
            });
          }
        });
      }
      IDBObjectStore22.prototype = IDBObjectStoreAlias.prototype;
      return new IDBObjectStore22();
    };
    IDBObjectStore2.__clone = function(store, transaction) {
      var newStore = IDBObjectStore2.__createInstance({
        name: store.__currentName,
        keyPath: Array.isArray(store.keyPath) ? store.keyPath.slice() : store.keyPath,
        autoInc: store.autoIncrement,
        indexList: {},
        idbdb: store.__idbdb,
        cursors: store.__cursors
      }, transaction);
      ["__indexes", "__indexNames", "__oldIndexNames", "__deleted", "__pendingDelete", "__pendingCreate", "__originalName"].forEach(function(p) {
        newStore[p] = store[p];
      });
      return newStore;
    };
    IDBObjectStore2.__invalidStateIfDeleted = function(store, msg) {
      if (store.__deleted || store.__pendingDelete || store.__pendingCreate && store.transaction && store.transaction.__errored) {
        throw createDOMException("InvalidStateError", msg || "This store has been deleted");
      }
    };
    IDBObjectStore2.__createObjectStore = function(db, store) {
      var storeName = store.__currentName;
      store.__pendingCreate = true;
      db.__objectStores[storeName] = store;
      db.objectStoreNames.push(storeName);
      var transaction = db.__versionTransaction;
      var storeHandles = transaction.__storeHandles;
      if (!storeHandles[storeName] || storeHandles[storeName].__pendingDelete || storeHandles[storeName].__deleted) {
        storeHandles[storeName] = IDBObjectStore2.__clone(store, transaction);
      }
      transaction.__addNonRequestToTransactionQueue(function createObjectStore(tx, args, success, failure) {
        function error2(tx2, err) {
          CFG.DEBUG && console.log(err);
          failure(createDOMException("UnknownError", 'Could not create object store "' + storeName + '"', err));
        }
        var escapedStoreNameSQL = escapeStoreNameForSQL(storeName);
        var sql = ["CREATE TABLE", escapedStoreNameSQL, "(key BLOB", store.autoIncrement ? "UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT" : "PRIMARY KEY", ", value BLOB)"].join(" ");
        CFG.DEBUG && console.log(sql);
        tx.executeSql(sql, [], function(tx2, data) {
          function insertStoreInfo() {
            var encodedKeyPath = JSON.stringify(store.keyPath);
            tx2.executeSql("INSERT INTO __sys__ VALUES (?,?,?,?,?)", [
              escapeSQLiteStatement(storeName),
              encodedKeyPath,
              Number(store.autoIncrement),
              "{}",
              1
            ], function() {
              delete store.__pendingCreate;
              delete store.__deleted;
              success(store);
            }, error2);
          }
          if (!CFG.useSQLiteIndexes) {
            insertStoreInfo();
            return;
          }
          tx2.executeSql("CREATE INDEX IF NOT EXISTS " + sqlQuote("sk_" + escapedStoreNameSQL.slice(1, -1)) + " ON " + escapedStoreNameSQL + '("key")', [], insertStoreInfo, error2);
        }, error2);
      });
      return storeHandles[storeName];
    };
    IDBObjectStore2.__deleteObjectStore = function(db, store) {
      store.__pendingDelete = true;
      store.__indexNames = DOMStringList.__createInstance();
      db.objectStoreNames.splice(db.objectStoreNames.indexOf(store.__currentName), 1);
      var storeHandle = db.__versionTransaction.__storeHandles[store.__currentName];
      if (storeHandle) {
        storeHandle.__indexNames = DOMStringList.__createInstance();
        storeHandle.__pendingDelete = true;
      }
      var transaction = db.__versionTransaction;
      transaction.__addNonRequestToTransactionQueue(function deleteObjectStore(tx, args, success, failure) {
        function error2(tx2, err) {
          CFG.DEBUG && console.log(err);
          failure(createDOMException("UnknownError", "Could not delete ObjectStore", err));
        }
        tx.executeSql('SELECT "name" FROM __sys__ WHERE "name" = ?', [escapeSQLiteStatement(store.__currentName)], function(tx2, data) {
          if (data.rows.length > 0) {
            tx2.executeSql("DROP TABLE " + escapeStoreNameForSQL(store.__currentName), [], function() {
              tx2.executeSql('DELETE FROM __sys__ WHERE "name" = ?', [escapeSQLiteStatement(store.__currentName)], function() {
                delete store.__pendingDelete;
                store.__deleted = true;
                if (storeHandle) {
                  delete storeHandle.__pendingDelete;
                  storeHandle.__deleted = true;
                }
                success();
              }, error2);
            }, error2);
          }
        });
      });
    };
    IDBObjectStore2.prototype.__validateKeyAndValueAndCloneValue = function(value, key, cursorUpdate) {
      var me = this;
      if (me.keyPath !== null) {
        if (key !== void 0) {
          throw createDOMException("DataError", "The object store uses in-line keys and the key parameter was provided", me);
        }
        var _clonedValue = clone(value);
        key = extractKeyValueDecodedFromValueUsingKeyPath(_clonedValue, me.keyPath);
        if (key.invalid) {
          throw createDOMException("DataError", "KeyPath was specified, but key was invalid.");
        }
        if (key.failure) {
          if (!cursorUpdate) {
            if (!me.autoIncrement) {
              throw createDOMException("DataError", "Could not evaluate a key from keyPath and there is no key generator");
            }
            if (!checkKeyCouldBeInjectedIntoValue(_clonedValue, me.keyPath)) {
              throw createDOMException("DataError", "A key could not be injected into a value");
            }
            return [void 0, _clonedValue];
          }
          throw createDOMException("DataError", "Could not evaluate a key from keyPath");
        }
        return [key.value, _clonedValue];
      }
      if (key === void 0) {
        if (!me.autoIncrement) {
          throw createDOMException("DataError", "The object store uses out-of-line keys and has no key generator and the key parameter was not provided.", me);
        }
        key = void 0;
      } else {
        convertValueToKeyRethrowingAndIfInvalid(key);
      }
      var clonedValue = clone(value);
      return [key, clonedValue];
    };
    IDBObjectStore2.prototype.__deriveKey = function(tx, value, key, success, failCb) {
      var me = this;
      function keyCloneThenSuccess(oldCn) {
        encode(key, function(key2) {
          key2 = decode2(key2);
          success(key2, oldCn);
        });
      }
      if (me.autoIncrement) {
        if (key === void 0) {
          generateKeyForStore(tx, me, function(failure, key2, oldCn) {
            if (failure) {
              failCb(createDOMException("ConstraintError", "The key generator's current number has reached the maximum safe integer limit"));
              return;
            }
            if (me.keyPath !== null) {
              injectKeyIntoValueUsingKeyPath(value, key2, me.keyPath);
            }
            success(key2, oldCn);
          }, failCb);
        } else {
          possiblyUpdateKeyGenerator(tx, me, key, keyCloneThenSuccess, failCb);
        }
      } else {
        keyCloneThenSuccess();
      }
    };
    IDBObjectStore2.prototype.__insertData = function(tx, encoded, value, clonedKeyOrCurrentNumber, oldCn, success, error2) {
      var me = this;
      var paramMap = {};
      var indexPromises = Object.keys(me.__indexes).map(function(indexName) {
        return new syncPromiseCommonjs(function(resolve2, reject) {
          var index = me.__indexes[indexName];
          if (index.__pendingCreate || index.__deleted) {
            resolve2();
            return;
          }
          var indexKey;
          try {
            indexKey = extractKeyValueDecodedFromValueUsingKeyPath(value, index.keyPath, index.multiEntry);
            if (indexKey.invalid || indexKey.failure) {
              throw new Error("Go to catch");
            }
          } catch (err) {
            resolve2();
            return;
          }
          indexKey = indexKey.value;
          function setIndexInfo(index2) {
            if (indexKey === void 0) {
              return;
            }
            paramMap[index2.__currentName] = _encode(indexKey, index2.multiEntry);
          }
          if (index.unique) {
            var multiCheck = index.multiEntry && Array.isArray(indexKey);
            var fetchArgs = buildFetchIndexDataSQL(true, index, indexKey, "key", multiCheck);
            executeFetchIndexData.apply(void 0, [null].concat(_toConsumableArray(fetchArgs), [tx, null, function success2(key) {
              if (key === void 0) {
                setIndexInfo(index);
                resolve2();
                return;
              }
              reject(createDOMException("ConstraintError", "Index already contains a record equal to " + (multiCheck ? "one of the subkeys of" : "") + "`indexKey`"));
            }, reject]));
          } else {
            setIndexInfo(index);
            resolve2();
          }
        });
      });
      return syncPromiseCommonjs.all(indexPromises).then(function() {
        var sqlStart = ["INSERT INTO", escapeStoreNameForSQL(me.__currentName), "("];
        var sqlEnd = [" VALUES ("];
        var insertSqlValues = [];
        if (clonedKeyOrCurrentNumber !== void 0) {
          sqlStart.push(sqlQuote("key"), ",");
          sqlEnd.push("?,");
          insertSqlValues.push(escapeSQLiteStatement(_encode(clonedKeyOrCurrentNumber)));
        }
        Object.entries(paramMap).forEach(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], stmt = _ref2[1];
          sqlStart.push(escapeIndexNameForSQL(key) + ",");
          sqlEnd.push("?,");
          insertSqlValues.push(escapeSQLiteStatement(stmt));
        });
        sqlStart.push(sqlQuote("value") + " )");
        sqlEnd.push("?)");
        insertSqlValues.push(escapeSQLiteStatement(encoded));
        var insertSql = sqlStart.join(" ") + sqlEnd.join(" ");
        CFG.DEBUG && console.log("SQL for adding", insertSql, insertSqlValues);
        tx.executeSql(insertSql, insertSqlValues, function(tx2, data) {
          success(clonedKeyOrCurrentNumber);
        }, function(tx2, err) {
          error2(createDOMException("ConstraintError", err.message, err));
        });
        return void 0;
      })["catch"](function(err) {
        function fail2() {
          error2(err);
        }
        if (typeof oldCn === "number") {
          assignCurrentNumber(tx, me, oldCn, fail2, fail2);
          return;
        }
        fail2();
      });
    };
    IDBObjectStore2.prototype.add = function(value) {
      var me = this;
      var key = arguments[1];
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No value was specified");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      me.transaction.__assertWritable();
      var request2 = me.transaction.__createRequest(me);
      var _me$__validateKeyAndV = me.__validateKeyAndValueAndCloneValue(value, key, false), _me$__validateKeyAndV2 = _slicedToArray(_me$__validateKeyAndV, 2), ky = _me$__validateKeyAndV2[0], clonedValue = _me$__validateKeyAndV2[1];
      IDBObjectStore2.__storingRecordObjectStore(request2, me, true, clonedValue, true, ky);
      return request2;
    };
    IDBObjectStore2.prototype.put = function(value) {
      var me = this;
      var key = arguments[1];
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No value was specified");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      me.transaction.__assertWritable();
      var request2 = me.transaction.__createRequest(me);
      var _me$__validateKeyAndV3 = me.__validateKeyAndValueAndCloneValue(value, key, false), _me$__validateKeyAndV4 = _slicedToArray(_me$__validateKeyAndV3, 2), ky = _me$__validateKeyAndV4[0], clonedValue = _me$__validateKeyAndV4[1];
      IDBObjectStore2.__storingRecordObjectStore(request2, me, true, clonedValue, false, ky);
      return request2;
    };
    IDBObjectStore2.prototype.__overwrite = function(tx, key, cb, error2) {
      var me = this;
      var sql = "DELETE FROM " + escapeStoreNameForSQL(me.__currentName) + ' WHERE "key" = ?';
      var encodedKey = _encode(key);
      tx.executeSql(sql, [escapeSQLiteStatement(encodedKey)], function(tx2, data) {
        CFG.DEBUG && console.log("Did the row with the", key, "exist?", data.rowsAffected);
        cb(tx2);
      }, function(tx2, err) {
        error2(err);
      });
    };
    IDBObjectStore2.__storingRecordObjectStore = function(request2, store, invalidateCache, value, noOverwrite) {
      var key = arguments[5];
      store.transaction.__pushToQueue(request2, function(tx, args, success, error2) {
        store.__deriveKey(tx, value, key, function(clonedKeyOrCurrentNumber, oldCn) {
          encode(value, function(encoded) {
            function insert(tx2) {
              store.__insertData(tx2, encoded, value, clonedKeyOrCurrentNumber, oldCn, function() {
                if (invalidateCache) {
                  store.__cursors.forEach(function(cursor) {
                    cursor.__invalidateCache();
                  });
                }
                success.apply(void 0, arguments);
              }, error2);
            }
            if (!noOverwrite) {
              store.__overwrite(tx, clonedKeyOrCurrentNumber, insert, error2);
              return;
            }
            insert(tx);
          });
        }, error2);
      });
    };
    IDBObjectStore2.prototype.__get = function(query, getKey, getAll, count) {
      var me = this;
      if (count !== void 0) {
        count = enforceRange(count, "unsigned long");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      var range = convertValueToKeyRange(query, !getAll);
      var col = getKey ? "key" : "value";
      var sql = ["SELECT", sqlQuote(col), "FROM", escapeStoreNameForSQL(me.__currentName)];
      var sqlValues = [];
      if (range !== void 0) {
        sql.push("WHERE");
        setSQLForKeyRange(range, sqlQuote("key"), sql, sqlValues);
      }
      if (!getAll) {
        count = 1;
      }
      if (count) {
        if (!Number.isFinite(count)) {
          throw new TypeError("The count parameter must be a finite number");
        }
        sql.push("LIMIT", count);
      }
      sql = sql.join(" ");
      return me.transaction.__addToTransactionQueue(function objectStoreGet(tx, args, success, error2) {
        CFG.DEBUG && console.log("Fetching", me.__currentName, sqlValues);
        tx.executeSql(sql, sqlValues, function(tx2, data) {
          CFG.DEBUG && console.log("Fetched data", data);
          var ret;
          try {
            if (data.rows.length === 0) {
              if (getAll) {
                success([]);
              } else {
                success();
              }
              return;
            }
            ret = [];
            if (getKey) {
              for (var i2 = 0; i2 < data.rows.length; i2++) {
                ret.push(_decode(unescapeSQLiteResponse(data.rows.item(i2).key), false));
              }
            } else {
              for (var _i = 0; _i < data.rows.length; _i++) {
                ret.push(decode2(unescapeSQLiteResponse(data.rows.item(_i).value)));
              }
            }
            if (!getAll) {
              ret = ret[0];
            }
          } catch (e) {
            CFG.DEBUG && console.log(e);
          }
          success(ret);
        }, function(tx2, err) {
          error2(err);
        });
      }, void 0, me);
    };
    IDBObjectStore2.prototype.get = function(query) {
      if (!arguments.length) {
        throw new TypeError("A parameter was missing for `IDBObjectStore.get`.");
      }
      return this.__get(query);
    };
    IDBObjectStore2.prototype.getKey = function(query) {
      if (!arguments.length) {
        throw new TypeError("A parameter was missing for `IDBObjectStore.getKey`.");
      }
      return this.__get(query, true);
    };
    IDBObjectStore2.prototype.getAll = function() {
      var _arguments = Array.prototype.slice.call(arguments), query = _arguments[0], count = _arguments[1];
      return this.__get(query, false, true, count);
    };
    IDBObjectStore2.prototype.getAllKeys = function() {
      var _arguments2 = Array.prototype.slice.call(arguments), query = _arguments2[0], count = _arguments2[1];
      return this.__get(query, true, true, count);
    };
    IDBObjectStore2.prototype["delete"] = function(query) {
      var me = this;
      if (!(this instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      if (!arguments.length) {
        throw new TypeError("A parameter was missing for `IDBObjectStore.delete`.");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      me.transaction.__assertWritable();
      var range = convertValueToKeyRange(query, true);
      var sqlArr = ["DELETE FROM", escapeStoreNameForSQL(me.__currentName), "WHERE"];
      var sqlValues = [];
      setSQLForKeyRange(range, sqlQuote("key"), sqlArr, sqlValues);
      var sql = sqlArr.join(" ");
      return me.transaction.__addToTransactionQueue(function objectStoreDelete(tx, args, success, error2) {
        CFG.DEBUG && console.log("Deleting", me.__currentName, sqlValues);
        tx.executeSql(sql, sqlValues, function(tx2, data) {
          CFG.DEBUG && console.log("Deleted from database", data.rowsAffected);
          me.__cursors.forEach(function(cursor) {
            cursor.__invalidateCache();
          });
          success();
        }, function(tx2, err) {
          error2(err);
        });
      }, void 0, me);
    };
    IDBObjectStore2.prototype.clear = function() {
      var me = this;
      if (!(this instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      me.transaction.__assertWritable();
      return me.transaction.__addToTransactionQueue(function objectStoreClear(tx, args, success, error2) {
        tx.executeSql("DELETE FROM " + escapeStoreNameForSQL(me.__currentName), [], function(tx2, data) {
          CFG.DEBUG && console.log("Cleared all records from database", data.rowsAffected);
          me.__cursors.forEach(function(cursor) {
            cursor.__invalidateCache();
          });
          success();
        }, function(tx2, err) {
          error2(err);
        });
      }, void 0, me);
    };
    IDBObjectStore2.prototype.count = function() {
      var me = this;
      var query = arguments[0];
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      return IDBCursorWithValue2.__createInstance(query, "next", me, me, "key", "value", true).__request;
    };
    IDBObjectStore2.prototype.openCursor = function() {
      var me = this;
      var _arguments3 = Array.prototype.slice.call(arguments), query = _arguments3[0], direction = _arguments3[1];
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      var cursor = IDBCursorWithValue2.__createInstance(query, direction, me, me, "key", "value");
      me.__cursors.push(cursor);
      return cursor.__request;
    };
    IDBObjectStore2.prototype.openKeyCursor = function() {
      var me = this;
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      var _arguments4 = Array.prototype.slice.call(arguments), query = _arguments4[0], direction = _arguments4[1];
      var cursor = IDBCursor2.__createInstance(query, direction, me, me, "key", "key");
      me.__cursors.push(cursor);
      return cursor.__request;
    };
    IDBObjectStore2.prototype.index = function(indexName) {
      var me = this;
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No index name was specified");
      }
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertNotFinished(me.transaction);
      var index = me.__indexes[indexName];
      if (!index || index.__deleted) {
        throw createDOMException("NotFoundError", 'Index "' + indexName + '" does not exist on ' + me.__currentName);
      }
      if (!me.__indexHandles[indexName] || me.__indexes[indexName].__pendingDelete || me.__indexes[indexName].__deleted) {
        me.__indexHandles[indexName] = IDBIndex2.__clone(index, me);
      }
      return me.__indexHandles[indexName];
    };
    IDBObjectStore2.prototype.createIndex = function(indexName, keyPath) {
      var me = this;
      var optionalParameters = arguments[2];
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      indexName = String(indexName);
      if (arguments.length === 0) {
        throw new TypeError("No index name was specified");
      }
      if (arguments.length === 1) {
        throw new TypeError("No key path was specified");
      }
      IDBTransaction2.__assertVersionChange(me.transaction);
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      if (me.__indexes[indexName] && !me.__indexes[indexName].__deleted && !me.__indexes[indexName].__pendingDelete) {
        throw createDOMException("ConstraintError", 'Index "' + indexName + '" already exists on ' + me.__currentName);
      }
      keyPath = convertToSequenceDOMString(keyPath);
      if (!isValidKeyPath(keyPath)) {
        throw createDOMException("SyntaxError", "A valid keyPath must be supplied");
      }
      if (Array.isArray(keyPath) && optionalParameters && optionalParameters.multiEntry) {
        throw createDOMException("InvalidAccessError", "The keyPath argument was an array and the multiEntry option is true.");
      }
      optionalParameters = optionalParameters || {};
      var indexProperties = {
        columnName: indexName,
        keyPath,
        optionalParams: {
          unique: Boolean(optionalParameters.unique),
          multiEntry: Boolean(optionalParameters.multiEntry)
        }
      };
      var index = IDBIndex2.__createInstance(me, indexProperties);
      IDBIndex2.__createIndex(me, index);
      return index;
    };
    IDBObjectStore2.prototype.deleteIndex = function(name) {
      var me = this;
      if (!(me instanceof IDBObjectStore2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No index name was specified");
      }
      IDBTransaction2.__assertVersionChange(me.transaction);
      IDBObjectStore2.__invalidStateIfDeleted(me);
      IDBTransaction2.__assertActive(me.transaction);
      var index = me.__indexes[name];
      if (!index) {
        throw createDOMException("NotFoundError", 'Index "' + name + '" does not exist on ' + me.__currentName);
      }
      IDBIndex2.__deleteIndex(me, index);
    };
    defineReadonlyOuterInterface(IDBObjectStore2.prototype, readonlyProperties$1);
    defineOuterInterface(IDBObjectStore2.prototype, ["name"]);
    IDBObjectStore2.prototype[Symbol.toStringTag] = "IDBObjectStorePrototype";
    Object.defineProperty(IDBObjectStore2, "prototype", {
      writable: false
    });
    function normalizeArray(parts, allowAboveRoot) {
      var up = 0;
      for (var i2 = parts.length - 1; i2 >= 0; i2--) {
        var last = parts[i2];
        if (last === ".") {
          parts.splice(i2, 1);
        } else if (last === "..") {
          parts.splice(i2, 1);
          up++;
        } else if (up) {
          parts.splice(i2, 1);
          up--;
        }
      }
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift("..");
        }
      }
      return parts;
    }
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function splitPath2(filename) {
      return splitPathRe.exec(filename).slice(1);
    };
    function resolve() {
      var resolvedPath = "", resolvedAbsolute = false;
      for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
        var path2 = i2 >= 0 ? arguments[i2] : "/";
        if (typeof path2 !== "string") {
          throw new TypeError("Arguments to path.resolve must be strings");
        } else if (!path2) {
          continue;
        }
        resolvedPath = path2 + "/" + resolvedPath;
        resolvedAbsolute = path2.charAt(0) === "/";
      }
      resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
        return !!p;
      }), !resolvedAbsolute).join("/");
      return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
    }
    function normalize(path2) {
      var isPathAbsolute = isAbsolute(path2), trailingSlash = substr(path2, -1) === "/";
      path2 = normalizeArray(filter(path2.split("/"), function(p) {
        return !!p;
      }), !isPathAbsolute).join("/");
      if (!path2 && !isPathAbsolute) {
        path2 = ".";
      }
      if (path2 && trailingSlash) {
        path2 += "/";
      }
      return (isPathAbsolute ? "/" : "") + path2;
    }
    function isAbsolute(path2) {
      return path2.charAt(0) === "/";
    }
    function join() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return normalize(filter(paths, function(p, index) {
        if (typeof p !== "string") {
          throw new TypeError("Arguments to path.join must be strings");
        }
        return p;
      }).join("/"));
    }
    function relative(from, to) {
      from = resolve(from).substr(1);
      to = resolve(to).substr(1);
      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== "")
            break;
        }
        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== "")
            break;
        }
        if (start > end)
          return [];
        return arr.slice(start, end - start + 1);
      }
      var fromParts = trim(from.split("/"));
      var toParts = trim(to.split("/"));
      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i2 = 0; i2 < length; i2++) {
        if (fromParts[i2] !== toParts[i2]) {
          samePartsLength = i2;
          break;
        }
      }
      var outputParts = [];
      for (var i2 = samePartsLength; i2 < fromParts.length; i2++) {
        outputParts.push("..");
      }
      outputParts = outputParts.concat(toParts.slice(samePartsLength));
      return outputParts.join("/");
    }
    var sep = "/";
    var delimiter = ":";
    function dirname(path2) {
      var result = splitPath(path2), root = result[0], dir = result[1];
      if (!root && !dir) {
        return ".";
      }
      if (dir) {
        dir = dir.substr(0, dir.length - 1);
      }
      return root + dir;
    }
    function basename(path2, ext) {
      var f = splitPath(path2)[2];
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }
    function extname(path2) {
      return splitPath(path2)[3];
    }
    var path = {
      extname,
      basename,
      dirname,
      sep,
      delimiter,
      relative,
      join,
      isAbsolute,
      normalize,
      resolve
    };
    function filter(xs, f) {
      if (xs.filter)
        return xs.filter(f);
      var res = [];
      for (var i2 = 0; i2 < xs.length; i2++) {
        if (f(xs[i2], i2, xs))
          res.push(xs[i2]);
      }
      return res;
    }
    var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
      return str.substr(start, len);
    } : function(str, start, len) {
      if (start < 0)
        start = str.length + start;
      return str.substr(start, len);
    };
    var listeners = ["onabort", "onclose", "onerror", "onversionchange"];
    var readonlyProperties = ["name", "version", "objectStoreNames"];
    function IDBDatabase2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBDatabaseAlias = IDBDatabase2;
    IDBDatabase2.__createInstance = function(db, name, oldVersion, version, storeProperties) {
      function IDBDatabase22() {
        var _this = this;
        this[Symbol.toStringTag] = "IDBDatabase";
        defineReadonlyProperties(this, readonlyProperties);
        this.__db = db;
        this.__closePending = false;
        this.__oldVersion = oldVersion;
        this.__version = version;
        this.__name = name;
        this.__upgradeTransaction = null;
        defineListenerProperties(this, listeners);
        this.__setOptions({
          legacyOutputDidListenersThrowFlag: true
        });
        this.__transactions = [];
        this.__objectStores = {};
        this.__objectStoreNames = DOMStringList.__createInstance();
        var itemCopy = {};
        var _loop = function _loop2(i3) {
          var item = storeProperties.rows.item(i3);
          itemCopy.name = item.name;
          itemCopy.keyPath = JSON.parse(item.keyPath);
          ["autoInc", "indexList"].forEach(function(prop) {
            itemCopy[prop] = JSON.parse(item[prop]);
          });
          itemCopy.idbdb = _this;
          var store = IDBObjectStore2.__createInstance(itemCopy);
          _this.__objectStores[store.name] = store;
          _this.objectStoreNames.push(store.name);
        };
        for (var i2 = 0; i2 < storeProperties.rows.length; i2++) {
          _loop(i2);
        }
        this.__oldObjectStoreNames = this.objectStoreNames.clone();
      }
      IDBDatabase22.prototype = IDBDatabaseAlias.prototype;
      return new IDBDatabase22();
    };
    IDBDatabase2.prototype = EventTargetFactory.createInstance();
    IDBDatabase2.prototype[Symbol.toStringTag] = "IDBDatabasePrototype";
    IDBDatabase2.prototype.createObjectStore = function(storeName) {
      var createOptions = arguments[1];
      storeName = String(storeName);
      if (!(this instanceof IDBDatabase2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No object store name was specified");
      }
      IDBTransaction2.__assertVersionChange(this.__versionTransaction);
      this.throwIfUpgradeTransactionNull();
      IDBTransaction2.__assertActive(this.__versionTransaction);
      createOptions = _objectSpread2({}, createOptions);
      var _createOptions = createOptions, keyPath = _createOptions.keyPath;
      keyPath = keyPath === void 0 ? null : convertToSequenceDOMString(keyPath);
      if (keyPath !== null && !isValidKeyPath(keyPath)) {
        throw createDOMException("SyntaxError", "The keyPath argument contains an invalid key path.");
      }
      if (this.__objectStores[storeName] && !this.__objectStores[storeName].__pendingDelete) {
        throw createDOMException("ConstraintError", 'Object store "' + storeName + '" already exists in ' + this.name);
      }
      var autoInc = createOptions.autoIncrement;
      if (autoInc && (keyPath === "" || Array.isArray(keyPath))) {
        throw createDOMException("InvalidAccessError", "With autoIncrement set, the keyPath argument must not be an array or empty string.");
      }
      var storeProperties = {
        name: storeName,
        keyPath,
        autoInc,
        indexList: {},
        idbdb: this
      };
      var store = IDBObjectStore2.__createInstance(storeProperties, this.__versionTransaction);
      return IDBObjectStore2.__createObjectStore(this, store);
    };
    IDBDatabase2.prototype.deleteObjectStore = function(storeName) {
      if (!(this instanceof IDBDatabase2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("No object store name was specified");
      }
      IDBTransaction2.__assertVersionChange(this.__versionTransaction);
      this.throwIfUpgradeTransactionNull();
      IDBTransaction2.__assertActive(this.__versionTransaction);
      var store = this.__objectStores[storeName];
      if (!store) {
        throw createDOMException("NotFoundError", 'Object store "' + storeName + '" does not exist in ' + this.name);
      }
      IDBObjectStore2.__deleteObjectStore(this, store);
    };
    IDBDatabase2.prototype.close = function() {
      if (!(this instanceof IDBDatabase2)) {
        throw new TypeError("Illegal invocation");
      }
      this.__closePending = true;
      if (this.__unblocking) {
        this.__unblocking.check();
      }
    };
    IDBDatabase2.prototype.transaction = function(storeNames) {
      var _this2 = this;
      if (arguments.length === 0) {
        throw new TypeError("You must supply a valid `storeNames` to `IDBDatabase.transaction`");
      }
      var mode = arguments[1];
      storeNames = isIterable(storeNames) ? _toConsumableArray(new Set(convertToSequenceDOMString(storeNames))).sort() : [convertToDOMString(storeNames)];
      mode = mode || "readonly";
      IDBTransaction2.__assertNotVersionChange(this.__versionTransaction);
      if (this.__closePending) {
        throw createDOMException("InvalidStateError", "An attempt was made to start a new transaction on a database connection that is not open");
      }
      var objectStoreNames = DOMStringList.__createInstance();
      storeNames.forEach(function(storeName) {
        if (!_this2.objectStoreNames.contains(storeName)) {
          throw createDOMException("NotFoundError", 'The "' + storeName + '" object store does not exist');
        }
        objectStoreNames.push(storeName);
      });
      if (storeNames.length === 0) {
        throw createDOMException("InvalidAccessError", "No valid object store names were specified");
      }
      if (mode !== "readonly" && mode !== "readwrite") {
        throw new TypeError("Invalid transaction mode: " + mode);
      }
      var trans = IDBTransaction2.__createInstance(this, objectStoreNames, mode);
      this.__transactions.push(trans);
      return trans;
    };
    IDBDatabase2.prototype.throwIfUpgradeTransactionNull = function() {
      if (this.__upgradeTransaction === null) {
        throw createDOMException("InvalidStateError", "No upgrade transaction associated with database.");
      }
    };
    IDBDatabase2.prototype.__forceClose = function(msg) {
      var me = this;
      me.close();
      var ct = 0;
      me.__transactions.forEach(function(trans) {
        trans.on__abort = function() {
          ct++;
          if (ct === me.__transactions.length) {
            var evt = createEvent("close");
            setTimeout(function() {
              me.dispatchEvent(evt);
            });
          }
        };
        trans.__abortTransaction(createDOMException("AbortError", "The connection was force-closed: " + (msg || "")));
      });
    };
    defineOuterInterface(IDBDatabase2.prototype, listeners);
    defineReadonlyOuterInterface(IDBDatabase2.prototype, readonlyProperties);
    Object.defineProperty(IDBDatabase2.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: IDBDatabase2
    });
    Object.defineProperty(IDBDatabase2, "prototype", {
      writable: false
    });
    var fs;
    var setFS = function setFS2(_fs) {
      fs = _fs;
    };
    var getOrigin = function getOrigin2() {
      return (typeof location === "undefined" ? "undefined" : _typeof$1(location)) !== "object" || !location ? "null" : location.origin;
    };
    var hasNullOrigin = function hasNullOrigin2() {
      return CFG.checkOrigin !== false && getOrigin() === "null";
    };
    var connectionQueue = {};
    function processNextInConnectionQueue(name) {
      var origin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getOrigin();
      var queueItems = connectionQueue[origin][name];
      if (!queueItems[0]) {
        return;
      }
      var _queueItems$ = queueItems[0], req = _queueItems$.req, cb = _queueItems$.cb;
      function removeFromQueue() {
        queueItems.shift();
        processNextInConnectionQueue(name, origin);
      }
      req.addEventListener("success", removeFromQueue);
      req.addEventListener("error", removeFromQueue);
      cb(req);
    }
    function addRequestToConnectionQueue(req, name) {
      var origin = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : getOrigin();
      var cb = arguments.length > 3 ? arguments[3] : void 0;
      if (!connectionQueue[origin][name]) {
        connectionQueue[origin][name] = [];
      }
      connectionQueue[origin][name].push({
        req,
        cb
      });
      if (connectionQueue[origin][name].length === 1) {
        processNextInConnectionQueue(name, origin);
      }
    }
    function triggerAnyVersionChangeAndBlockedEvents(openConnections, req, oldVersion, newVersion) {
      var connectionIsClosed = function connectionIsClosed2(connection) {
        return connection.__closePending;
      };
      var connectionsClosed = function connectionsClosed2() {
        return openConnections.every(function(conn) {
          return connectionIsClosed(conn);
        });
      };
      return openConnections.reduce(function(promises, entry) {
        if (connectionIsClosed(entry)) {
          return promises;
        }
        return promises.then(function() {
          if (connectionIsClosed(entry)) {
            return void 0;
          }
          var e = new IDBVersionChangeEvent2("versionchange", {
            oldVersion,
            newVersion
          });
          return new syncPromiseCommonjs(function(resolve2) {
            setTimeout(function() {
              entry.dispatchEvent(e);
              resolve2();
            });
          });
        });
      }, syncPromiseCommonjs.resolve()).then(function() {
        if (connectionsClosed()) {
          return void 0;
        }
        return new syncPromiseCommonjs(function(resolve2) {
          var unblocking = {
            check: function check() {
              if (connectionsClosed()) {
                resolve2();
              }
            }
          };
          var e = new IDBVersionChangeEvent2("blocked", {
            oldVersion,
            newVersion
          });
          setTimeout(function() {
            req.dispatchEvent(e);
            if (!connectionsClosed()) {
              openConnections.forEach(function(connection) {
                if (!connectionIsClosed(connection)) {
                  connection.__unblocking = unblocking;
                }
              });
            } else {
              resolve2();
            }
          });
        });
      });
    }
    var websqlDBCache = {};
    var sysdb;
    var nameCounter = 0;
    function getLatestCachedWebSQLVersion(name) {
      return Object.keys(websqlDBCache[name]).map(function(version) {
        return Number(version);
      }).reduce(function(prev, curr) {
        return curr > prev ? curr : prev;
      }, 0);
    }
    function getLatestCachedWebSQLDB(name) {
      return websqlDBCache[name] && websqlDBCache[name][getLatestCachedWebSQLVersion(name)];
    }
    function cleanupDatabaseResources(__openDatabase, name, escapedDatabaseName, databaseDeleted, dbError) {
      var useMemoryDatabase = typeof CFG.memoryDatabase === "string";
      if (useMemoryDatabase) {
        var latestSQLiteDBCached = websqlDBCache[name] ? getLatestCachedWebSQLDB(name) : null;
        if (!latestSQLiteDBCached) {
          console.warn("Could not find a memory database instance to delete.");
          databaseDeleted();
          return;
        }
        var _sqliteDB = latestSQLiteDBCached._db && latestSQLiteDBCached._db._db;
        if (!_sqliteDB || !_sqliteDB.close) {
          console.error("The `openDatabase` implementation does not have the expected `._db._db.close` method for closing the database");
          return;
        }
        _sqliteDB.close(function(err) {
          if (err) {
            console.warn("Error closing (destroying) memory database");
            return;
          }
          databaseDeleted();
        });
        return;
      }
      if (fs && CFG.deleteDatabaseFiles !== false) {
        fs.unlink(path.join(CFG.databaseBasePath || "", escapedDatabaseName), function(err) {
          if (err && err.code !== "ENOENT") {
            dbError({
              code: 0,
              message: "Error removing database file: " + escapedDatabaseName + " " + err
            });
            return;
          }
          databaseDeleted();
        });
        return;
      }
      var sqliteDB = __openDatabase(path.join(CFG.databaseBasePath || "", escapedDatabaseName), 1, name, CFG.DEFAULT_DB_SIZE);
      sqliteDB.transaction(function(tx) {
        tx.executeSql('SELECT "name" FROM __sys__', [], function(tx2, data) {
          var tables = data.rows;
          (function deleteTables(i2) {
            if (i2 >= tables.length) {
              tx2.executeSql("DROP TABLE IF EXISTS __sys__", [], function() {
                databaseDeleted();
              }, dbError);
            } else {
              tx2.executeSql("DROP TABLE " + escapeStoreNameForSQL(unescapeSQLiteResponse(tables.item(i2).name)), [], function() {
                deleteTables(i2 + 1);
              }, function() {
                deleteTables(i2 + 1);
              });
            }
          })(0);
        }, function(e) {
          databaseDeleted();
        });
      });
    }
    function createSysDB(__openDatabase, success, failure) {
      function sysDbCreateError(tx, err) {
        err = webSQLErrback(err || tx);
        CFG.DEBUG && console.log("Error in sysdb transaction - when creating dbVersions", err);
        failure(err);
      }
      if (sysdb) {
        success();
      } else {
        sysdb = __openDatabase(typeof CFG.memoryDatabase === "string" ? CFG.memoryDatabase : path.join(typeof CFG.sysDatabaseBasePath === "string" ? CFG.sysDatabaseBasePath : CFG.databaseBasePath || "", "__sysdb__" + (CFG.addSQLiteExtension !== false ? ".sqlite" : "")), 1, "System Database", CFG.DEFAULT_DB_SIZE);
        sysdb.transaction(function(systx) {
          systx.executeSql("CREATE TABLE IF NOT EXISTS dbVersions (name BLOB, version INT);", [], function(systx2) {
            if (!CFG.useSQLiteIndexes) {
              success();
              return;
            }
            systx2.executeSql("CREATE INDEX IF NOT EXISTS dbvname ON dbVersions(name)", [], success, sysDbCreateError);
          }, sysDbCreateError);
        }, sysDbCreateError);
      }
    }
    function IDBFactory2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBFactoryAlias = IDBFactory2;
    IDBFactory2.__createInstance = function() {
      function IDBFactory22() {
        this[Symbol.toStringTag] = "IDBFactory";
        this.__connections = {};
      }
      IDBFactory22.prototype = IDBFactoryAlias.prototype;
      return new IDBFactory22();
    };
    IDBFactory2.prototype.open = function(name) {
      var me = this;
      if (!(me instanceof IDBFactory2)) {
        throw new TypeError("Illegal invocation");
      }
      var version = arguments[1];
      if (arguments.length === 0) {
        throw new TypeError("Database name is required");
      }
      if (version !== void 0) {
        version = enforceRange(version, "unsigned long long");
        if (version === 0) {
          throw new TypeError("Version cannot be 0");
        }
      }
      if (hasNullOrigin()) {
        throw createDOMException("SecurityError", "Cannot open an IndexedDB database from an opaque origin.");
      }
      var req = IDBOpenDBRequest2.__createInstance();
      var calledDbCreateError = false;
      if (CFG.autoName && name === "") {
        name = "autoNamedDatabase_" + nameCounter++;
      }
      name = String(name);
      var sqlSafeName = escapeSQLiteStatement(name);
      var useMemoryDatabase = typeof CFG.memoryDatabase === "string";
      var useDatabaseCache = CFG.cacheDatabaseInstances !== false || useMemoryDatabase;
      var escapedDatabaseName;
      try {
        escapedDatabaseName = escapeDatabaseNameForSQLAndFiles(name);
      } catch (err) {
        throw err;
      }
      function dbCreateError(tx, err) {
        if (calledDbCreateError) {
          return;
        }
        err = err ? webSQLErrback(err) : tx;
        calledDbCreateError = true;
        var evt = createEvent("error", err, {
          bubbles: true,
          cancelable: true
        });
        req.__done = true;
        req.__error = err;
        req.__result = void 0;
        req.dispatchEvent(evt);
      }
      function setupDatabase(tx, db, oldVersion) {
        tx.executeSql('SELECT "name", "keyPath", "autoInc", "indexList" FROM __sys__', [], function(tx2, data) {
          function finishRequest() {
            req.__result = connection;
            req.__done = true;
          }
          var connection = IDBDatabase2.__createInstance(db, name, oldVersion, version, data);
          if (!me.__connections[name]) {
            me.__connections[name] = [];
          }
          me.__connections[name].push(connection);
          if (oldVersion < version) {
            var openConnections = me.__connections[name].slice(0, -1);
            triggerAnyVersionChangeAndBlockedEvents(openConnections, req, oldVersion, version).then(function() {
              var sysdbFinishedCb = function sysdbFinishedCb2(systx, err, cb) {
                if (err) {
                  try {
                    systx.executeSql("ROLLBACK", [], cb, cb);
                  } catch (er) {
                    sysdb.transaction(function(systx2) {
                      function reportError(msg) {
                        throw new Error("Unable to roll back upgrade transaction!" + (msg || ""));
                      }
                      if (oldVersion === 0) {
                        systx2.executeSql('DELETE FROM dbVersions WHERE "name" = ?', [sqlSafeName], function() {
                          cb(reportError);
                        }, reportError);
                      } else {
                        systx2.executeSql('UPDATE dbVersions SET "version" = ? WHERE "name" = ?', [oldVersion, sqlSafeName], cb, reportError);
                      }
                    });
                  }
                  return;
                }
                cb();
              };
              sysdb.transaction(function(systx) {
                function versionSet() {
                  var e2 = new IDBVersionChangeEvent2("upgradeneeded", {
                    oldVersion,
                    newVersion: version
                  });
                  req.__result = connection;
                  connection.__upgradeTransaction = req.__transaction = req.__result.__versionTransaction = IDBTransaction2.__createInstance(req.__result, req.__result.objectStoreNames, "versionchange");
                  req.__done = true;
                  req.transaction.__addNonRequestToTransactionQueue(function onupgradeneeded(tx3, args, finished, error2) {
                    req.dispatchEvent(e2);
                    if (e2.__legacyOutputDidListenersThrowError) {
                      logError("Error", "An error occurred in an upgradeneeded handler attached to request chain", e2.__legacyOutputDidListenersThrowError);
                      req.transaction.__abortTransaction(createDOMException("AbortError", "A request was aborted."));
                      return;
                    }
                    finished();
                  });
                  req.transaction.on__beforecomplete = function(ev2) {
                    connection.__upgradeTransaction = null;
                    req.__result.__versionTransaction = null;
                    sysdbFinishedCb(systx, false, function() {
                      req.transaction.__transFinishedCb(false, function() {
                        ev2.complete();
                        req.__transaction = null;
                      });
                    });
                  };
                  req.transaction.on__preabort = function() {
                    connection.__upgradeTransaction = null;
                    if (useDatabaseCache) {
                      if (name in websqlDBCache) {
                        delete websqlDBCache[name][version];
                      }
                    }
                  };
                  req.transaction.on__abort = function() {
                    req.__transaction = null;
                    req.__result = void 0;
                    req.__done = false;
                    connection.close();
                    setTimeout(function() {
                      var err = createDOMException("AbortError", "The upgrade transaction was aborted.");
                      sysdbFinishedCb(systx, err, function(reportError) {
                        if (oldVersion === 0) {
                          cleanupDatabaseResources(me.__openDatabase, name, escapedDatabaseName, dbCreateError.bind(null, err), reportError || dbCreateError);
                          return;
                        }
                        dbCreateError(err);
                      });
                    });
                  };
                  req.transaction.on__complete = function() {
                    if (req.__result.__closePending) {
                      req.__transaction = null;
                      var err = createDOMException("AbortError", "The connection has been closed.");
                      dbCreateError(err);
                      return;
                    }
                    finishRequest();
                    req.__transaction = null;
                    var e3 = createEvent("success");
                    req.dispatchEvent(e3);
                  };
                }
                if (oldVersion === 0) {
                  systx.executeSql("INSERT INTO dbVersions VALUES (?,?)", [sqlSafeName, version], versionSet, dbCreateError);
                } else {
                  systx.executeSql('UPDATE dbVersions SET "version" = ? WHERE "name" = ?', [version, sqlSafeName], versionSet, dbCreateError);
                }
              }, dbCreateError, null, function(currentTask, err, done, rollback, commit) {
                if (currentTask.readOnly || err) {
                  return true;
                }
                sysdbFinishedCb = function sysdbFinishedCb2(systx, err2, cb) {
                  if (err2) {
                    rollback(err2, cb);
                  } else {
                    commit(cb);
                  }
                };
                return false;
              });
              return void 0;
            })["catch"](function(err) {
              console.log("Error within `triggerAnyVersionChangeAndBlockedEvents`");
              throw err;
            });
          } else {
            finishRequest();
            var e = createEvent("success");
            req.dispatchEvent(e);
          }
        }, dbCreateError);
      }
      function openDB(oldVersion) {
        var db;
        if ((useMemoryDatabase || useDatabaseCache) && name in websqlDBCache && websqlDBCache[name][version]) {
          db = websqlDBCache[name][version];
        } else {
          db = me.__openDatabase(useMemoryDatabase ? CFG.memoryDatabase : path.join(CFG.databaseBasePath || "", escapedDatabaseName), 1, name, CFG.DEFAULT_DB_SIZE);
          if (useDatabaseCache) {
            if (!(name in websqlDBCache)) {
              websqlDBCache[name] = {};
            }
            websqlDBCache[name][version] = db;
          }
        }
        if (version === void 0) {
          version = oldVersion || 1;
        }
        if (oldVersion > version) {
          var err = createDOMException("VersionError", "An attempt was made to open a database using a lower version than the existing version.", version);
          if (useDatabaseCache) {
            setTimeout(function() {
              dbCreateError(err);
            });
          } else {
            dbCreateError(err);
          }
          return;
        }
        db.transaction(function(tx) {
          tx.executeSql("CREATE TABLE IF NOT EXISTS __sys__ (name BLOB, keyPath BLOB, autoInc BOOLEAN, indexList BLOB, currNum INTEGER)", [], function() {
            function setup() {
              setupDatabase(tx, db, oldVersion);
            }
            if (!CFG.createIndexes) {
              setup();
              return;
            }
            tx.executeSql("CREATE INDEX IF NOT EXISTS sysname ON __sys__(name)", [], setup, dbCreateError);
          }, dbCreateError);
        }, dbCreateError);
      }
      addRequestToConnectionQueue(req, name, void 0, function(req2) {
        var latestCachedVersion;
        if (useDatabaseCache) {
          if (!(name in websqlDBCache)) {
            websqlDBCache[name] = {};
          }
          latestCachedVersion = getLatestCachedWebSQLVersion(name);
        }
        if (latestCachedVersion) {
          openDB(latestCachedVersion);
        } else {
          createSysDB(me.__openDatabase, function() {
            sysdb.readTransaction(function(sysReadTx) {
              sysReadTx.executeSql('SELECT "version" FROM dbVersions WHERE "name" = ?', [sqlSafeName], function(sysReadTx2, data) {
                if (data.rows.length === 0) {
                  openDB(0);
                } else {
                  openDB(data.rows.item(0).version);
                }
              }, dbCreateError);
            }, dbCreateError);
          }, dbCreateError);
        }
      });
      return req;
    };
    IDBFactory2.prototype.deleteDatabase = function(name) {
      var me = this;
      if (!(me instanceof IDBFactory2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length === 0) {
        throw new TypeError("Database name is required");
      }
      if (hasNullOrigin()) {
        throw createDOMException("SecurityError", "Cannot delete an IndexedDB database from an opaque origin.");
      }
      name = String(name);
      var sqlSafeName = escapeSQLiteStatement(name);
      var escapedDatabaseName;
      try {
        escapedDatabaseName = escapeDatabaseNameForSQLAndFiles(name);
      } catch (err) {
        throw err;
      }
      var useMemoryDatabase = typeof CFG.memoryDatabase === "string";
      var useDatabaseCache = CFG.cacheDatabaseInstances !== false || useMemoryDatabase;
      var req = IDBOpenDBRequest2.__createInstance();
      var calledDBError = false;
      var version = 0;
      var sysdbFinishedCbDelete = function sysdbFinishedCbDelete2(err, cb) {
        cb(err);
      };
      function dbError(tx, err) {
        if (calledDBError || err === true) {
          return;
        }
        err = webSQLErrback(err || tx);
        sysdbFinishedCbDelete(true, function() {
          req.__done = true;
          req.__error = err;
          req.__result = void 0;
          var e = createEvent("error", err, {
            bubbles: true,
            cancelable: true
          });
          req.dispatchEvent(e);
          calledDBError = true;
        });
      }
      addRequestToConnectionQueue(req, name, void 0, function(req2) {
        createSysDB(me.__openDatabase, function() {
          function completeDatabaseDelete() {
            req2.__result = void 0;
            req2.__done = true;
            var e = new IDBVersionChangeEvent2("success", {
              oldVersion: version,
              newVersion: null
            });
            req2.dispatchEvent(e);
          }
          function databaseDeleted() {
            sysdbFinishedCbDelete(false, function() {
              if (useDatabaseCache && name in websqlDBCache) {
                delete websqlDBCache[name];
              }
              delete me.__connections[name];
              completeDatabaseDelete();
            });
          }
          sysdb.readTransaction(function(sysReadTx) {
            sysReadTx.executeSql('SELECT "version" FROM dbVersions WHERE "name" = ?', [sqlSafeName], function(sysReadTx2, data) {
              if (data.rows.length === 0) {
                completeDatabaseDelete();
                return void 0;
              }
              var _data$rows$item = data.rows.item(0);
              version = _data$rows$item.version;
              var openConnections = me.__connections[name] || [];
              triggerAnyVersionChangeAndBlockedEvents(openConnections, req2, version, null).then(function() {
                sysdb.transaction(function(systx) {
                  systx.executeSql('DELETE FROM dbVersions WHERE "name" = ? ', [sqlSafeName], function() {
                    cleanupDatabaseResources(me.__openDatabase, name, escapedDatabaseName, databaseDeleted, dbError);
                  }, dbError);
                }, dbError, null, function(currentTask, err, done, rollback, commit) {
                  if (currentTask.readOnly || err) {
                    return true;
                  }
                  sysdbFinishedCbDelete = function sysdbFinishedCbDelete2(err2, cb) {
                    if (err2) {
                      rollback(err2, cb);
                    } else {
                      commit(cb);
                    }
                  };
                  return false;
                });
                return void 0;
              }, dbError);
              return void 0;
            }, dbError);
          });
        }, dbError);
      });
      return req;
    };
    IDBFactory2.prototype.cmp = function(key1, key2) {
      if (!(this instanceof IDBFactory2)) {
        throw new TypeError("Illegal invocation");
      }
      if (arguments.length < 2) {
        throw new TypeError("You must provide two keys to be compared");
      }
      convertValueToKeyRethrowingAndIfInvalid(key1);
      convertValueToKeyRethrowingAndIfInvalid(key2);
      return cmp2(key1, key2);
    };
    IDBFactory2.prototype.databases = function() {
      var me = this;
      var calledDbCreateError = false;
      return new Promise(function(resolve2, reject) {
        if (!(me instanceof IDBFactory2)) {
          throw new TypeError("Illegal invocation");
        }
        if (hasNullOrigin()) {
          throw createDOMException("SecurityError", "Cannot get IndexedDB database names from an opaque origin.");
        }
        function dbGetDatabaseNamesError(tx, err) {
          if (calledDbCreateError) {
            return;
          }
          err = err ? webSQLErrback(err) : tx;
          calledDbCreateError = true;
          reject(err);
        }
        createSysDB(me.__openDatabase, function() {
          sysdb.readTransaction(function(sysReadTx) {
            sysReadTx.executeSql('SELECT "name", "version" FROM dbVersions', [], function(sysReadTx2, data) {
              var dbNames = [];
              for (var i2 = 0; i2 < data.rows.length; i2++) {
                var _data$rows$item2 = data.rows.item(i2), name = _data$rows$item2.name, version = _data$rows$item2.version;
                dbNames.push({
                  name: unescapeSQLiteResponse(name),
                  version
                });
              }
              resolve2(dbNames);
            }, dbGetDatabaseNamesError);
          }, dbGetDatabaseNamesError);
        }, dbGetDatabaseNamesError);
      });
    };
    IDBFactory2.prototype.__forceClose = function(dbName, connIdx, msg) {
      var me = this;
      function forceClose(conn) {
        conn.__forceClose(msg);
      }
      if (isNullish(dbName)) {
        Object.values(me.__connections).forEach(function(conn) {
          forceClose(conn);
        });
      } else if (!me.__connections[dbName]) {
        console.log("No database connections with that name to force close");
      } else if (isNullish(connIdx)) {
        me.__connections[dbName].forEach(function(conn) {
          forceClose(conn);
        });
      } else if (!Number.isInteger(connIdx) || connIdx < 0 || connIdx > me.__connections[dbName].length - 1) {
        throw new TypeError("If providing an argument, __forceClose must be called with a numeric index to indicate a specific connection to lose");
      } else {
        forceClose(me.__connections[dbName][connIdx]);
      }
    };
    IDBFactory2.prototype.__setConnectionQueueOrigin = function() {
      var origin = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getOrigin();
      connectionQueue[origin] = {};
    };
    IDBFactory2.prototype[Symbol.toStringTag] = "IDBFactoryPrototype";
    Object.defineProperty(IDBFactory2, "prototype", {
      writable: false
    });
    var shimIndexedDB = IDBFactory2.__createInstance();
    function IDBCursor2() {
      throw new TypeError("Illegal constructor");
    }
    var IDBCursorAlias = IDBCursor2;
    IDBCursor2.__super = function IDBCursor22(query, direction, store, source, keyColumnName, valueColumnName, count) {
      this[Symbol.toStringTag] = "IDBCursor";
      defineReadonlyProperties(this, ["key", "primaryKey", "request"]);
      IDBObjectStore2.__invalidStateIfDeleted(store);
      this.__indexSource = instanceOf(source, IDBIndex2);
      if (this.__indexSource)
        IDBIndex2.__invalidStateIfDeleted(source);
      IDBTransaction2.__assertActive(store.transaction);
      var range = convertValueToKeyRange(query);
      if (direction !== void 0 && !["next", "prev", "nextunique", "prevunique"].includes(direction)) {
        throw new TypeError(direction + "is not a valid cursor direction");
      }
      Object.defineProperties(this, {
        source: {
          writable: false,
          value: source
        },
        direction: {
          writable: false,
          value: direction || "next"
        }
      });
      this.__key = void 0;
      this.__primaryKey = void 0;
      this.__store = store;
      this.__range = range;
      this.__request = IDBRequest2.__createInstance();
      this.__request.__source = source;
      this.__request.__transaction = this.__store.transaction;
      this.__keyColumnName = keyColumnName;
      this.__valueColumnName = valueColumnName;
      this.__keyOnly = valueColumnName === "key";
      this.__valueDecoder = this.__keyOnly ? Key : Sca;
      this.__count = count;
      this.__prefetchedIndex = -1;
      this.__multiEntryIndex = this.__indexSource ? source.multiEntry : false;
      this.__unique = this.direction.includes("unique");
      this.__sqlDirection = ["prev", "prevunique"].includes(this.direction) ? "DESC" : "ASC";
      if (range !== void 0) {
        range.__lowerCached = range.lower !== void 0 && _encode(range.lower, this.__multiEntryIndex);
        range.__upperCached = range.upper !== void 0 && _encode(range.upper, this.__multiEntryIndex);
      }
      this.__gotValue = true;
      this["continue"]();
    };
    IDBCursor2.__createInstance = function() {
      var IDBCursor22 = IDBCursorAlias.__super;
      IDBCursor22.prototype = IDBCursorAlias.prototype;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _construct(IDBCursor22, args);
    };
    IDBCursor2.prototype.__find = function() {
      if (this.__multiEntryIndex) {
        this.__findMultiEntry.apply(this, arguments);
      } else {
        this.__findBasic.apply(this, arguments);
      }
    };
    IDBCursor2.prototype.__findBasic = function(key, primaryKey, tx, success, error2, recordsToLoad) {
      var continueCall = recordsToLoad !== void 0;
      recordsToLoad = recordsToLoad || 1;
      var me = this;
      var quotedKeyColumnName = sqlQuote(me.__keyColumnName);
      var quotedKey = sqlQuote("key");
      var sql = ["SELECT * FROM", escapeStoreNameForSQL(me.__store.__currentName)];
      var sqlValues = [];
      sql.push("WHERE", quotedKeyColumnName, "NOT NULL");
      setSQLForKeyRange(me.__range, quotedKeyColumnName, sql, sqlValues, true, true);
      var direction = me.__sqlDirection;
      var op = direction === "ASC" ? ">" : "<";
      if (primaryKey !== void 0) {
        sql.push("AND", quotedKey, op + "= ?");
        sqlValues.push(_encode(primaryKey));
      }
      if (key !== void 0) {
        sql.push("AND", quotedKeyColumnName, op + "= ?");
        sqlValues.push(_encode(key));
      } else if (continueCall && me.__key !== void 0) {
        sql.push("AND", quotedKeyColumnName, op + " ?");
        sqlValues.push(_encode(me.__key));
      }
      if (!me.__count) {
        sql.push("ORDER BY", quotedKeyColumnName, direction);
        if (me.__keyColumnName !== "key") {
          if (!me.__unique) {
            sql.push(",", quotedKey, direction);
          } else if (me.direction === "prevunique") {
            sql.push(",", quotedKey, "ASC");
          }
        }
        if (!me.__unique && me.__indexSource) {
          sql.push(",", sqlQuote(me.__valueColumnName), direction);
        }
        sql.push("LIMIT", recordsToLoad);
      }
      sql = sql.join(" ");
      CFG.DEBUG && console.log(sql, sqlValues);
      tx.executeSql(sql, sqlValues, function(tx2, data) {
        if (me.__count) {
          success(void 0, data.rows.length, void 0);
        } else if (data.rows.length > 1) {
          me.__prefetchedIndex = 0;
          me.__prefetchedData = data.rows;
          CFG.DEBUG && console.log("Preloaded " + me.__prefetchedData.length + " records for cursor");
          me.__decode(data.rows.item(0), success);
        } else if (data.rows.length === 1) {
          me.__decode(data.rows.item(0), success);
        } else {
          CFG.DEBUG && console.log("Reached end of cursors");
          success(void 0, void 0, void 0);
        }
      }, function(tx2, err) {
        CFG.DEBUG && console.log("Could not execute Cursor.continue", sql, sqlValues);
        error2(err);
      });
    };
    var leftBracketRegex = /\[/g;
    IDBCursor2.prototype.__findMultiEntry = function(key, primaryKey, tx, success, error2) {
      var me = this;
      if (me.__prefetchedData && me.__prefetchedData.length === me.__prefetchedIndex) {
        CFG.DEBUG && console.log("Reached end of multiEntry cursor");
        success(void 0, void 0, void 0);
        return;
      }
      var quotedKeyColumnName = sqlQuote(me.__keyColumnName);
      var sql = ["SELECT * FROM", escapeStoreNameForSQL(me.__store.__currentName)];
      var sqlValues = [];
      sql.push("WHERE", quotedKeyColumnName, "NOT NULL");
      if (me.__range && me.__range.lower !== void 0 && Array.isArray(me.__range.upper)) {
        if (me.__range.upper.indexOf(me.__range.lower) === 0) {
          sql.push("AND", quotedKeyColumnName, "LIKE ? ESCAPE '^'");
          sqlValues.push("%" + sqlLIKEEscape(me.__range.__lowerCached.slice(0, -1)) + "%");
        }
      }
      var direction = me.__sqlDirection;
      var op = direction === "ASC" ? ">" : "<";
      var quotedKey = sqlQuote("key");
      if (primaryKey !== void 0) {
        sql.push("AND", quotedKey, op + "= ?");
        sqlValues.push(_encode(primaryKey));
      }
      if (key !== void 0) {
        sql.push("AND", quotedKeyColumnName, op + "= ?");
        sqlValues.push(_encode(key));
      } else if (me.__key !== void 0) {
        sql.push("AND", quotedKeyColumnName, op + " ?");
        sqlValues.push(_encode(me.__key));
      }
      if (!me.__count) {
        sql.push("ORDER BY", quotedKeyColumnName, direction);
        if (!me.__unique && me.__keyColumnName !== "key") {
          sql.push(",", sqlQuote("key"), direction);
        }
        if (!me.__unique && me.__indexSource) {
          sql.push(",", sqlQuote(me.__valueColumnName), direction);
        }
      }
      sql = sql.join(" ");
      CFG.DEBUG && console.log(sql, sqlValues);
      tx.executeSql(sql, sqlValues, function(tx2, data) {
        if (data.rows.length > 0) {
          if (me.__count) {
            var ct = 0;
            for (var i2 = 0; i2 < data.rows.length; i2++) {
              var rowItem = data.rows.item(i2);
              var rowKey = _decode(rowItem[me.__keyColumnName], true);
              var matches = findMultiEntryMatches(rowKey, me.__range);
              ct += matches.length;
            }
            success(void 0, ct, void 0);
            return;
          }
          var rows = [];
          for (var _i = 0; _i < data.rows.length; _i++) {
            var _rowItem = data.rows.item(_i);
            var _rowKey = _decode(_rowItem[me.__keyColumnName], true);
            var _matches = findMultiEntryMatches(_rowKey, me.__range);
            var _iterator = _createForOfIteratorHelper(_matches), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var matchingKey = _step.value;
                var clone2 = {
                  matchingKey: _encode(matchingKey, true),
                  key: _rowItem.key
                };
                clone2[me.__keyColumnName] = _rowItem[me.__keyColumnName];
                clone2[me.__valueColumnName] = _rowItem[me.__valueColumnName];
                rows.push(clone2);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          var reverse = me.direction.indexOf("prev") === 0;
          rows.sort(function(a, b) {
            if (a.matchingKey.replace(leftBracketRegex, "z") < b.matchingKey.replace(leftBracketRegex, "z")) {
              return reverse ? 1 : -1;
            }
            if (a.matchingKey.replace(leftBracketRegex, "z") > b.matchingKey.replace(leftBracketRegex, "z")) {
              return reverse ? -1 : 1;
            }
            if (a.key < b.key) {
              return me.direction === "prev" ? 1 : -1;
            }
            if (a.key > b.key) {
              return me.direction === "prev" ? -1 : 1;
            }
            return 0;
          });
          if (rows.length > 1) {
            me.__prefetchedIndex = 0;
            me.__prefetchedData = {
              data: rows,
              length: rows.length,
              item: function item(index) {
                return this.data[index];
              }
            };
            CFG.DEBUG && console.log("Preloaded " + me.__prefetchedData.length + " records for multiEntry cursor");
            me.__decode(rows[0], success);
          } else if (rows.length === 1) {
            CFG.DEBUG && console.log("Reached end of multiEntry cursor");
            me.__decode(rows[0], success);
          } else {
            CFG.DEBUG && console.log("Reached end of multiEntry cursor");
            success(void 0, void 0, void 0);
          }
        } else {
          CFG.DEBUG && console.log("Reached end of multiEntry cursor");
          success(void 0, void 0, void 0);
        }
      }, function(tx2, err) {
        CFG.DEBUG && console.log("Could not execute Cursor.continue", sql, sqlValues);
        error2(err);
      });
    };
    IDBCursor2.prototype.__onsuccess = function(success) {
      var me = this;
      return function(key, value, primaryKey) {
        if (me.__count) {
          success(value, me.__request);
        } else {
          if (key !== void 0) {
            me.__gotValue = true;
          }
          me.__key = key === void 0 ? null : key;
          me.__primaryKey = primaryKey === void 0 ? null : primaryKey;
          me.__value = value === void 0 ? null : value;
          var result = key === void 0 ? null : me;
          success(result, me.__request);
        }
      };
    };
    IDBCursor2.prototype.__decode = function(rowItem, callback) {
      var me = this;
      if (me.__multiEntryIndex && me.__unique) {
        if (!me.__matchedKeys) {
          me.__matchedKeys = {};
        }
        if (me.__matchedKeys[rowItem.matchingKey]) {
          callback(void 0, void 0, void 0);
          return;
        }
        me.__matchedKeys[rowItem.matchingKey] = true;
      }
      var encKey = unescapeSQLiteResponse(me.__multiEntryIndex ? rowItem.matchingKey : rowItem[me.__keyColumnName]);
      var encVal = unescapeSQLiteResponse(rowItem[me.__valueColumnName]);
      var encPrimaryKey = unescapeSQLiteResponse(rowItem.key);
      var key = _decode(encKey, me.__multiEntryIndex);
      var val = me.__valueDecoder.decode(encVal);
      var primaryKey = _decode(encPrimaryKey);
      callback(key, val, primaryKey, encKey);
    };
    IDBCursor2.prototype.__sourceOrEffectiveObjStoreDeleted = function() {
      IDBObjectStore2.__invalidStateIfDeleted(this.__store, "The cursor's effective object store has been deleted");
      if (this.__indexSource)
        IDBIndex2.__invalidStateIfDeleted(this.source, "The cursor's index source has been deleted");
    };
    IDBCursor2.prototype.__invalidateCache = function() {
      this.__prefetchedData = null;
    };
    IDBCursor2.prototype.__continue = function(key, advanceContinue) {
      var me = this;
      var advanceState = me.__advanceCount !== void 0;
      IDBTransaction2.__assertActive(me.__store.transaction);
      me.__sourceOrEffectiveObjStoreDeleted();
      if (!me.__gotValue && !advanceContinue) {
        throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
      }
      if (key !== void 0) {
        convertValueToKeyRethrowingAndIfInvalid(key);
        var cmpResult = cmp2(key, me.key);
        if (cmpResult === 0 || me.direction.includes("next") && cmpResult === -1 || me.direction.includes("prev") && cmpResult === 1) {
          throw createDOMException("DataError", "Cannot " + (advanceState ? "advance" : "continue") + " the cursor in an unexpected direction");
        }
      }
      this.__continueFinish(key, void 0, advanceState);
    };
    IDBCursor2.prototype.__continueFinish = function(key, primaryKey, advanceState) {
      var me = this;
      var recordsToPreloadOnContinue = me.__advanceCount || CFG.cursorPreloadPackSize || 100;
      me.__gotValue = false;
      me.__request.__done = false;
      me.__store.transaction.__pushToQueue(me.__request, function cursorContinue(tx, args, success, error2, executeNextRequest) {
        function triggerSuccess(k, val, primKey) {
          if (advanceState) {
            if (me.__advanceCount >= 2 && k !== void 0) {
              me.__advanceCount--;
              me.__key = k;
              me.__continue(void 0, true);
              executeNextRequest();
              return;
            }
            me.__advanceCount = void 0;
          }
          me.__onsuccess(success)(k, val, primKey);
        }
        if (me.__prefetchedData) {
          me.__prefetchedIndex++;
          if (me.__prefetchedIndex < me.__prefetchedData.length) {
            me.__decode(me.__prefetchedData.item(me.__prefetchedIndex), function(k, val, primKey, encKey) {
              function checkKey() {
                var cmpResult = key === void 0 || cmp2(k, key);
                if (cmpResult > 0 || cmpResult === 0 && (me.__unique || primaryKey === void 0 || cmp2(primKey, primaryKey) >= 0)) {
                  triggerSuccess(k, val, primKey);
                  return;
                }
                cursorContinue(tx, args, success, error2);
              }
              if (me.__unique && !me.__multiEntryIndex && encKey === _encode(me.key, me.__multiEntryIndex)) {
                cursorContinue(tx, args, success, error2);
                return;
              }
              checkKey();
            });
            return;
          }
        }
        me.__find(key, primaryKey, tx, triggerSuccess, function() {
          me.__advanceCount = void 0;
          error2.apply(void 0, arguments);
        }, recordsToPreloadOnContinue);
      });
    };
    IDBCursor2.prototype["continue"] = function() {
      this.__continue(arguments[0]);
    };
    IDBCursor2.prototype.continuePrimaryKey = function(key, primaryKey) {
      var me = this;
      IDBTransaction2.__assertActive(me.__store.transaction);
      me.__sourceOrEffectiveObjStoreDeleted();
      if (!me.__indexSource) {
        throw createDOMException("InvalidAccessError", "`continuePrimaryKey` may only be called on an index source.");
      }
      if (!["next", "prev"].includes(me.direction)) {
        throw createDOMException("InvalidAccessError", "`continuePrimaryKey` may not be called with unique cursors.");
      }
      if (!me.__gotValue) {
        throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
      }
      convertValueToKeyRethrowingAndIfInvalid(key);
      convertValueToKeyRethrowingAndIfInvalid(primaryKey);
      var cmpResult = cmp2(key, me.key);
      if (me.direction === "next" && cmpResult === -1 || me.direction === "prev" && cmpResult === 1) {
        throw createDOMException("DataError", "Cannot continue the cursor in an unexpected direction");
      }
      function noErrors() {
        me.__continueFinish(key, primaryKey, false);
      }
      if (cmpResult === 0) {
        encode(primaryKey, function(encPrimaryKey) {
          encode(me.primaryKey, function(encObjectStorePos) {
            if (encPrimaryKey === encObjectStorePos || me.direction === "next" && encPrimaryKey < encObjectStorePos || me.direction === "prev" && encPrimaryKey > encObjectStorePos) {
              throw createDOMException("DataError", "Cannot continue the cursor in an unexpected direction");
            }
            noErrors();
          });
        });
      } else {
        noErrors();
      }
    };
    IDBCursor2.prototype.advance = function(count) {
      var me = this;
      count = enforceRange(count, "unsigned long");
      if (count === 0) {
        throw new TypeError("Calling advance() with count argument 0");
      }
      if (me.__gotValue) {
        me.__advanceCount = count;
      }
      me.__continue();
    };
    IDBCursor2.prototype.update = function(valueToUpdate) {
      var me = this;
      if (!arguments.length)
        throw new TypeError("A value must be passed to update()");
      IDBTransaction2.__assertActive(me.__store.transaction);
      me.__store.transaction.__assertWritable();
      me.__sourceOrEffectiveObjStoreDeleted();
      if (!me.__gotValue) {
        throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
      }
      if (me.__keyOnly) {
        throw createDOMException("InvalidStateError", "This cursor method cannot be called when the key only flag has been set.");
      }
      var request2 = me.__store.transaction.__createRequest(me);
      var key = me.primaryKey;
      function addToQueue(clonedValue2) {
        IDBObjectStore2.__storingRecordObjectStore(request2, me.__store, false, clonedValue2, false, key);
      }
      if (me.__store.keyPath !== null) {
        var _me$__store$__validat = me.__store.__validateKeyAndValueAndCloneValue(valueToUpdate, void 0, true), _me$__store$__validat2 = _slicedToArray(_me$__store$__validat, 2), evaluatedKey = _me$__store$__validat2[0], clonedValue = _me$__store$__validat2[1];
        if (cmp2(me.primaryKey, evaluatedKey) !== 0) {
          throw createDOMException("DataError", "The key of the supplied value to `update` is not equal to the cursor's effective key");
        }
        addToQueue(clonedValue);
      } else {
        var _clonedValue = clone(valueToUpdate);
        addToQueue(_clonedValue);
      }
      return request2;
    };
    IDBCursor2.prototype["delete"] = function() {
      var me = this;
      IDBTransaction2.__assertActive(me.__store.transaction);
      me.__store.transaction.__assertWritable();
      me.__sourceOrEffectiveObjStoreDeleted();
      if (!me.__gotValue) {
        throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
      }
      if (me.__keyOnly) {
        throw createDOMException("InvalidStateError", "This cursor method cannot be called when the key only flag has been set.");
      }
      return this.__store.transaction.__addToTransactionQueue(function cursorDelete(tx, args, success, error2) {
        me.__find(void 0, void 0, tx, function(key, value, primaryKey) {
          var sql = "DELETE FROM  " + escapeStoreNameForSQL(me.__store.__currentName) + ' WHERE "key" = ?';
          CFG.DEBUG && console.log(sql, key, primaryKey);
          tx.executeSql(sql, [escapeSQLiteStatement(_encode(primaryKey))], function(tx2, data) {
            if (data.rowsAffected === 1) {
              success(void 0);
            } else {
              error2("No rows with key found" + key);
            }
          }, function(tx2, data) {
            error2(data);
          });
        }, error2);
      }, void 0, me);
    };
    IDBCursor2.prototype[Symbol.toStringTag] = "IDBCursorPrototype";
    defineReadonlyOuterInterface(IDBCursor2.prototype, ["source", "direction", "key", "primaryKey", "request"]);
    Object.defineProperty(IDBCursor2, "prototype", {
      writable: false
    });
    function IDBCursorWithValue2() {
      throw new TypeError("Illegal constructor");
    }
    IDBCursorWithValue2.prototype = Object.create(IDBCursor2.prototype);
    Object.defineProperty(IDBCursorWithValue2.prototype, "constructor", {
      enumerable: false,
      writable: true,
      configurable: true,
      value: IDBCursorWithValue2
    });
    var IDBCursorWithValueAlias = IDBCursorWithValue2;
    IDBCursorWithValue2.__createInstance = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      function IDBCursorWithValue22() {
        var _IDBCursor$__super;
        (_IDBCursor$__super = IDBCursor2.__super).call.apply(_IDBCursor$__super, [this].concat(args));
        this[Symbol.toStringTag] = "IDBCursorWithValue";
        defineReadonlyProperties(this, "value");
      }
      IDBCursorWithValue22.prototype = IDBCursorWithValueAlias.prototype;
      return new IDBCursorWithValue22();
    };
    defineReadonlyOuterInterface(IDBCursorWithValue2.prototype, ["value"]);
    IDBCursorWithValue2.prototype[Symbol.toStringTag] = "IDBCursorWithValuePrototype";
    Object.defineProperty(IDBCursorWithValue2, "prototype", {
      writable: false
    });
    function setConfig(prop, val) {
      if (prop && _typeof$1(prop) === "object") {
        Object.entries(prop).forEach(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), p = _ref2[0], val2 = _ref2[1];
          setConfig(p, val2);
        });
        return;
      }
      if (!(prop in CFG)) {
        throw new Error(prop + " is not a valid configuration property");
      }
      CFG[prop] = val;
      if (prop === "registerSCA" && typeof val === "function") {
        register(val);
      }
    }
    function setGlobalVars2(idb, initialConfig) {
      if (initialConfig) {
        setConfig(initialConfig);
      }
      var IDB = idb || (typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : typeof global$1 !== "undefined" ? global$1 : {});
      function shim(name, value, propDesc) {
        if (!propDesc || !Object.defineProperty) {
          try {
            IDB[name] = value;
          } catch (e) {
            console.log(e);
          }
        }
        if (IDB[name] !== value && Object.defineProperty) {
          try {
            var desc = propDesc || {};
            if (!("get" in desc)) {
              if (!("value" in desc)) {
                desc.value = value;
              }
              if (!("writable" in desc)) {
                desc.writable = true;
              }
            } else {
              var _o, _mutatorMap;
              var o = (_o = {}, _mutatorMap = {}, _mutatorMap[name] = _mutatorMap[name] || {}, _mutatorMap[name].get = function() {
                return propDesc.get.call(this);
              }, _defineEnumerableProperties(_o, _mutatorMap), _o);
              desc = Object.getOwnPropertyDescriptor(o, name);
            }
            Object.defineProperty(IDB, name, desc);
          } catch (e) {
          }
        }
        if (IDB[name] !== value) {
          typeof console !== "undefined" && console.warn && console.warn("Unable to shim " + name);
        }
      }
      if (CFG.win.openDatabase !== void 0) {
        shim("shimIndexedDB", shimIndexedDB, {
          enumerable: false,
          configurable: true
        });
      }
      if (IDB.shimIndexedDB) {
        IDB.shimIndexedDB.__useShim = function() {
          function setNonIDBGlobals() {
            var prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            shim(prefix + "DOMException", ShimDOMException);
            shim(prefix + "DOMStringList", DOMStringList, {
              enumerable: false,
              configurable: true,
              writable: true,
              value: DOMStringList
            });
            shim(prefix + "Event", ShimEvent, {
              configurable: true,
              writable: true,
              value: ShimEvent,
              enumerable: false
            });
            shim(prefix + "CustomEvent", ShimCustomEvent, {
              configurable: true,
              writable: true,
              value: ShimCustomEvent,
              enumerable: false
            });
            shim(prefix + "EventTarget", EventTarget, {
              configurable: true,
              writable: true,
              value: EventTarget,
              enumerable: false
            });
          }
          var shimIDBFactory = IDBFactory2;
          if (CFG.win.openDatabase !== void 0) {
            shimIndexedDB.__openDatabase = CFG.win.openDatabase.bind(CFG.win);
            shim("indexedDB", shimIndexedDB, {
              enumerable: true,
              configurable: true,
              get: function get() {
                if (this !== IDB && !isNullish(this) && !this.shimNS) {
                  throw new TypeError("Illegal invocation");
                }
                return shimIndexedDB;
              }
            });
            [["IDBFactory", shimIDBFactory], ["IDBDatabase", IDBDatabase2], ["IDBObjectStore", IDBObjectStore2], ["IDBIndex", IDBIndex2], ["IDBTransaction", IDBTransaction2], ["IDBCursor", IDBCursor2], ["IDBCursorWithValue", IDBCursorWithValue2], ["IDBKeyRange", IDBKeyRange2], ["IDBRequest", IDBRequest2], ["IDBOpenDBRequest", IDBOpenDBRequest2], ["IDBVersionChangeEvent", IDBVersionChangeEvent2]].forEach(function(_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2), prop = _ref4[0], obj = _ref4[1];
              shim(prop, obj, {
                enumerable: false,
                configurable: true
              });
            });
            if (CFG.fs) {
              setFS(CFG.fs);
            }
            if (CFG.fullIDLSupport) {
              Object.setPrototypeOf(IDB.IDBOpenDBRequest, IDB.IDBRequest);
              Object.setPrototypeOf(IDB.IDBCursorWithValue, IDB.IDBCursor);
              Object.setPrototypeOf(IDBDatabase2, EventTarget);
              Object.setPrototypeOf(IDBRequest2, EventTarget);
              Object.setPrototypeOf(IDBTransaction2, EventTarget);
              Object.setPrototypeOf(IDBVersionChangeEvent2, ShimEvent);
              Object.setPrototypeOf(ShimDOMException, Error);
              Object.setPrototypeOf(ShimDOMException.prototype, Error.prototype);
              setPrototypeOfCustomEvent();
            }
            if (IDB.indexedDB && !IDB.indexedDB.toString().includes("[native code]")) {
              if (CFG.addNonIDBGlobals) {
                setNonIDBGlobals("Shim");
              }
              if (CFG.replaceNonIDBGlobals) {
                setNonIDBGlobals();
              }
            }
            IDB.shimIndexedDB.__setConnectionQueueOrigin();
          }
        };
        IDB.shimIndexedDB.__debug = function(val) {
          CFG.DEBUG = val;
        };
        IDB.shimIndexedDB.__setConfig = setConfig;
        IDB.shimIndexedDB.__getConfig = function(prop) {
          if (!(prop in CFG)) {
            throw new Error(prop + " is not a valid configuration property");
          }
          return CFG[prop];
        };
        IDB.shimIndexedDB.__setUnicodeIdentifiers = function(_ref5) {
          var UnicodeIDStart2 = _ref5.UnicodeIDStart, UnicodeIDContinue2 = _ref5.UnicodeIDContinue;
          setConfig({
            UnicodeIDStart: UnicodeIDStart2,
            UnicodeIDContinue: UnicodeIDContinue2
          });
        };
      } else {
        IDB.shimIndexedDB = {};
        ["__useShim", "__debug", "__setConfig", "__getConfig", "__setUnicodeIdentifiers"].forEach(function(prop) {
          IDB.shimIndexedDB[prop] = function() {
            console.warn("This browser does not have WebSQL to shim.");
          };
        });
      }
      if (!("indexedDB" in IDB) && typeof window !== "undefined") {
        IDB.indexedDB = IDB.indexedDB || IDB.webkitIndexedDB || IDB.mozIndexedDB || IDB.oIndexedDB || IDB.msIndexedDB;
      }
      var poorIndexedDbSupport = false;
      if (typeof navigator !== "undefined" && navigator.userAgent && (/Android (?:2|3|4\.[0-3])/.test(navigator.userAgent) && !navigator.userAgent.includes("Chrome") || (!navigator.userAgent.includes("Safari") || navigator.userAgent.includes("Chrome")) && /(iPad|iPhone|iPod)(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])* o[s\u017F] 9_/i.test(navigator.userAgent) && !window.MSStream)) {
        poorIndexedDbSupport = true;
      }
      if (!CFG.DEFAULT_DB_SIZE) {
        CFG.DEFAULT_DB_SIZE = (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") ? 25 : 4) * 1024 * 1024;
      }
      if (!CFG.avoidAutoShim && (!IDB.indexedDB || poorIndexedDbSupport) && CFG.win.openDatabase !== void 0) {
        IDB.shimIndexedDB.__useShim();
      } else {
        IDB.IDBDatabase = IDB.IDBDatabase || IDB.webkitIDBDatabase;
        IDB.IDBTransaction = IDB.IDBTransaction || IDB.webkitIDBTransaction || {};
        IDB.IDBCursor = IDB.IDBCursor || IDB.webkitIDBCursor;
        IDB.IDBKeyRange = IDB.IDBKeyRange || IDB.webkitIDBKeyRange;
      }
      return IDB;
    }
    CFG.win = typeof window !== "undefined" ? window : self;
    CFG.UnicodeIDStart = UnicodeIDStart;
    CFG.UnicodeIDContinue = UnicodeIDContinue;
    return setGlobalVars2;
  });
});
var indexeddbshim_noninvasive_default = __VIRTUAL_FILE;

// deno-cache:https://deno.land/x/sqlite@v3.2.1/src/constants.ts
var Status = /* @__PURE__ */ ((Status2) => {
  Status2[Status2["Unknown"] = -1] = "Unknown";
  Status2[Status2["SqliteOk"] = 0] = "SqliteOk";
  Status2[Status2["SqliteError"] = 1] = "SqliteError";
  Status2[Status2["SqliteInternal"] = 2] = "SqliteInternal";
  Status2[Status2["SqlitePerm"] = 3] = "SqlitePerm";
  Status2[Status2["SqliteAbort"] = 4] = "SqliteAbort";
  Status2[Status2["SqliteBusy"] = 5] = "SqliteBusy";
  Status2[Status2["SqliteLocked"] = 6] = "SqliteLocked";
  Status2[Status2["SqliteNoMem"] = 7] = "SqliteNoMem";
  Status2[Status2["SqliteReadOnly"] = 8] = "SqliteReadOnly";
  Status2[Status2["SqliteInterrupt"] = 9] = "SqliteInterrupt";
  Status2[Status2["SqliteIOErr"] = 10] = "SqliteIOErr";
  Status2[Status2["SqliteCorrupt"] = 11] = "SqliteCorrupt";
  Status2[Status2["SqliteNotFound"] = 12] = "SqliteNotFound";
  Status2[Status2["SqliteFull"] = 13] = "SqliteFull";
  Status2[Status2["SqliteCantOpen"] = 14] = "SqliteCantOpen";
  Status2[Status2["SqliteProtocol"] = 15] = "SqliteProtocol";
  Status2[Status2["SqliteEmpty"] = 16] = "SqliteEmpty";
  Status2[Status2["SqliteSchema"] = 17] = "SqliteSchema";
  Status2[Status2["SqliteTooBig"] = 18] = "SqliteTooBig";
  Status2[Status2["SqliteConstraint"] = 19] = "SqliteConstraint";
  Status2[Status2["SqliteMismatch"] = 20] = "SqliteMismatch";
  Status2[Status2["SqliteMisuse"] = 21] = "SqliteMisuse";
  Status2[Status2["SqliteNoLFS"] = 22] = "SqliteNoLFS";
  Status2[Status2["SqliteAuth"] = 23] = "SqliteAuth";
  Status2[Status2["SqliteFormat"] = 24] = "SqliteFormat";
  Status2[Status2["SqliteRange"] = 25] = "SqliteRange";
  Status2[Status2["SqliteNotADB"] = 26] = "SqliteNotADB";
  Status2[Status2["SqliteNotice"] = 27] = "SqliteNotice";
  Status2[Status2["SqliteWarning"] = 28] = "SqliteWarning";
  Status2[Status2["SqliteRow"] = 100] = "SqliteRow";
  Status2[Status2["SqliteDone"] = 101] = "SqliteDone";
  return Status2;
})(Status || {});

// deno-cache:https://deno.land/x/sqlite@v3.2.1/src/error.ts
var SqliteError = class extends Error {
  /**
   * Extension over the standard JS Error object
   * to also contain class members for error code
   * and error code name.
   *
   * Instances of this class should not be constructed
   * directly and should only be obtained
   * from exceptions raised in this module.
   */
  constructor(context, code) {
    let message;
    let status;
    if (typeof context === "string") {
      message = context;
      status = -1 /* Unknown */;
    } else {
      message = getStr(context, context.get_sqlite_error_str());
      status = context.get_status();
    }
    super(message);
    this.code = code ?? status;
    this.name = "SqliteError";
  }
  /**
   * The SQLite status code which caused this error.
   *
   * Errors that originate in the JavaScript part of
   * the library will not have an associated status
   * code. For these errors, the code will be
   * `Status.Unknown`.
   *
   * These codes are accessible via
   * the exported `Status` object.
   */
  code;
  /**
   * Key of code in exported `status`
   * object.
   *
   * E.g. if `code` is `19`,
   * `codeName` would be `SqliteConstraint`.
   */
  get codeName() {
    return Status[this.code];
  }
};

// deno-cache:https://deno.land/x/sqlite@v3.2.1/src/wasm.ts
function setStr(wasm2, str, closure) {
  const bytes = new TextEncoder().encode(str);
  const ptr = wasm2.malloc(bytes.length + 1);
  if (ptr === 0) {
    throw new SqliteError("Out of memory.");
  }
  const mem = new Uint8Array(wasm2.memory.buffer, ptr, bytes.length + 1);
  mem.set(bytes);
  mem[bytes.length] = 0;
  try {
    const result = closure(ptr);
    wasm2.free(ptr);
    return result;
  } catch (error) {
    wasm2.free(ptr);
    throw error;
  }
}
function setArr(wasm2, arr, closure) {
  const ptr = wasm2.malloc(arr.length);
  if (ptr === 0) {
    throw new SqliteError("Out of memory.");
  }
  const mem = new Uint8Array(wasm2.memory.buffer, ptr, arr.length);
  mem.set(arr);
  try {
    const result = closure(ptr);
    wasm2.free(ptr);
    return result;
  } catch (error) {
    wasm2.free(ptr);
    throw error;
  }
}
function getStr(wasm2, ptr) {
  const len = wasm2.str_len(ptr);
  const bytes = new Uint8Array(wasm2.memory.buffer, ptr, len);
  if (len > 16) {
    return new TextDecoder().decode(bytes);
  } else {
    let str = "";
    let idx = 0;
    while (idx < len) {
      let u0 = bytes[idx++];
      if (!(u0 & 128)) {
        str += String.fromCharCode(u0);
        continue;
      }
      const u1 = bytes[idx++] & 63;
      if ((u0 & 224) == 192) {
        str += String.fromCharCode((u0 & 31) << 6 | u1);
        continue;
      }
      const u2 = bytes[idx++] & 63;
      if ((u0 & 240) == 224) {
        u0 = (u0 & 15) << 12 | u1 << 6 | u2;
      } else {
        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | bytes[idx++] & 63;
      }
      if (u0 < 65536) {
        str += String.fromCharCode(u0);
      } else {
        const ch = u0 - 65536;
        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
      }
    }
    return str;
  }
}

// deno-cache:https://deno.land/x/sqlite@v3.2.1/build/vfs.js
function env(inst) {
  const env2 = {
    // Print a string pointer to console
    js_print: (str_ptr) => {
      const text = getStr(inst.exports, str_ptr);
      console.log(text[text.length - 1] === "\n" ? text.slice(0, -1) : text);
    },
    // Open the file at path, mode = 0 is open RW, mode = 1 is open TEMP
    js_open: (path_ptr, mode, flags) => {
      let path;
      switch (mode) {
        case 0:
          path = getStr(inst.exports, path_ptr);
          break;
        case 1:
          path = Deno.makeTempFileSync({ prefix: "deno_sqlite" });
          break;
      }
      const write = !!(flags & 2);
      const create = !!(flags & 4);
      const rid = Deno.openSync(path, { read: true, write, create }).rid;
      return rid;
    },
    // Close a file
    js_close: (rid) => {
      Deno.close(rid);
    },
    // Delete file at path
    js_delete: (path_ptr) => {
      const path = getStr(inst.exports, path_ptr);
      Deno.removeSync(path);
    },
    // Read from a file to a buffer in the module
    js_read: (rid, buffer_ptr, offset, amount) => {
      const buffer = new Uint8Array(
        inst.exports.memory.buffer,
        buffer_ptr,
        amount
      );
      Deno.seekSync(rid, offset, Deno.SeekMode.Start);
      return Deno.readSync(rid, buffer);
    },
    // Write to a file from a buffer in the module
    js_write: (rid, buffer_ptr, offset, amount) => {
      const buffer = new Uint8Array(
        inst.exports.memory.buffer,
        buffer_ptr,
        amount
      );
      Deno.seekSync(rid, offset, Deno.SeekMode.Start);
      return Deno.writeSync(rid, buffer);
    },
    // Truncate the given file
    js_truncate: (rid, size) => {
      Deno.ftruncateSync(rid, size);
    },
    // Sync file data to disk
    js_sync: (rid) => {
      Deno.fdatasyncSync(rid);
    },
    // Retrieve the size of the given file
    js_size: (rid) => {
      return Deno.fstatSync(rid).size;
    },
    // Acquire a SHARED or EXCLUSIVE file lock
    js_lock: (rid, exclusive) => {
      if (Deno.flockSync)
        Deno.flockSync(rid, exclusive !== 0);
    },
    // Release a file lock
    js_unlock: (rid) => {
      if (Deno.funlockSync)
        Deno.funlockSync(rid);
    },
    // Return current time in ms since UNIX epoch
    js_time: () => {
      return Date.now();
    },
    // Return the timezone offset in minutes for
    // the current locale.
    js_timezone: () => {
      return (/* @__PURE__ */ new Date()).getTimezoneOffset();
    },
    // Determine if a path exists
    js_exists: (path_ptr) => {
      const path = getStr(inst.exports, path_ptr);
      try {
        Deno.statSync(path);
      } catch (e) {
        if (e instanceof Deno.errors.NotFound) {
          return 0;
        }
      }
      return 1;
    },
    // Determine if a path is accessible i.e. if it has read/write permissions
    // TODO(dyedgreen): Properly determine if there are read permissions
    js_access: (path_ptr) => {
      const path = getStr(inst.exports, path_ptr);
      try {
        Deno.statSync(path);
      } catch (e) {
        if (e instanceof Deno.errors.PermissionDenied) {
          return 0;
        }
      }
      return 1;
    }
  };
  return { env: env2 };
}

// deno-cache:https://deno.land/x/sqlite@v3.2.1/build/sqlite.js
var wasm = "";
function decode(base64) {
  const bytesStr = atob(base64);
  const bytes = new Uint8Array(bytesStr.length);
  for (let i = 0, c = bytesStr.length; i < c; i++) {
    bytes[i] = bytesStr.charCodeAt(i);
  }
  return bytes;
}
var moduleOrInstance = {
  module: null,
  instances: []
};
async function compile() {
  moduleOrInstance.module = await WebAssembly.compile(decode(wasm));
}
function instantiate() {
  if (moduleOrInstance.instances.length) {
    return moduleOrInstance.instances.pop();
  } else {
    const placeholder = { exports: null };
    const instance = new WebAssembly.Instance(
      moduleOrInstance.module,
      env(placeholder)
    );
    placeholder.exports = instance.exports;
    instance.exports.seed_rng(Date.now());
    return instance;
  }
}

// deno-cache:https://deno.land/x/sqlite@v3.2.1/src/query.ts
var PreparedQuery = class {
  _wasm;
  _stmt;
  _openStatements;
  _status;
  _iterKv;
  _rowKeys;
  _finalized;
  /**
   * A prepared query which can be executed many
   * times.
   *
   * The constructor should never be used directly.
   * Instead a prepared query can be obtained by
   * calling `DB.prepareQuery`.
   */
  constructor(wasm2, stmt, openStatements) {
    this._wasm = wasm2;
    this._stmt = stmt;
    this._openStatements = openStatements;
    this._status = -1 /* Unknown */;
    this._iterKv = false;
    this._finalized = false;
  }
  startQuery(params) {
    if (this._finalized) {
      throw new SqliteError("Query is finalized.");
    }
    this._wasm.reset(this._stmt);
    this._wasm.clear_bindings(this._stmt);
    let parameters = [];
    if (Array.isArray(params)) {
      parameters = params;
    } else if (typeof params === "object") {
      for (const key of Object.keys(params)) {
        let name = key;
        if (name[0] !== ":" && name[0] !== "@" && name[0] !== "$") {
          name = `:${name}`;
        }
        const idx = setStr(
          this._wasm,
          name,
          (ptr) => this._wasm.bind_parameter_index(this._stmt, ptr)
        );
        if (idx === -1 /* Error */) {
          throw new SqliteError(`No parameter named '${name}'.`);
        }
        parameters[idx - 1] = params[key];
      }
    }
    for (let i = 0; i < parameters.length; i++) {
      let value = parameters[i];
      let status;
      switch (typeof value) {
        case "boolean":
          value = value ? 1 : 0;
        case "number":
          if (Number.isSafeInteger(value)) {
            status = this._wasm.bind_int(this._stmt, i + 1, value);
          } else {
            status = this._wasm.bind_double(this._stmt, i + 1, value);
          }
          break;
        case "bigint":
          if (value > 9223372036854775807n || value < -9223372036854775808n) {
            throw new SqliteError(
              `BigInt value ${value} overflows 64 bit integer.`
            );
          } else {
            const posVal = value >= 0n ? value : -value;
            const sign = value >= 0n ? 1 : -1;
            const upper = Number(BigInt.asUintN(32, posVal >> 32n));
            const lower = Number(BigInt.asUintN(32, posVal));
            status = this._wasm.bind_big_int(
              this._stmt,
              i + 1,
              sign,
              upper,
              lower
            );
          }
          break;
        case "string":
          status = setStr(
            this._wasm,
            value,
            (ptr) => this._wasm.bind_text(this._stmt, i + 1, ptr)
          );
          break;
        default:
          if (value instanceof Date) {
            status = setStr(
              this._wasm,
              value.toISOString(),
              (ptr) => this._wasm.bind_text(this._stmt, i + 1, ptr)
            );
          } else if (value instanceof Uint8Array) {
            const size = value.length;
            status = setArr(
              this._wasm,
              value,
              (ptr) => this._wasm.bind_blob(this._stmt, i + 1, ptr, size)
            );
          } else if (value === null || value === void 0) {
            status = this._wasm.bind_null(this._stmt, i + 1);
          } else {
            throw new SqliteError(`Can not bind ${typeof value}.`);
          }
          break;
      }
      if (status !== 0 /* SqliteOk */) {
        throw new SqliteError(this._wasm, status);
      }
    }
  }
  getQueryRow() {
    if (this._finalized) {
      throw new SqliteError("Query is finalized.");
    }
    const columnCount = this._wasm.column_count(this._stmt);
    const row = [];
    for (let i = 0; i < columnCount; i++) {
      switch (this._wasm.column_type(this._stmt, i)) {
        case 1 /* Integer */:
          row.push(this._wasm.column_int(this._stmt, i));
          break;
        case 2 /* Float */:
          row.push(this._wasm.column_double(this._stmt, i));
          break;
        case 3 /* Text */:
          row.push(
            getStr(
              this._wasm,
              this._wasm.column_text(this._stmt, i)
            )
          );
          break;
        case 4 /* Blob */: {
          const ptr = this._wasm.column_blob(this._stmt, i);
          if (ptr === 0) {
            row.push(null);
          } else {
            const length = this._wasm.column_bytes(this._stmt, i);
            row.push(
              new Uint8Array(this._wasm.memory.buffer, ptr, length).slice()
            );
          }
          break;
        }
        case 6 /* BigInteger */: {
          const ptr = this._wasm.column_text(this._stmt, i);
          row.push(BigInt(getStr(this._wasm, ptr)));
          break;
        }
        default:
          row.push(null);
          break;
      }
    }
    return row;
  }
  makeRowObject(row) {
    if (this._rowKeys == null) {
      const rowCount = this._wasm.column_count(this._stmt);
      this._rowKeys = [];
      for (let i = 0; i < rowCount; i++) {
        this._rowKeys.push(
          getStr(this._wasm, this._wasm.column_name(this._stmt, i))
        );
      }
    }
    const obj = row.reduce((obj2, val, idx) => {
      obj2[this._rowKeys[idx]] = val;
      return obj2;
    }, {});
    return obj;
  }
  /**
   * Binds the given parameters to the query
   * and returns an iterator over rows.
   *
   * Using an iterator avoids loading all returned
   * rows into memory and hence allows to process a large
   * number of rows.
   *
   * # Example:
   * ```typescript
   * const query = db.prepareQuery<[number, string]>("SELECT id, name FROM people");
   * for (const [id, name] of query.iter()) {
   *   // ...
   * }
   * ```
   *
   * Calling `iter` invalidates any iterators previously returned
   * from this prepared query. Using an invalidated iterator is a bug.
   *
   * To avoid SQL injection, user-provided values
   * should always be passed to the database through
   * a query parameter.
   *
   * See `QueryParameterSet` for documentation on
   * how values can be bound to SQL statements.
   *
   * See `QueryParameter` for documentation on how
   * values are returned from the database.
   */
  iter(params) {
    this.startQuery(params);
    this._status = this._wasm.step(this._stmt);
    if (this._status !== 100 /* SqliteRow */ && this._status !== 101 /* SqliteDone */) {
      throw new SqliteError(this._wasm, this._status);
    }
    this._iterKv = false;
    return this;
  }
  /**
   * Like `iter` except each row is returned
   * as an object containing key-value pairs.
   */
  iterEntries(params) {
    this.iter(params);
    this._iterKv = true;
    return this;
  }
  /**
   * @ignore
   *
   * Implements the iterable protocol. It is
   * a bug to call this method directly.
   */
  [Symbol.iterator]() {
    return this;
  }
  /**
   * @ignore
   *
   * Implements the iterator protocol. It is
   * a bug to call this method directly.
   */
  next() {
    if (this._status === 100 /* SqliteRow */) {
      const value = this.getQueryRow();
      this._status = this._wasm.step(this._stmt);
      if (this._iterKv) {
        return { value: this.makeRowObject(value), done: false };
      } else {
        return { value, done: false };
      }
    } else if (this._status === 101 /* SqliteDone */) {
      return { value: null, done: true };
    } else {
      throw new SqliteError(this._wasm, this._status);
    }
  }
  /**
   * Binds the given parameters to the query
   * and returns an array containing all resulting
   * rows.
   *
   * Calling `all` invalidates any iterators
   * previously returned by calls to `iter`.
   * Using an invalidated iterator is a bug.
   *
   * To avoid SQL injection, user-provided values
   * should always be passed to the database through
   * a query parameter.
   *
   * See `QueryParameterSet` for documentation on
   * how values can be bound to SQL statements.
   *
   * See `QueryParameter` for documentation on how
   * values are returned from the database.
   */
  all(params) {
    this.startQuery(params);
    const rows = [];
    this._status = this._wasm.step(this._stmt);
    while (this._status === 100 /* SqliteRow */) {
      rows.push(this.getQueryRow());
      this._status = this._wasm.step(this._stmt);
    }
    if (this._status !== 101 /* SqliteDone */) {
      throw new SqliteError(this._wasm, this._status);
    }
    return rows;
  }
  /**
   * Like `all` except each row is returned
   * as an object containing key-value pairs.
   */
  allEntries(params) {
    return this.all(params).map((row) => this.makeRowObject(row));
  }
  /**
   * Binds the given parameters to the query and
   * returns exactly one row.
   *
   * If the query does not return exactly one row,
   * this throws an error.
   *
   * Calling `one` invalidates any iterators
   * previously returned by calls to `iter`.
   * Using an invalidated iterator is a bug.
   *
   * To avoid SQL injection, user-provided values
   * should always be passed to the database through
   * a query parameter.
   *
   * See `QueryParameterSet` for documentation on
   * how values can be bound to SQL statements.
   *
   * See `QueryParameter` for documentation on how
   * values are returned from the database.
   */
  one(params) {
    this.startQuery(params);
    this._status = this._wasm.step(this._stmt);
    if (this._status !== 100 /* SqliteRow */) {
      if (this._status === 101 /* SqliteDone */) {
        throw new SqliteError("The query did not return any rows.");
      } else {
        throw new SqliteError(this._wasm, this._status);
      }
    }
    const row = this.getQueryRow();
    this._status = this._wasm.step(this._stmt);
    if (this._status !== 101 /* SqliteDone */) {
      if (this._status === 100 /* SqliteRow */) {
        throw new SqliteError("The query returned more than one row.");
      } else {
        throw new SqliteError(this._wasm, this._status);
      }
    }
    return row;
  }
  /**
   * Like `one` except the row is returned
   * as an object containing key-value pairs.
   */
  oneEntry(params) {
    return this.makeRowObject(this.one(params));
  }
  /**
   * Binds the given parameters to the query and
   * executes the query, ignoring any rows which
   * might be returned.
   *
   * Using this method is more efficient when the
   * rows returned by a query are not needed or
   * the query does not return any rows.
   *
   * Calling `execute` invalidates any iterators
   * previously returned by calls to `iter`.
   * Using an invalidated iterator is a bug.
   *
   * To avoid SQL injection, user-provided values
   * should always be passed to the database through
   * a query parameter.
   *
   * See `QueryParameterSet` for documentation on
   * how values can be bound to SQL statements.
   */
  execute(params) {
    this.startQuery(params);
    this._status = this._wasm.step(this._stmt);
    while (this._status === 100 /* SqliteRow */) {
      this._status = this._wasm.step(this._stmt);
    }
    if (this._status !== 101 /* SqliteDone */) {
      throw new SqliteError(this._wasm, this._status);
    }
  }
  /**
   * Closes the prepared query. This must be
   * called once the query is no longer needed
   * to avoid leaking resources.
   *
   * After a prepared query has been finalized,
   * trying to call `iter`, `all`, `one`,
   * `execute`, or `columns`, or using iterators which where
   * previously obtained from the finalized query
   * is a bug.
   *
   * `finalize` may safely be called multiple
   * times.
   */
  finalize() {
    if (!this._finalized) {
      this._wasm.finalize(this._stmt);
      this._openStatements.delete(this._stmt);
      this._finalized = true;
    }
  }
  /**
   * Returns the column names for the query
   * results.
   *
   * This method returns an array of objects,
   * where each object has the following properties:
   *
   * | Property     | Value                                      |
   * |--------------|--------------------------------------------|
   * | `name`       | the result of `sqlite3_column_name`        |
   * | `originName` | the result of `sqlite3_column_origin_name` |
   * | `tableName`  | the result of `sqlite3_column_table_name`  |
   */
  columns() {
    if (this._finalized) {
      throw new SqliteError(
        "Unable to retrieve column names from finalized transaction."
      );
    }
    const columnCount = this._wasm.column_count(this._stmt);
    const columns = [];
    for (let i = 0; i < columnCount; i++) {
      const name = getStr(
        this._wasm,
        this._wasm.column_name(this._stmt, i)
      );
      const originName = getStr(
        this._wasm,
        this._wasm.column_origin_name(this._stmt, i)
      );
      const tableName = getStr(
        this._wasm,
        this._wasm.column_table_name(this._stmt, i)
      );
      columns.push({ name, originName, tableName });
    }
    return columns;
  }
};

// deno-cache:https://deno.land/x/sqlite@v3.2.1/src/db.ts
var DB = class {
  _wasm;
  _open;
  _statements;
  _transactionDepth;
  /**
   * Create a new database. The file at the
   * given path will be opened with the
   * mode specified in options. The default
   * mode is `create`.
   *
   * If no path is given, or if the `memory`
   * option is set, the database is opened in
   * memory.
   *
   * # Examples
   *
   * Create an in-memory database.
   * ```typescript
   * const db = new DB();
   * ```
   *
   * Open a database backed by a file on disk.
   * ```typescript
   * const db = new DB("path/to/database.sqlite");
   * ```
   *
   * Pass options to open a read-only database.
   * ```typescript
   * const db = new DB("path/to/database.sqlite", { mode: "read" });
   * ```
   */
  constructor(path = ":memory:", options = {}) {
    this._wasm = instantiate().exports;
    this._open = false;
    this._statements = /* @__PURE__ */ new Set();
    this._transactionDepth = 0;
    let flags = 0;
    switch (options.mode) {
      case "read":
        flags = 1 /* ReadOnly */;
        break;
      case "write":
        flags = 2 /* ReadWrite */;
        break;
      case "create":
      default:
        flags = 2 /* ReadWrite */ | 4 /* Create */;
        break;
    }
    if (options.memory === true) {
      flags |= 128 /* Memory */;
    }
    if (options.uri === true) {
      flags |= 64 /* Uri */;
    }
    const status = setStr(
      this._wasm,
      path,
      (ptr) => this._wasm.open(ptr, flags)
    );
    if (status !== 0 /* SqliteOk */) {
      throw new SqliteError(this._wasm, status);
    }
    this._open = true;
  }
  /**
   * Query the database and return all matching
   * rows.
   *
   * This is equivalent to calling `all` on
   * a prepared query which is then immediately
   * finalized.
   *
   * The type parameter `R` may be supplied by
   * the user to indicated the type for the rows returned
   * by the query. Notice that the user is responsible
   * for ensuring the correctness of the supplied type.
   *
   * To avoid SQL injection, user-provided values
   * should always be passed to the database through
   * a query parameter.
   *
   * See `QueryParameterSet` for documentation on
   * how values can be bound to SQL statements.
   *
   * See `QueryParameter` for documentation on how
   * values are returned from the database.
   *
   * # Examples
   *
   * ```typescript
   * const rows = db.query<[string, number]>("SELECT name, age FROM people WHERE city = ?", [city]);
   * // rows = [["Peter Parker", 21], ...]
   * ```
   */
  query(sql, params) {
    const query = this.prepareQuery(sql);
    try {
      const rows = query.all(params);
      query.finalize();
      return rows;
    } catch (err) {
      query.finalize();
      throw err;
    }
  }
  /**
   * Like `query` except each row is returned
   * as an object containing key-value pairs.
   *
   * # Examples
   *
   * ```typescript
   * const rows = db.query<{ name: string, age: number }>("SELECT name, age FROM people");
   * // rows = [{ name: "Peter Parker", age: 21 }, ...]
   * ```
   */
  queryEntries(sql, params) {
    const query = this.prepareQuery(sql);
    try {
      const rows = query.allEntries(params);
      query.finalize();
      return rows;
    } catch (err) {
      query.finalize();
      throw err;
    }
  }
  /**
   * Prepares the given SQL query, so that it
   * can be run multiple times and potentially
   * with different parameters.
   *
   * If a query will be issued a lot, this is more
   * efficient than using `query`. A prepared
   * query also provides more control over how
   * the query is run, as well as access to meta-data
   * about the issued query.
   *
   * The returned `PreparedQuery` object must be
   * finalized by calling its `finalize` method
   * once it is no longer needed.
   *
   * # Typing Queries
   *
   * Prepared query objects accept three type parameters
   * to specify precise types for returned data and
   * query parameters.
   *
   * The first type parameter `R` indicates the tuple type
   * for rows returned by the query.
   *
   * The second type parameter `O` indicates the record type
   * for rows returned as entries (mappings from column names
   * to values).
   *
   * The third type parameter `P` indicates the type this query
   * accepts as parameters.
   *
   * Note, that the correctness of those types must
   * be guaranteed by the caller of this function.
   *
   * # Examples
   *
   * ```typescript
   * const query = db.prepareQuery<
   *   [string, number],
   *   { name: string, age: number },
   *   { city: string },
   *  >("SELECT name, age FROM people WHERE city = :city");
   * // use query ...
   * query.finalize();
   * ```
   */
  prepareQuery(sql) {
    if (!this._open) {
      throw new SqliteError("Database was closed.");
    }
    const stmt = setStr(
      this._wasm,
      sql,
      (ptr) => this._wasm.prepare(ptr)
    );
    if (stmt === 0 /* Null */) {
      throw new SqliteError(this._wasm);
    }
    this._statements.add(stmt);
    return new PreparedQuery(this._wasm, stmt, this._statements);
  }
  /**
   * Run a function within the context of a database
   * transaction. If the function throws an error,
   * the transaction is rolled back. Otherwise, the
   * transaction is committed when the function returns.
   *
   * Calls to `transaction` may be nested. Nested transactions
   * behave like SQLite save points.
   */
  transaction(closure) {
    this._transactionDepth += 1;
    this.query(`SAVEPOINT _deno_sqlite_sp_${this._transactionDepth}`);
    let value;
    try {
      value = closure();
    } catch (err) {
      this.query(`ROLLBACK TO _deno_sqlite_sp_${this._transactionDepth}`);
      this._transactionDepth -= 1;
      throw err;
    }
    this.query(`RELEASE _deno_sqlite_sp_${this._transactionDepth}`);
    this._transactionDepth -= 1;
    return value;
  }
  /**
   * Close the database. This must be called if
   * the database is no longer used to avoid leaking
   * open file descriptors.
   *
   * If `force` is specified, any active `PreparedQuery`
   * will be finalized. Otherwise, this throws if there
   * are active queries.
   *
   * `close` may safely be called multiple
   * times.
   */
  close(force = false) {
    if (!this._open) {
      return;
    }
    if (force) {
      for (const stmt of this._statements) {
        if (this._wasm.finalize(stmt) !== 0 /* SqliteOk */) {
          throw new SqliteError(this._wasm);
        }
      }
    }
    if (this._wasm.close() !== 0 /* SqliteOk */) {
      throw new SqliteError(this._wasm);
    }
    this._open = false;
  }
  /**
   * Get last inserted row id. This corresponds to
   * the SQLite function `sqlite3_last_insert_rowid`.
   *
   * Before a row is inserted for the first time (since
   * the database was opened), this returns `0`.
   */
  get lastInsertRowId() {
    return this._wasm.last_insert_rowid();
  }
  /**
   * Return the number of rows modified, inserted or
   * deleted by the most recently completed query.
   * This corresponds to the SQLite function
   * `sqlite3_changes`.
   */
  get changes() {
    return this._wasm.changes();
  }
  /**
   * Return the number of rows modified, inserted or
   * deleted since the database was opened.
   * This corresponds to the SQLite function
   * `sqlite3_total_changes`.
   */
  get totalChanges() {
    return this._wasm.total_changes();
  }
};

// deno-cache:https://deno.land/x/sqlite@v3.2.1/mod.ts
await compile();

// deno-cache:https://deno.land/x/websql@v1.1.0/src/SQLiteDBCache.ts
var SQLiteDBCache = class {
  #cache;
  #modes;
  #options;
  constructor() {
    this.#cache = /* @__PURE__ */ new Map();
    this.#modes = {};
    this.#options = { memory: true };
    addEventListener("unload", () => this.#close());
  }
  db(name, mode) {
    mode = this.#options.memory ? "create" : mode;
    const cached = this.#cache.get(name);
    if (cached === void 0) {
      return this.#make(name, mode);
    } else if (this.#modes[name] !== mode) {
      cached.close();
      this.#cache.delete(name);
      delete this.#modes[name];
      return this.#make(name, mode);
    }
    return cached;
  }
  configure(customOptions = {}) {
    this.#options = {
      ...this.#options,
      ...customOptions
    };
    return Object.freeze(structuredClone(this.#options));
  }
  #make(name, mode) {
    const newDb = new DB(name, { ...this.#options, mode });
    this.#cache.set(name, newDb);
    this.#modes[name] = mode;
    return newDb;
  }
  #close() {
    for (const db of this.#cache.values()) {
      db.close(true);
    }
  }
};
var cache = new SQLiteDBCache();
function configureSQLiteDB(customOptions) {
  return cache.configure(customOptions);
}

// deno-cache:https://deno.land/x/websql@v1.1.0/src/SQLResultSetRowList.ts
var SQLResultSetRowList = class {
  #rows;
  constructor(data) {
    this.#rows = Array.isArray(data) ? data : [];
  }
  get length() {
    return this.#rows.length;
  }
  item(index) {
    return this.#rows[index];
  }
};

// deno-cache:https://deno.land/x/websql@v1.1.0/src/SQLResultSet.ts
var SQLResultSet = class {
  #insertId;
  #rowsAffected;
  #rows;
  constructor(rows, insertId, rowsAffected) {
    this.#insertId = insertId;
    this.#rowsAffected = rowsAffected;
    this.#rows = typeof rows === "undefined" ? new SQLResultSetRowList() : rows;
  }
  get insertId() {
    if (this.#insertId)
      return this.#insertId;
    throw new Error("INVALID_ACCESS_ERR");
  }
  get rowsAffected() {
    return this.#rowsAffected ?? 0;
  }
  get rows() {
    return this.#rows;
  }
};

// deno-cache:https://deno.land/x/websql@v1.1.0/src/SQLTransaction.ts
var SQLTransaction = class {
  #db;
  constructor(db) {
    this.#db = db;
  }
  executeSql(sqlStatement, args, callback, errorCallback) {
    queueMicrotask(() => {
      try {
        const data = this.#db.queryEntries(sqlStatement, args);
        const { lastInsertRowId: insertId, changes } = this.#db;
        const resultSet = new SQLResultSet(new SQLResultSetRowList(data), insertId, changes);
        callback(this, resultSet);
      } catch (error) {
        if (errorCallback)
          errorCallback(this, error);
      }
    });
  }
};

// deno-cache:https://deno.land/x/websql@v1.1.0/src/Database.ts
var Database = class {
  #name;
  #version;
  constructor(name, version, _displayName, _estimatedSize) {
    this.#name = name;
    this.#version = version;
  }
  #doTransaction(txMode, callback, errorCallback, successCallback) {
    queueMicrotask(() => {
      try {
        const db = cache.db(this.#name, txMode);
        const transaction = new SQLTransaction(db);
        try {
          callback(transaction);
          if (successCallback)
            successCallback();
        } catch (error) {
          if (errorCallback)
            errorCallback(error);
        }
      } catch (error) {
        if (errorCallback)
          errorCallback(error);
      }
    });
  }
  transaction(callback, errorCallback, successCallback) {
    this.#doTransaction("create", callback, errorCallback, successCallback);
  }
  readTransaction(callback, errorCallback, successCallback) {
    this.#doTransaction("read", callback, errorCallback, successCallback);
  }
  get version() {
    return this.#version;
  }
  changeVersion(oldVersion, newVersion, callback, errorCallback, successCallback) {
    if (oldVersion === this.#version) {
      this.#version = newVersion;
      if (callback)
        this.#doTransaction("write", callback, errorCallback, successCallback);
    }
  }
};
function openDatabase(name, version, displayName, estimatedSize) {
  return new Database(name, version, displayName, estimatedSize);
}

// deno-cache:https://deno.land/x/indexeddb@v1.1.0/lib/shim.ts
var setGlobalVars = indexeddbshim_noninvasive_default;
function createIndexedDB(makeGlobal = false) {
  const kludge = makeGlobal ? null : { shimIndexedDB: {} };
  const idb = setGlobalVars(kludge, {
    avoidAutoShim: !makeGlobal,
    checkOrigin: false,
    win: { openDatabase }
  });
  if (!makeGlobal)
    idb.shimIndexedDB.__useShim();
  return {
    IDBCursor: idb.IDBCursor,
    IDBCursorWithValue: idb.IDBCursorWithValue,
    IDBDatabase: idb.IDBDatabase,
    IDBFactory: idb.IDBFactory,
    IDBIndex: idb.IDBIndex,
    IDBKeyRange: idb.IDBKeyRange,
    IDBObjectStore: idb.IDBObjectStore,
    IDBOpenDBRequest: idb.IDBOpenDBRequest,
    IDBRequest: idb.IDBRequest,
    IDBTransaction: idb.IDBTransaction,
    IDBVersionChangeEvent: idb.IDBVersionChangeEvent,
    indexedDB: idb.indexedDB
  };
}

// deno-cache:https://deno.land/x/indexeddb@v1.1.0/ponyfill_memory.ts
configureSQLiteDB({ memory: true });
var api = createIndexedDB();
var IDBCursor = api.IDBCursor;
var IDBCursorWithValue = api.IDBCursorWithValue;
var IDBDatabase = api.IDBDatabase;
var IDBFactory = api.IDBFactory;
var IDBIndex = api.IDBIndex;
var IDBKeyRange = api.IDBKeyRange;
var IDBObjectStore = api.IDBObjectStore;
var IDBOpenDBRequest = api.IDBOpenDBRequest;
var IDBRequest = api.IDBRequest;
var IDBTransaction = api.IDBTransaction;
var IDBVersionChangeEvent = api.IDBVersionChangeEvent;
var indexedDB2 = api.indexedDB;

// deno-cache:https://deno.land/std@0.207.0/fmt/colors.ts
var { Deno: Deno2 } = globalThis;
var noColor = typeof Deno2?.noColor === "boolean" ? Deno2.noColor : false;
var ANSI_PATTERN = new RegExp(
  [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TXZcf-nq-uy=><~]))"
  ].join("|"),
  "g"
);

// src/indexedDB.js
if (globalThis.indexedDB === void 0) {
  Dexie$1.dependencies.indexedDB = indexedDB2;
}
async function stateDB(unspentNotes, spentNotes, pos) {
  const db = new Dexie$1("state");
  db.version(1).stores({
    // Added a autoincremented id for good practice
    // if we need to index it in future
    unspentNotes: "pos,psk,nullifier",
    spentNotes: "pos,psk,nullifier"
  });
  try {
    localStorage.setItem("lastPos", pos.toString());
    console.log("Set last pos in local storage: " + pos);
  } catch (e) {
    console.error("Cannot set pos in local storage, the wallet will be slow");
  }
  await db.unspentNotes.bulkPut(unspentNotes).then(() => {
    console.log("Persisted unspent notes");
  }).catch(function(e) {
    console.error(
      "Some insert operations did not while pushing unspent notes. " + e.failures.length + " failures"
    );
  });
  await db.spentNotes.bulkPut(spentNotes).then(() => {
    console.log("Persisted spent notes");
    db.close();
  }).catch(Dexie$1.BulkError, function(e) {
    console.error(
      "Some insert operations did not while pushing spent notes. " + e.failures.length + " failures"
    );
  });
}
async function getUnpsentNotes(psk, callback) {
  const dbHandle = new Dexie$1("state");
  await dbHandle.open().then(async (db) => {
    const myTable = db.table("unspentNotes");
    if (myTable) {
      const notes = myTable.filter((note) => note.psk == psk);
      await notes.toArray().then(async (result) => {
        await callback(result);
      });
    }
  }).catch((error) => {
    console.error("Error while getting unspent notes: " + error);
  });
}
function getLastPos() {
  try {
    const lastPos = localStorage.getItem("lastPos");
    if (lastPos == null) {
      console.warn("Last pos is null, need to sync");
      return 0;
    } else {
      try {
        return parseInt(lastPos) + 1;
      } catch (e) {
        console.error("Invalid lastPos set");
        localStorage.removeItem("lastPos");
      }
    }
  } catch (e) {
    console.error(
      "Cannot retrieve lastPos in local storage, the walconst might be slow"
    );
  }
}
async function getAllUnpsentNotes(callback) {
  const db = new Dexie$1("state");
  await db.open().then(async (db2) => {
    const myTable = db2.table("unspentNotes");
    if (myTable) {
      await myTable.toArray().then(async (result) => {
        await callback(result);
      });
    }
  }).catch((error) => {
    console.error("Error while getting all unspent notes: " + error);
  });
}
async function deleteUnspentNotesInsertSpentNotes(unspentNotesPos, spentNotes) {
  const db = new Dexie$1("state");
  await db.open().then(async (db2) => {
    const unspentNotesTable = db2.table("unspentNotes");
    if (unspentNotesTable) {
      await unspentNotesTable.bulkDelete(unspentNotesPos);
    }
    const spentNotesTable = db2.table("spentNotes");
    if (spentNotesTable) {
      await spentNotesTable.bulkPut(spentNotes);
    }
  }).catch(Dexie$1.BulkError, function(e) {
    console.error(
      "Some insert operations did not while deleting unspent notes. " + e.failures.length + " failures"
    );
  });
}

// src/rkyv.js
function getTreeLeafDeserialized(wasm2, leaf) {
  const args = JSON.stringify({
    bytes: Array.from(leaf)
  });
  const treeLeaf = jsonFromBytes(call(wasm2, args, wasm2.rkyv_tree_leaf));
  return treeLeaf;
}
function getU64RkyvSerialized(wasm2, num) {
  const args = JSON.stringify({
    value: num
  });
  const bytes = call(wasm2, args, wasm2.rkyv_u64);
  return bytes;
}
function getNotesRkyvSerialized(wasm2, notes) {
  const args = JSON.stringify({
    notes
  });
  const bytes = call(wasm2, args, wasm2.rkyv_notes_array);
  return bytes;
}
function getNullifiersRkyvSerialized(wasm2, bytes) {
  const args = JSON.stringify({
    bytes: Array.from(bytes)
  });
  const result = call(wasm2, args, wasm2.rkyv_bls_scalar_array);
  return result;
}
function getOpeningsSerialized(wasm2, bytes) {
  const args = JSON.stringify({
    openings: bytes
  });
  const result = call(wasm2, args, wasm2.rkyv_openings_array);
  return result;
}

// src/balance.js
function getBalance(wasm2, seed, psk, callback) {
  return getUnpsentNotes(psk, async (notes) => {
    const unspentNotes = notes.map((object) => object.note);
    const serializedNotes = getNotesRkyvSerialized(wasm2, unspentNotes);
    const balanceArgs = JSON.stringify({
      seed: Array.from(seed),
      notes: Array.from(serializedNotes)
    });
    const obj = jsonFromBytes(call(wasm2, balanceArgs, wasm2.balance));
    obj.value = duskToLux(wasm2, obj.value);
    obj.maximum = duskToLux(wasm2, obj.maximum);
    await callback(obj);
  });
}

// src/node.js
var RKYV_TREE_LEAF_SIZE = "632";
var TRANSFER_CONTRACT = "0100000000000000000000000000000000000000000000000000000000000000";
var LOCAL_NODE = "http://127.0.0.1:8080/";
async function sync(wasm2, seed, node = LOCAL_NODE) {
  const leafSize = parseInt(RKYV_TREE_LEAF_SIZE);
  const lastPosDB = await getLastPos();
  const resp = await request(
    getU64RkyvSerialized(wasm2, lastPosDB),
    "leaves_from_pos",
    true,
    node
  );
  let leaf;
  const notes = [];
  const nullifiers = [];
  const psks = [];
  const positions = [];
  let lastPos = 0;
  for await (const chunk of resp.body) {
    for (let i = 0; i < chunk.length; i += leafSize) {
      leaf = chunk.slice(i, i + leafSize);
      const treeLeaf = getTreeLeafDeserialized(wasm2, leaf);
      const note = treeLeaf.note;
      const pos = treeLeaf.last_pos;
      const owned = checkIfOwned(wasm2, seed, note);
      if (owned.is_owned) {
        lastPos = Math.max(lastPos, pos);
        notes.push(note);
        positions.push(pos);
        nullifiers.push(owned.nullifier);
        psks.push(owned.public_spend_key);
      }
    }
  }
  const nullifiersSerialized = getNullifiersRkyvSerialized(wasm2, nullifiers);
  const existingNullifiersRemote = await request(
    nullifiersSerialized,
    "existing_nullifiers",
    false
  );
  const existingNullifiers = await existingNullifiersRemote.arrayBuffer();
  const existingNullifiersBytes = new Uint8Array(existingNullifiers);
  const allNotes = unspentSpentNotes(
    wasm2,
    notes,
    nullifiers,
    existingNullifiersBytes,
    psks
  );
  const unspentNotes = Array.from(allNotes.unspent_notes);
  const spentNotes = Array.from(allNotes.spent_notes);
  if (unspentNotes.length > 0 || spentNotes.length > 0 || // if the last pos we get from the node is bigger than the
  // last pos we have on the db then we need to update it
  lastPos >= lastPosDB) {
    await stateDB(unspentNotes, spentNotes, lastPos);
  }
  const unspentNotesNullifiers = [];
  const unspentNotesTemp = [];
  const unspentNotesPsks = [];
  const unspentNotesPos = [];
  const correctNotes = async () => {
    const unspentNotesNullifiersSerialized = getNullifiersRkyvSerialized(
      wasm2,
      unspentNotesNullifiers
    );
    const unpsentNotesExistingNullifiersRemote = await request(
      unspentNotesNullifiersSerialized,
      "existing_nullifiers",
      false
    );
    const unspentNotesExistingNullifiers = await unpsentNotesExistingNullifiersRemote.arrayBuffer();
    const unspentNotesExistingNullifiersBytes = new Uint8Array(
      unspentNotesExistingNullifiers
    );
    const correctedNotes = unspentSpentNotes(
      wasm2,
      unspentNotesTemp,
      unspentNotesNullifiers,
      unspentNotesExistingNullifiersBytes,
      unspentNotesPsks
    );
    const correctedSpentNotes = Array.from(correctedNotes.spent_notes);
    const posToRemove = correctedSpentNotes.map((noteData) => noteData.pos);
    await deleteUnspentNotesInsertSpentNotes(posToRemove, correctedSpentNotes);
  };
  await getAllUnpsentNotes(async (allUnspentNotes) => {
    for (const unspentNote of await allUnspentNotes) {
      unspentNotesNullifiers.push(unspentNote.nullifier);
      unspentNotesTemp.push(unspentNote.note);
      unspentNotesPsks.push(unspentNote.psk);
      unspentNotesPos.push(unspentNote.pos);
    }
    await correctNotes();
  });
}
function request(data, request_name, stream, node = LOCAL_NODE, target = TRANSFER_CONTRACT, targetType = "1") {
  const request_name_bytes = toBytes(request_name);
  const number = numberToLittleEndianByteArray(request_name.length);
  const length = number.length + request_name_bytes.length + data.length;
  const request2 = new Uint8Array(length);
  request2.set(number, 0);
  request2.set(request_name_bytes, number.length);
  request2.set(new Uint8Array(data), number.length + request_name_bytes.length);
  const headers = {
    "Content-Type": "application/octet-stream",
    "rusk-version": "0.7.0-rc"
  };
  if (stream) {
    headers["Rusk-Feeder"] = "1";
  }
  return fetch(node + targetType + "/" + target, {
    method: "POST",
    headers,
    body: request2
  });
}
async function fetchOpenings(pos, node = LOCAL_NODE) {
  try {
    const response = await request(pos, "opening", false, node);
    const buffer = await response.arrayBuffer();
    const bytes = new Uint8Array(buffer);
    return bytes;
  } catch (e) {
    console.log("Fetching Openings failed: " + e);
  }
}
async function stakeInfo(wasm2, seed, index) {
  const pk = getPublicKeyRkyvSerialized(wasm2, seed, index);
  console.log("Fetching stake info");
  const stakeInfoRequest = await request(
    pk,
    "get_stake",
    false,
    void 0,
    "0200000000000000000000000000000000000000000000000000000000000000",
    "1"
  );
  const stakeInfoRequestBuffer = await stakeInfoRequest.arrayBuffer();
  const stakeInfoRequestBytes = new Uint8Array(stakeInfoRequestBuffer);
  const args = JSON.stringify({
    stake_info: Array.from(stakeInfoRequestBytes)
  });
  const info = jsonFromBytes(call(wasm2, args, wasm2.get_stake_info));
  let epoch = info.eligiblity / 2160;
  info["epoch"] = epoch;
  return info;
}
function numberToLittleEndianByteArray(num) {
  const byteArray = new Uint8Array(4);
  for (let i = 0; i < 4; i++) {
    byteArray[i] = num >> i * 8 & 255;
  }
  return byteArray;
}

// src/tx.js
function getUnprovenTxVarBytes(wasm2, unprovenTx) {
  const args = JSON.stringify({
    bytes: Array.from(unprovenTx)
  });
  const result = jsonFromBytes(call(wasm2, args, wasm2.unproven_tx_to_bytes));
  return result.serialized;
}
function proveTx(wasm2, unprovenTx, proof) {
  const args = JSON.stringify({
    unproven_tx: Array.from(unprovenTx),
    proof: Array.from(proof)
  });
  const result = jsonFromBytes(call(wasm2, args, wasm2.prove_tx));
  return result;
}

// src/graphql.js
async function graphQLRequest(query) {
  const bytes = toBytes(query);
  const req = await request(
    bytes,
    "gql",
    false,
    "http://127.0.0.1:8080/",
    "Chain",
    "2"
  );
  const buffer = await req.arrayBuffer();
  const response = new Uint8Array(buffer);
  return response;
}
async function txStatus(txid, callback) {
  await graphQLRequest(`query { tx(hash: "${txid}") { err }}`).then(
    (response) => {
      const json = JSON.parse(new TextDecoder().decode(response));
      callback(json);
    }
  );
}
function waitTillAccept(txHash) {
  return new Promise((resolve, reject) => {
    let i = 0;
    const interval = setInterval(async () => {
      await txStatus(txHash, (status) => {
        i = i + 1;
        if (i > 10) {
          reject("tx was not accepted in 10 seconds");
        }
        const remoteTxStatus = status.tx;
        if (remoteTxStatus) {
          clearInterval(interval);
          if (remoteTxStatus.err) {
            reject("error in tx: " + status.tx.err);
          } else {
            resolve();
          }
        }
      });
    }, 1e3);
  });
}

// src/execute.js
function execute(wasm2, seed, rng_seed, psk, output, callData, crossover, fee, gas_limit, gas_price) {
  const sender_index = getPsks(wasm2, seed).indexOf(psk);
  return getUnpsentNotes(psk, async (notes) => {
    const openings = [];
    const allNotes = [];
    const psks = [];
    const nullifiers = [];
    for (const noteData of notes) {
      const pos = noteData.pos;
      const fetchedOpening = await fetchOpenings(
        getU64RkyvSerialized(wasm2, pos)
      );
      const opening = Array.from(fetchedOpening);
      if (opening.length > 0) {
        openings.push({
          opening,
          pos
        });
      }
      allNotes.push(noteData.note);
      psks.push(noteData.psk);
      nullifiers.push(noteData.nullifier);
    }
    const openingsSerialized = Array.from(
      getOpeningsSerialized(wasm2, openings)
    );
    const inputs = Array.from(getNotesRkyvSerialized(wasm2, allNotes));
    const args = JSON.stringify({
      call: callData,
      crossover,
      seed,
      fee,
      rng_seed: Array.from(rng_seed),
      inputs,
      refund: psk,
      output,
      openings: openingsSerialized,
      sender_index,
      gas_limit,
      gas_price
    });
    const unprovenTx = jsonFromBytes(call(wasm2, args, wasm2.execute)).tx;
    console.log("unrpovenTx length: " + unprovenTx.length);
    const varBytes = getUnprovenTxVarBytes(wasm2, unprovenTx);
    const proofReq = await request(
      varBytes,
      "prove_execute",
      false,
      void 0,
      "rusk",
      "2"
    );
    console.log("prove_execute status code: " + proofReq.status);
    const buffer = await proofReq.arrayBuffer();
    const bytes = new Uint8Array(buffer);
    const tx = proveTx(wasm2, unprovenTx, bytes);
    const txBytes = tx.bytes;
    const txHash = tx.hash;
    const preVerifyReq = await request(
      txBytes,
      "preverify",
      false,
      void 0,
      "rusk",
      "2"
    );
    console.log("preverify request status code: " + preVerifyReq.status);
    const propogateReq = await request(
      txBytes,
      "propagate_tx",
      false,
      void 0,
      "Chain",
      "2"
    );
    console.log("propogating chain request status: " + propogateReq.status);
    await waitTillAccept(txHash);
  });
}

// src/contracts/transfer.js
function transfer(wasm2, seed, sender, receiver, amount, gasLimit, gasPrice) {
  amount = luxToDusk(wasm2, amount);
  const output = {
    receiver,
    note_type: "Obfuscated",
    // TODO: generate ref_id(s)
    ref_id: 1,
    value: amount
  };
  const rng_seed = new Uint8Array(32);
  crypto.getRandomValues(rng_seed);
  return execute(
    wasm2,
    seed,
    rng_seed,
    sender,
    output,
    void 0,
    void 0,
    void 0,
    gasLimit,
    gasPrice
  );
}

// src/mnemonic.js
function generateRandomMnemonic(wasm2) {
  const rng_seed = new Uint8Array(32);
  crypto.getRandomValues(rng_seed);
  const json = JSON.stringify({
    rng_seed: Array.from(rng_seed)
  });
  return jsonFromBytes(call(wasm2, json, wasm2.new_mnemonic)).mnemonic_string;
}
function getSeedFromMnemonic(wasm2, mnemonic, passphrase) {
  const json = JSON.stringify({
    mnemonic,
    passphrase
  });
  return jsonFromBytes(call(wasm2, json, wasm2.get_mnemonic_seed)).mnemonic_seed;
}

// src/contracts/stake.js
async function stake(wasm2, seed, senderIndex, refund, amount, gasLimit, gasPrice) {
  const rng_seed = new Uint8Array(32);
  crypto.getRandomValues(rng_seed);
  amount = luxToDusk(wasm2, amount);
  const info = await stakeInfo(wasm2, seed, senderIndex);
  if (info.has_staked) {
    throw new Error("Cannot stake if already staked");
  }
  if (!info.has_key) {
    throw new Error("No stake exists for this key");
  }
  let counter = 0;
  if (info.counter) {
    counter = info.counter;
  }
  const args = JSON.stringify({
    rng_seed: Array.from(rng_seed),
    seed,
    refund,
    value: amount,
    sender_index: senderIndex,
    gas_limit: gasLimit,
    gas_price: gasPrice
  });
  const stctProofArgs = jsonFromBytes(call(wasm2, args, wasm2.get_stct_proof));
  const stctProofBytes = stctProofArgs.bytes;
  const crossover = stctProofArgs.crossover;
  const blinder = stctProofArgs.blinder;
  const fee = stctProofArgs.fee;
  const stctProofReq = await request(
    stctProofBytes,
    "prove_stct",
    false,
    void 0,
    "rusk",
    "2"
  );
  const bufferStctProofReq = await stctProofReq.arrayBuffer();
  console.log(
    "stct proof request response length: " + bufferStctProofReq.byteLength
  );
  const callDataArgs = JSON.stringify({
    staker_index: senderIndex,
    seed,
    spend_proof: Array.from(new Uint8Array(bufferStctProofReq)),
    value: amount,
    counter
  });
  const stakeCallData = jsonFromBytes(
    call(wasm2, callDataArgs, wasm2.get_stake_call_data)
  );
  const contract = stakeCallData.contract;
  const method = stakeCallData.method;
  const payload = stakeCallData.payload;
  const callData = {
    contract,
    method,
    payload
  };
  const crossoverType = {
    crossover,
    blinder,
    value: amount
  };
  return execute(
    wasm2,
    seed,
    rng_seed,
    refund,
    void 0,
    callData,
    crossoverType,
    fee,
    gasLimit,
    gasPrice
  );
}
async function unstake(wasm2, seed, sender_index, refund, gasLimit, gasPrice) {
  const rng_seed = new Uint8Array(32);
  crypto.getRandomValues(rng_seed);
  const info = await stakeInfo(wasm2, seed, sender_index);
  if (!info.has_staked || info.amount === void 0) {
    throw new Error("Cannot unstake if there's no stake");
  }
  let counter = 0;
  if (info.counter) {
    counter = info.counter;
  }
  const value = info.amount;
  const args = JSON.stringify({
    rng_seed: Array.from(rng_seed),
    seed,
    refund,
    value,
    sender_index,
    gas_limit: gasLimit,
    gas_price: gasPrice
  });
  const wfctProofArgs = jsonFromBytes(call(wasm2, args, wasm2.get_wfct_proof));
  const wfctProofBytes = wfctProofArgs.bytes;
  const crossover = wfctProofArgs.crossover;
  const blinder = wfctProofArgs.blinder;
  const fee = wfctProofArgs.fee;
  const unstakeNote = wfctProofArgs.unstake_note;
  const wfctProofReq = await request(
    wfctProofBytes,
    "prove_wfct",
    false,
    void 0,
    "rusk",
    "2"
  );
  const bufferWfctProofReq = await wfctProofReq.arrayBuffer();
  console.log(
    "wfct proof request response length: " + bufferWfctProofReq.byteLength
  );
  const callDataArgs = JSON.stringify({
    sender_index,
    seed,
    unstake_proof: Array.from(new Uint8Array(bufferWfctProofReq)),
    unstake_note: unstakeNote,
    counter
  });
  const unstakeCallData = jsonFromBytes(
    call(wasm2, callDataArgs, wasm2.get_unstake_call_data)
  );
  const contract = unstakeCallData.contract;
  const method = unstakeCallData.method;
  const payload = unstakeCallData.payload;
  const callData = {
    contract,
    method,
    payload
  };
  const crossoverType = {
    crossover,
    blinder,
    value: 0
  };
  return execute(
    wasm2,
    seed,
    rng_seed,
    refund,
    void 0,
    callData,
    crossoverType,
    fee,
    gasLimit,
    gasPrice
  );
}
async function stakeAllow(wasm2, seed, staker_index, sender_index, gasLimit, gasPrice) {
  const rng_seed = new Uint8Array(32);
  crypto.getRandomValues(rng_seed);
  const senderStakeinfo = await stakeInfo(wasm2, seed, sender_index);
  const stakerStakeInfo = await stakeInfo(wasm2, seed, staker_index);
  console.log("sender_index", sender_index);
  const refund = getPsks(wasm2, seed)[sender_index];
  let counter = 0;
  if (stakerStakeInfo.has_key) {
    throw new Error("staker_index is already allowed to stake");
  }
  if (senderStakeinfo.counter) {
    counter = senderStakeinfo.counter;
  }
  const args = JSON.stringify({
    rng_seed: Array.from(rng_seed),
    seed,
    refund,
    sender_index,
    owner_index: staker_index,
    counter,
    gas_limit: gasLimit,
    gas_price: gasPrice
  });
  const allowCallData = jsonFromBytes(
    call(wasm2, args, wasm2.get_allow_call_data)
  );
  const callData = {
    contract: allowCallData.contract,
    method: allowCallData.method,
    payload: allowCallData.payload
  };
  const crossoverType = {
    crossover: allowCallData.crossover,
    blinder: allowCallData.blinder,
    value: 0
  };
  return execute(
    wasm2,
    seed,
    rng_seed,
    refund,
    void 0,
    callData,
    crossoverType,
    allowCallData.fee,
    gasLimit,
    gasPrice
  );
}
async function withdrawReward(wasm2, seed, staker_index, gasLimit, gasPrice) {
  const rng_seed = new Uint8Array(32);
  crypto.getRandomValues(rng_seed);
  const info = await stakeInfo(wasm2, seed, staker_index);
  const refund = getPsks(wasm2, seed)[staker_index];
  if (!info.has_staked || info.reward <= 0) {
    throw new Error(
      "No reward to withdraw, take part in concensus to recieve reward"
    );
  }
  let counter = 0;
  if (info.counter) {
    counter = info.counter;
  }
  const args = JSON.stringify({
    rng_seed: Array.from(rng_seed),
    seed,
    refund,
    sender_index: staker_index,
    owner_index: staker_index,
    counter,
    gas_limit: gasLimit,
    gas_price: gasPrice
  });
  const withdrawCallData = jsonFromBytes(
    call(wasm2, args, wasm2.get_withdraw_call_data)
  );
  const callData = {
    contract: withdrawCallData.contract,
    method: withdrawCallData.method,
    payload: withdrawCallData.payload
  };
  const crossoverType = {
    crossover: withdrawCallData.crossover,
    blinder: withdrawCallData.blinder,
    value: 0
  };
  return execute(
    wasm2,
    seed,
    rng_seed,
    refund,
    void 0,
    callData,
    crossoverType,
    withdrawCallData.fee,
    gasLimit,
    gasPrice
  );
}

// src/mod.js
function Wallet(wasmExports, seed, gasLimit = 29e8, gasPrice = 1) {
  this.wasm = wasmExports;
  this.seed = seed;
  this.gasLimit = gasLimit;
  this.gasPrice = gasPrice;
}
Wallet.prototype.getBalance = function(psk, callback) {
  return getBalance(this.wasm, this.seed, psk, callback);
};
Wallet.prototype.getPsks = function() {
  return getPsks(this.wasm, this.seed);
};
Wallet.prototype.sync = function() {
  return sync(this.wasm, this.seed);
};
Wallet.prototype.transfer = function(sender, reciever, amount) {
  return transfer(
    this.wasm,
    this.seed,
    sender,
    reciever,
    amount,
    this.gasLimit,
    this.gasPrice
  );
};
Wallet.prototype.stake = function(staker, amount) {
  const minStake = 1e3;
  const index = this.getPsks().indexOf(staker);
  if (amount < minStake) {
    throw new Error(`Stake amount needs to be above a ${minStake} dusk`);
  }
  if (!index) {
    throw new Error("Staker psk not found");
  }
  return this.getBalance(staker, async (bal) => {
    if (bal.value < minStake) {
      throw new Error(
        `Balance needs to be greater than min stake amount of ${minStake}`
      );
    } else {
      await stake(
        this.wasm,
        this.seed,
        index,
        staker,
        amount,
        this.gasLimit,
        this.gasPrice
      );
    }
  });
};
Wallet.prototype.stakeInfo = async function(psk) {
  const index = this.getPsks().indexOf(psk);
  if (index < 0) {
    throw new Error("Staker psk not found");
  }
  const info = await stakeInfo(this.wasm, this.seed, index);
  if (info.amount) {
    info["amount"] = duskToLux(this.wasm, info.amount);
  }
  return info;
};
Wallet.prototype.unstake = function(unstaker) {
  const index = this.getPsks().indexOf(unstaker);
  if (!index) {
    throw new Error("psk not found");
  }
  return unstake(
    this.wasm,
    this.seed,
    index,
    unstaker,
    this.gasLimit,
    this.gasPrice
  );
};
Wallet.prototype.stakeAllow = function(allowStakePsk, senderPsk) {
  const psks = this.getPsks();
  const staker = psks.indexOf(allowStakePsk);
  const sender = psks.indexOf(senderPsk);
  if (staker === -1) {
    throw new Error("staker psk not found");
  }
  if (sender === -1) {
    return stakeAllow(
      this.wasm,
      this.seed,
      staker,
      0,
      this.gasLimit,
      this.gasPrice
    );
  } else {
    return stakeAllow(
      this.wasm,
      this.seed,
      staker,
      sender,
      this.gasLimit,
      this.gasPrice
    );
  }
};
Wallet.prototype.withdrawReward = async function(psk) {
  const index = this.getPsks().indexOf(psk);
  await withdrawReward(
    this.wasm,
    this.seed,
    index,
    this.gasLimit,
    this.gasPrice
  );
};
export {
  Wallet,
  generateRandomMnemonic,
  getSeedFromMnemonic,
  txStatus
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! indexeddbshim - v9.0.0 - 1/5/2022 */
